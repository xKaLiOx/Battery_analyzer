
Battery_analyzer_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005208  08005208  00006208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c0  080052c0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052c0  080052c0  000062c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c8  080052c8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c8  080052c8  000062c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080052d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000068  08005338  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  200002c0  08005338  000072c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2f8  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002397  00000000  00000000  00012389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00014720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091c  00000000  00000000  00015308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188cb  00000000  00000000  00015c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea0f  00000000  00000000  0002e4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8c3  00000000  00000000  0003cefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca7c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  000ca804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000cde7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080051f0 	.word	0x080051f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080051f0 	.word	0x080051f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_fmul>:
 80003b4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003bc:	bf1e      	ittt	ne
 80003be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003c2:	ea92 0f0c 	teqne	r2, ip
 80003c6:	ea93 0f0c 	teqne	r3, ip
 80003ca:	d06f      	beq.n	80004ac <__aeabi_fmul+0xf8>
 80003cc:	441a      	add	r2, r3
 80003ce:	ea80 0c01 	eor.w	ip, r0, r1
 80003d2:	0240      	lsls	r0, r0, #9
 80003d4:	bf18      	it	ne
 80003d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003da:	d01e      	beq.n	800041a <__aeabi_fmul+0x66>
 80003dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e8:	fba0 3101 	umull	r3, r1, r0, r1
 80003ec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003f0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003f4:	bf3e      	ittt	cc
 80003f6:	0049      	lslcc	r1, r1, #1
 80003f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003fc:	005b      	lslcc	r3, r3, #1
 80003fe:	ea40 0001 	orr.w	r0, r0, r1
 8000402:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000406:	2afd      	cmp	r2, #253	@ 0xfd
 8000408:	d81d      	bhi.n	8000446 <__aeabi_fmul+0x92>
 800040a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800040e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000412:	bf08      	it	eq
 8000414:	f020 0001 	biceq.w	r0, r0, #1
 8000418:	4770      	bx	lr
 800041a:	f090 0f00 	teq	r0, #0
 800041e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000422:	bf08      	it	eq
 8000424:	0249      	lsleq	r1, r1, #9
 8000426:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800042a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800042e:	3a7f      	subs	r2, #127	@ 0x7f
 8000430:	bfc2      	ittt	gt
 8000432:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000436:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800043a:	4770      	bxgt	lr
 800043c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	3a01      	subs	r2, #1
 8000446:	dc5d      	bgt.n	8000504 <__aeabi_fmul+0x150>
 8000448:	f112 0f19 	cmn.w	r2, #25
 800044c:	bfdc      	itt	le
 800044e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000452:	4770      	bxle	lr
 8000454:	f1c2 0200 	rsb	r2, r2, #0
 8000458:	0041      	lsls	r1, r0, #1
 800045a:	fa21 f102 	lsr.w	r1, r1, r2
 800045e:	f1c2 0220 	rsb	r2, r2, #32
 8000462:	fa00 fc02 	lsl.w	ip, r0, r2
 8000466:	ea5f 0031 	movs.w	r0, r1, rrx
 800046a:	f140 0000 	adc.w	r0, r0, #0
 800046e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000472:	bf08      	it	eq
 8000474:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000478:	4770      	bx	lr
 800047a:	f092 0f00 	teq	r2, #0
 800047e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0040      	lsleq	r0, r0, #1
 8000486:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800048a:	3a01      	subeq	r2, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xce>
 800048e:	ea40 000c 	orr.w	r0, r0, ip
 8000492:	f093 0f00 	teq	r3, #0
 8000496:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800049a:	bf02      	ittt	eq
 800049c:	0049      	lsleq	r1, r1, #1
 800049e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004a2:	3b01      	subeq	r3, #1
 80004a4:	d0f9      	beq.n	800049a <__aeabi_fmul+0xe6>
 80004a6:	ea41 010c 	orr.w	r1, r1, ip
 80004aa:	e78f      	b.n	80003cc <__aeabi_fmul+0x18>
 80004ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	bf18      	it	ne
 80004b6:	ea93 0f0c 	teqne	r3, ip
 80004ba:	d00a      	beq.n	80004d2 <__aeabi_fmul+0x11e>
 80004bc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004c0:	bf18      	it	ne
 80004c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004c6:	d1d8      	bne.n	800047a <__aeabi_fmul+0xc6>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	4770      	bx	lr
 80004d2:	f090 0f00 	teq	r0, #0
 80004d6:	bf17      	itett	ne
 80004d8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004dc:	4608      	moveq	r0, r1
 80004de:	f091 0f00 	teqne	r1, #0
 80004e2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004e6:	d014      	beq.n	8000512 <__aeabi_fmul+0x15e>
 80004e8:	ea92 0f0c 	teq	r2, ip
 80004ec:	d101      	bne.n	80004f2 <__aeabi_fmul+0x13e>
 80004ee:	0242      	lsls	r2, r0, #9
 80004f0:	d10f      	bne.n	8000512 <__aeabi_fmul+0x15e>
 80004f2:	ea93 0f0c 	teq	r3, ip
 80004f6:	d103      	bne.n	8000500 <__aeabi_fmul+0x14c>
 80004f8:	024b      	lsls	r3, r1, #9
 80004fa:	bf18      	it	ne
 80004fc:	4608      	movne	r0, r1
 80004fe:	d108      	bne.n	8000512 <__aeabi_fmul+0x15e>
 8000500:	ea80 0001 	eor.w	r0, r0, r1
 8000504:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000508:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800050c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000510:	4770      	bx	lr
 8000512:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000516:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800051a:	4770      	bx	lr

0800051c <__aeabi_drsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e002      	b.n	8000528 <__adddf3>
 8000522:	bf00      	nop

08000524 <__aeabi_dsub>:
 8000524:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000528 <__adddf3>:
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800052e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000532:	ea94 0f05 	teq	r4, r5
 8000536:	bf08      	it	eq
 8000538:	ea90 0f02 	teqeq	r0, r2
 800053c:	bf1f      	itttt	ne
 800053e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000542:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000546:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800054a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800054e:	f000 80e2 	beq.w	8000716 <__adddf3+0x1ee>
 8000552:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000556:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800055a:	bfb8      	it	lt
 800055c:	426d      	neglt	r5, r5
 800055e:	dd0c      	ble.n	800057a <__adddf3+0x52>
 8000560:	442c      	add	r4, r5
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	ea82 0000 	eor.w	r0, r2, r0
 800056e:	ea83 0101 	eor.w	r1, r3, r1
 8000572:	ea80 0202 	eor.w	r2, r0, r2
 8000576:	ea81 0303 	eor.w	r3, r1, r3
 800057a:	2d36      	cmp	r5, #54	@ 0x36
 800057c:	bf88      	it	hi
 800057e:	bd30      	pophi	{r4, r5, pc}
 8000580:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000584:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000588:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800058c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x70>
 8000592:	4240      	negs	r0, r0
 8000594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000598:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800059c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005a4:	d002      	beq.n	80005ac <__adddf3+0x84>
 80005a6:	4252      	negs	r2, r2
 80005a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ac:	ea94 0f05 	teq	r4, r5
 80005b0:	f000 80a7 	beq.w	8000702 <__adddf3+0x1da>
 80005b4:	f1a4 0401 	sub.w	r4, r4, #1
 80005b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005bc:	db0d      	blt.n	80005da <__adddf3+0xb2>
 80005be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005c2:	fa22 f205 	lsr.w	r2, r2, r5
 80005c6:	1880      	adds	r0, r0, r2
 80005c8:	f141 0100 	adc.w	r1, r1, #0
 80005cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d0:	1880      	adds	r0, r0, r2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	4159      	adcs	r1, r3
 80005d8:	e00e      	b.n	80005f8 <__adddf3+0xd0>
 80005da:	f1a5 0520 	sub.w	r5, r5, #32
 80005de:	f10e 0e20 	add.w	lr, lr, #32
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e8:	bf28      	it	cs
 80005ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ee:	fa43 f305 	asr.w	r3, r3, r5
 80005f2:	18c0      	adds	r0, r0, r3
 80005f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	d507      	bpl.n	800060e <__adddf3+0xe6>
 80005fe:	f04f 0e00 	mov.w	lr, #0
 8000602:	f1dc 0c00 	rsbs	ip, ip, #0
 8000606:	eb7e 0000 	sbcs.w	r0, lr, r0
 800060a:	eb6e 0101 	sbc.w	r1, lr, r1
 800060e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000612:	d31b      	bcc.n	800064c <__adddf3+0x124>
 8000614:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000618:	d30c      	bcc.n	8000634 <__adddf3+0x10c>
 800061a:	0849      	lsrs	r1, r1, #1
 800061c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000620:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000624:	f104 0401 	add.w	r4, r4, #1
 8000628:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800062c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000630:	f080 809a 	bcs.w	8000768 <__adddf3+0x240>
 8000634:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	ea41 0105 	orr.w	r1, r1, r5
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000650:	4140      	adcs	r0, r0
 8000652:	eb41 0101 	adc.w	r1, r1, r1
 8000656:	3c01      	subs	r4, #1
 8000658:	bf28      	it	cs
 800065a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800065e:	d2e9      	bcs.n	8000634 <__adddf3+0x10c>
 8000660:	f091 0f00 	teq	r1, #0
 8000664:	bf04      	itt	eq
 8000666:	4601      	moveq	r1, r0
 8000668:	2000      	moveq	r0, #0
 800066a:	fab1 f381 	clz	r3, r1
 800066e:	bf08      	it	eq
 8000670:	3320      	addeq	r3, #32
 8000672:	f1a3 030b 	sub.w	r3, r3, #11
 8000676:	f1b3 0220 	subs.w	r2, r3, #32
 800067a:	da0c      	bge.n	8000696 <__adddf3+0x16e>
 800067c:	320c      	adds	r2, #12
 800067e:	dd08      	ble.n	8000692 <__adddf3+0x16a>
 8000680:	f102 0c14 	add.w	ip, r2, #20
 8000684:	f1c2 020c 	rsb	r2, r2, #12
 8000688:	fa01 f00c 	lsl.w	r0, r1, ip
 800068c:	fa21 f102 	lsr.w	r1, r1, r2
 8000690:	e00c      	b.n	80006ac <__adddf3+0x184>
 8000692:	f102 0214 	add.w	r2, r2, #20
 8000696:	bfd8      	it	le
 8000698:	f1c2 0c20 	rsble	ip, r2, #32
 800069c:	fa01 f102 	lsl.w	r1, r1, r2
 80006a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006a4:	bfdc      	itt	le
 80006a6:	ea41 010c 	orrle.w	r1, r1, ip
 80006aa:	4090      	lslle	r0, r2
 80006ac:	1ae4      	subs	r4, r4, r3
 80006ae:	bfa2      	ittt	ge
 80006b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006b4:	4329      	orrge	r1, r5
 80006b6:	bd30      	popge	{r4, r5, pc}
 80006b8:	ea6f 0404 	mvn.w	r4, r4
 80006bc:	3c1f      	subs	r4, #31
 80006be:	da1c      	bge.n	80006fa <__adddf3+0x1d2>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc0e      	bgt.n	80006e2 <__adddf3+0x1ba>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0220 	rsb	r2, r4, #32
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f302 	lsl.w	r3, r1, r2
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	fa21 f304 	lsr.w	r3, r1, r4
 80006dc:	ea45 0103 	orr.w	r1, r5, r3
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f1c4 040c 	rsb	r4, r4, #12
 80006e6:	f1c4 0220 	rsb	r2, r4, #32
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 f304 	lsl.w	r3, r1, r4
 80006f2:	ea40 0003 	orr.w	r0, r0, r3
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	fa21 f004 	lsr.w	r0, r1, r4
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	f094 0f00 	teq	r4, #0
 8000706:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800070a:	bf06      	itte	eq
 800070c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000710:	3401      	addeq	r4, #1
 8000712:	3d01      	subne	r5, #1
 8000714:	e74e      	b.n	80005b4 <__adddf3+0x8c>
 8000716:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071a:	bf18      	it	ne
 800071c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000720:	d029      	beq.n	8000776 <__adddf3+0x24e>
 8000722:	ea94 0f05 	teq	r4, r5
 8000726:	bf08      	it	eq
 8000728:	ea90 0f02 	teqeq	r0, r2
 800072c:	d005      	beq.n	800073a <__adddf3+0x212>
 800072e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000732:	bf04      	itt	eq
 8000734:	4619      	moveq	r1, r3
 8000736:	4610      	moveq	r0, r2
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	ea91 0f03 	teq	r1, r3
 800073e:	bf1e      	ittt	ne
 8000740:	2100      	movne	r1, #0
 8000742:	2000      	movne	r0, #0
 8000744:	bd30      	popne	{r4, r5, pc}
 8000746:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800074a:	d105      	bne.n	8000758 <__adddf3+0x230>
 800074c:	0040      	lsls	r0, r0, #1
 800074e:	4149      	adcs	r1, r1
 8000750:	bf28      	it	cs
 8000752:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd30      	pop	{r4, r5, pc}
 8000758:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800075c:	bf3c      	itt	cc
 800075e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000762:	bd30      	popcc	{r4, r5, pc}
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000768:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800076c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800077a:	bf1a      	itte	ne
 800077c:	4619      	movne	r1, r3
 800077e:	4610      	movne	r0, r2
 8000780:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000784:	bf1c      	itt	ne
 8000786:	460b      	movne	r3, r1
 8000788:	4602      	movne	r2, r0
 800078a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800078e:	bf06      	itte	eq
 8000790:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000794:	ea91 0f03 	teqeq	r1, r3
 8000798:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	bf00      	nop

080007a0 <__aeabi_ui2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b4:	f04f 0500 	mov.w	r5, #0
 80007b8:	f04f 0100 	mov.w	r1, #0
 80007bc:	e750      	b.n	8000660 <__adddf3+0x138>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2d>:
 80007c0:	f090 0f00 	teq	r0, #0
 80007c4:	bf04      	itt	eq
 80007c6:	2100      	moveq	r1, #0
 80007c8:	4770      	bxeq	lr
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	e73e      	b.n	8000660 <__adddf3+0x138>
 80007e2:	bf00      	nop

080007e4 <__aeabi_f2d>:
 80007e4:	0042      	lsls	r2, r0, #1
 80007e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007f2:	bf1f      	itttt	ne
 80007f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000800:	4770      	bxne	lr
 8000802:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000806:	bf08      	it	eq
 8000808:	4770      	bxeq	lr
 800080a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800080e:	bf04      	itt	eq
 8000810:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000814:	4770      	bxeq	lr
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800081c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	e71c      	b.n	8000660 <__adddf3+0x138>
 8000826:	bf00      	nop

08000828 <__aeabi_ul2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f04f 0500 	mov.w	r5, #0
 8000836:	e00a      	b.n	800084e <__aeabi_l2d+0x16>

08000838 <__aeabi_l2d>:
 8000838:	ea50 0201 	orrs.w	r2, r0, r1
 800083c:	bf08      	it	eq
 800083e:	4770      	bxeq	lr
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000846:	d502      	bpl.n	800084e <__aeabi_l2d+0x16>
 8000848:	4240      	negs	r0, r0
 800084a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800084e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000852:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000856:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800085a:	f43f aed8 	beq.w	800060e <__adddf3+0xe6>
 800085e:	f04f 0203 	mov.w	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000876:	f1c2 0320 	rsb	r3, r2, #32
 800087a:	fa00 fc03 	lsl.w	ip, r0, r3
 800087e:	fa20 f002 	lsr.w	r0, r0, r2
 8000882:	fa01 fe03 	lsl.w	lr, r1, r3
 8000886:	ea40 000e 	orr.w	r0, r0, lr
 800088a:	fa21 f102 	lsr.w	r1, r1, r2
 800088e:	4414      	add	r4, r2
 8000890:	e6bd      	b.n	800060e <__adddf3+0xe6>
 8000892:	bf00      	nop

08000894 <__aeabi_d2f>:
 8000894:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000898:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800089c:	bf24      	itt	cs
 800089e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008a6:	d90d      	bls.n	80008c4 <__aeabi_d2f+0x30>
 80008a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008bc:	bf08      	it	eq
 80008be:	f020 0001 	biceq.w	r0, r0, #1
 80008c2:	4770      	bx	lr
 80008c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c8:	d121      	bne.n	800090e <__aeabi_d2f+0x7a>
 80008ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008ce:	bfbc      	itt	lt
 80008d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008d4:	4770      	bxlt	lr
 80008d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008de:	f1c2 0218 	rsb	r2, r2, #24
 80008e2:	f1c2 0c20 	rsb	ip, r2, #32
 80008e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008ea:	fa20 f002 	lsr.w	r0, r0, r2
 80008ee:	bf18      	it	ne
 80008f0:	f040 0001 	orrne.w	r0, r0, #1
 80008f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000900:	ea40 000c 	orr.w	r0, r0, ip
 8000904:	fa23 f302 	lsr.w	r3, r3, r2
 8000908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800090c:	e7cc      	b.n	80008a8 <__aeabi_d2f+0x14>
 800090e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000912:	d107      	bne.n	8000924 <__aeabi_d2f+0x90>
 8000914:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000918:	bf1e      	ittt	ne
 800091a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800091e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000922:	4770      	bxne	lr
 8000924:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800092c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__aeabi_frsub>:
 8000934:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000938:	e002      	b.n	8000940 <__addsf3>
 800093a:	bf00      	nop

0800093c <__aeabi_fsub>:
 800093c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000940 <__addsf3>:
 8000940:	0042      	lsls	r2, r0, #1
 8000942:	bf1f      	itttt	ne
 8000944:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000948:	ea92 0f03 	teqne	r2, r3
 800094c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000950:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000954:	d06a      	beq.n	8000a2c <__addsf3+0xec>
 8000956:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800095a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800095e:	bfc1      	itttt	gt
 8000960:	18d2      	addgt	r2, r2, r3
 8000962:	4041      	eorgt	r1, r0
 8000964:	4048      	eorgt	r0, r1
 8000966:	4041      	eorgt	r1, r0
 8000968:	bfb8      	it	lt
 800096a:	425b      	neglt	r3, r3
 800096c:	2b19      	cmp	r3, #25
 800096e:	bf88      	it	hi
 8000970:	4770      	bxhi	lr
 8000972:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000976:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800097a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800097e:	bf18      	it	ne
 8000980:	4240      	negne	r0, r0
 8000982:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000986:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800098a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800098e:	bf18      	it	ne
 8000990:	4249      	negne	r1, r1
 8000992:	ea92 0f03 	teq	r2, r3
 8000996:	d03f      	beq.n	8000a18 <__addsf3+0xd8>
 8000998:	f1a2 0201 	sub.w	r2, r2, #1
 800099c:	fa41 fc03 	asr.w	ip, r1, r3
 80009a0:	eb10 000c 	adds.w	r0, r0, ip
 80009a4:	f1c3 0320 	rsb	r3, r3, #32
 80009a8:	fa01 f103 	lsl.w	r1, r1, r3
 80009ac:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009b0:	d502      	bpl.n	80009b8 <__addsf3+0x78>
 80009b2:	4249      	negs	r1, r1
 80009b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009bc:	d313      	bcc.n	80009e6 <__addsf3+0xa6>
 80009be:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009c2:	d306      	bcc.n	80009d2 <__addsf3+0x92>
 80009c4:	0840      	lsrs	r0, r0, #1
 80009c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ca:	f102 0201 	add.w	r2, r2, #1
 80009ce:	2afe      	cmp	r2, #254	@ 0xfe
 80009d0:	d251      	bcs.n	8000a76 <__addsf3+0x136>
 80009d2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009da:	bf08      	it	eq
 80009dc:	f020 0001 	biceq.w	r0, r0, #1
 80009e0:	ea40 0003 	orr.w	r0, r0, r3
 80009e4:	4770      	bx	lr
 80009e6:	0049      	lsls	r1, r1, #1
 80009e8:	eb40 0000 	adc.w	r0, r0, r0
 80009ec:	3a01      	subs	r2, #1
 80009ee:	bf28      	it	cs
 80009f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009f4:	d2ed      	bcs.n	80009d2 <__addsf3+0x92>
 80009f6:	fab0 fc80 	clz	ip, r0
 80009fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80009fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000a02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a06:	bfaa      	itet	ge
 8000a08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a0c:	4252      	neglt	r2, r2
 8000a0e:	4318      	orrge	r0, r3
 8000a10:	bfbc      	itt	lt
 8000a12:	40d0      	lsrlt	r0, r2
 8000a14:	4318      	orrlt	r0, r3
 8000a16:	4770      	bx	lr
 8000a18:	f092 0f00 	teq	r2, #0
 8000a1c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a20:	bf06      	itte	eq
 8000a22:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a26:	3201      	addeq	r2, #1
 8000a28:	3b01      	subne	r3, #1
 8000a2a:	e7b5      	b.n	8000998 <__addsf3+0x58>
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d021      	beq.n	8000a80 <__addsf3+0x140>
 8000a3c:	ea92 0f03 	teq	r2, r3
 8000a40:	d004      	beq.n	8000a4c <__addsf3+0x10c>
 8000a42:	f092 0f00 	teq	r2, #0
 8000a46:	bf08      	it	eq
 8000a48:	4608      	moveq	r0, r1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea90 0f01 	teq	r0, r1
 8000a50:	bf1c      	itt	ne
 8000a52:	2000      	movne	r0, #0
 8000a54:	4770      	bxne	lr
 8000a56:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a5a:	d104      	bne.n	8000a66 <__addsf3+0x126>
 8000a5c:	0040      	lsls	r0, r0, #1
 8000a5e:	bf28      	it	cs
 8000a60:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a64:	4770      	bx	lr
 8000a66:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a6a:	bf3c      	itt	cc
 8000a6c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a70:	4770      	bxcc	lr
 8000a72:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a76:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	4770      	bx	lr
 8000a80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a84:	bf16      	itet	ne
 8000a86:	4608      	movne	r0, r1
 8000a88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a8c:	4601      	movne	r1, r0
 8000a8e:	0242      	lsls	r2, r0, #9
 8000a90:	bf06      	itte	eq
 8000a92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a96:	ea90 0f01 	teqeq	r0, r1
 8000a9a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_ui2f>:
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	e004      	b.n	8000ab0 <__aeabi_i2f+0x8>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_i2f>:
 8000aa8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000aac:	bf48      	it	mi
 8000aae:	4240      	negmi	r0, r0
 8000ab0:	ea5f 0c00 	movs.w	ip, r0
 8000ab4:	bf08      	it	eq
 8000ab6:	4770      	bxeq	lr
 8000ab8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000abc:	4601      	mov	r1, r0
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	e01c      	b.n	8000afe <__aeabi_l2f+0x2a>

08000ac4 <__aeabi_ul2f>:
 8000ac4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac8:	bf08      	it	eq
 8000aca:	4770      	bxeq	lr
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e00a      	b.n	8000ae8 <__aeabi_l2f+0x14>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_l2f>:
 8000ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ae0:	d502      	bpl.n	8000ae8 <__aeabi_l2f+0x14>
 8000ae2:	4240      	negs	r0, r0
 8000ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae8:	ea5f 0c01 	movs.w	ip, r1
 8000aec:	bf02      	ittt	eq
 8000aee:	4684      	moveq	ip, r0
 8000af0:	4601      	moveq	r1, r0
 8000af2:	2000      	moveq	r0, #0
 8000af4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000af8:	bf08      	it	eq
 8000afa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b02:	fabc f28c 	clz	r2, ip
 8000b06:	3a08      	subs	r2, #8
 8000b08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b0c:	db10      	blt.n	8000b30 <__aeabi_l2f+0x5c>
 8000b0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b12:	4463      	add	r3, ip
 8000b14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b18:	f1c2 0220 	rsb	r2, r2, #32
 8000b1c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b20:	fa20 f202 	lsr.w	r2, r0, r2
 8000b24:	eb43 0002 	adc.w	r0, r3, r2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f102 0220 	add.w	r2, r2, #32
 8000b34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b38:	f1c2 0220 	rsb	r2, r2, #32
 8000b3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b40:	fa21 f202 	lsr.w	r2, r1, r2
 8000b44:	eb43 0002 	adc.w	r0, r3, r2
 8000b48:	bf08      	it	eq
 8000b4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_f2iz>:
 8000b50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b54:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b58:	d30f      	bcc.n	8000b7a <__aeabi_f2iz+0x2a>
 8000b5a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_f2iz+0x30>
 8000b64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b70:	fa23 f002 	lsr.w	r0, r3, r2
 8000b74:	bf18      	it	ne
 8000b76:	4240      	negne	r0, r0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr
 8000b80:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b84:	d101      	bne.n	8000b8a <__aeabi_f2iz+0x3a>
 8000b86:	0242      	lsls	r2, r0, #9
 8000b88:	d105      	bne.n	8000b96 <__aeabi_f2iz+0x46>
 8000b8a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b8e:	bf08      	it	eq
 8000b90:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_f2uiz>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	d20e      	bcs.n	8000bbe <__aeabi_f2uiz+0x22>
 8000ba0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ba4:	d30b      	bcc.n	8000bbe <__aeabi_f2uiz+0x22>
 8000ba6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000baa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bae:	d409      	bmi.n	8000bc4 <__aeabi_f2uiz+0x28>
 8000bb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbc:	4770      	bx	lr
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	4770      	bx	lr
 8000bc4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bc8:	d101      	bne.n	8000bce <__aeabi_f2uiz+0x32>
 8000bca:	0242      	lsls	r2, r0, #9
 8000bcc:	d102      	bne.n	8000bd4 <__aeabi_f2uiz+0x38>
 8000bce:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
 8000bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c00:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c02:	4a27      	ldr	r2, [pc, #156]	@ (8000ca0 <MX_ADC1_Init+0xc4>)
 8000c04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c06:	4b25      	ldr	r3, [pc, #148]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c0c:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c12:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c18:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c1a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c26:	4b1d      	ldr	r3, [pc, #116]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2c:	481b      	ldr	r0, [pc, #108]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c2e:	f000 fee7 	bl	8001a00 <HAL_ADC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8000c38:	f000 fc3c 	bl	80014b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000c44:	2303      	movs	r3, #3
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4813      	ldr	r0, [pc, #76]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c50:	f001 f880 	bl	8001d54 <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000c5a:	f000 fc2b 	bl	80014b4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 8000c5e:	2311      	movs	r3, #17
 8000c60:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000c6a:	2306      	movs	r3, #6
 8000c6c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000c6e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000c72:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_ADC1_Init+0xc0>)
 8000c86:	f001 fc5d 	bl	8002544 <HAL_ADCEx_InjectedConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000c90:	f000 fc10 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000084 	.word	0x20000084
 8000ca0:	40012400 	.word	0x40012400

08000ca4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <HAL_ADC_MspInit+0x7c>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d129      	bne.n	8000d18 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cc4:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <HAL_ADC_MspInit+0x80>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a16      	ldr	r2, [pc, #88]	@ (8000d24 <HAL_ADC_MspInit+0x80>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <HAL_ADC_MspInit+0x80>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_ADC_MspInit+0x80>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <HAL_ADC_MspInit+0x80>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_ADC_MspInit+0x80>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <HAL_ADC_MspInit+0x84>)
 8000d04:	f001 fec6 	bl	8002a94 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2012      	movs	r0, #18
 8000d0e:	f001 fe8a 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d12:	2012      	movs	r0, #18
 8000d14:	f001 fea3 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40012400 	.word	0x40012400
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010800 	.word	0x40010800

08000d2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d40:	4b47      	ldr	r3, [pc, #284]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a46      	ldr	r2, [pc, #280]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b44      	ldr	r3, [pc, #272]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d58:	4b41      	ldr	r3, [pc, #260]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a40      	ldr	r2, [pc, #256]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d5e:	f043 0320 	orr.w	r3, r3, #32
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b3e      	ldr	r3, [pc, #248]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0320 	and.w	r3, r3, #32
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b3b      	ldr	r3, [pc, #236]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a3a      	ldr	r2, [pc, #232]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b38      	ldr	r3, [pc, #224]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b35      	ldr	r3, [pc, #212]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a34      	ldr	r2, [pc, #208]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <MX_GPIO_Init+0x134>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED_Pin|CHARGING_STATE_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000da6:	482f      	ldr	r0, [pc, #188]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000da8:	f001 fff8 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000db2:	482d      	ldr	r0, [pc, #180]	@ (8000e68 <MX_GPIO_Init+0x13c>)
 8000db4:	f001 fff2 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000dbe:	482b      	ldr	r0, [pc, #172]	@ (8000e6c <MX_GPIO_Init+0x140>)
 8000dc0:	f001 ffec 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_LED_Pin CHARGING_STATE_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|CHARGING_STATE_Pin;
 8000dc4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4821      	ldr	r0, [pc, #132]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000dde:	f001 fe59 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_mode_Pin Button_add_Pin Button_sub_Pin */
  GPIO_InitStruct.Pin = Button_mode_Pin|Button_add_Pin|Button_sub_Pin;
 8000de2:	f640 4302 	movw	r3, #3074	@ 0xc02
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de8:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <MX_GPIO_Init+0x144>)
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	481d      	ldr	r0, [pc, #116]	@ (8000e6c <MX_GPIO_Init+0x140>)
 8000df8:	f001 fe4c 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 8000dfc:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4619      	mov	r1, r3
 8000e14:	4814      	ldr	r0, [pc, #80]	@ (8000e68 <MX_GPIO_Init+0x13c>)
 8000e16:	f001 fe3d 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000e1a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	480e      	ldr	r0, [pc, #56]	@ (8000e6c <MX_GPIO_Init+0x140>)
 8000e34:	f001 fe2e 	bl	8002a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2007      	movs	r0, #7
 8000e3e:	f001 fdf2 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e42:	2007      	movs	r0, #7
 8000e44:	f001 fe0b 	bl	8002a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2028      	movs	r0, #40	@ 0x28
 8000e4e:	f001 fdea 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e52:	2028      	movs	r0, #40	@ 0x28
 8000e54:	f001 fe03 	bl	8002a5e <HAL_NVIC_EnableIRQ>

}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	40010c00 	.word	0x40010c00
 8000e70:	10110000 	.word	0x10110000

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7a:	f000 fd3b 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7e:	f000 f883 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e82:	f7ff ff53 	bl	8000d2c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000e86:	f000 fc2b 	bl	80016e0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000e8a:	f000 fbdb 	bl	8001644 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e8e:	f7ff fea5 	bl	8000bdc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_ADCEx_Calibration_Start(&hadc1) !=HAL_OK)
 8000e92:	4835      	ldr	r0, [pc, #212]	@ (8000f68 <main+0xf4>)
 8000e94:	f001 f8f2 	bl	800207c <HAL_ADCEx_Calibration_Start>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d007      	beq.n	8000eae <main+0x3a>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea4:	4831      	ldr	r0, [pc, #196]	@ (8000f6c <main+0xf8>)
 8000ea6:	f001 ff79 	bl	8002d9c <HAL_GPIO_WritePin>
		Error_Handler();
 8000eaa:	f000 fb03 	bl	80014b4 <Error_Handler>
	}
	if(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK)
 8000eae:	4830      	ldr	r0, [pc, #192]	@ (8000f70 <main+0xfc>)
 8000eb0:	f002 fd5c 	bl	800396c <HAL_TIM_Base_Start_IT>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <main+0x56>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec0:	482a      	ldr	r0, [pc, #168]	@ (8000f6c <main+0xf8>)
 8000ec2:	f001 ff6b 	bl	8002d9c <HAL_GPIO_WritePin>
		Error_Handler();
 8000ec6:	f000 faf5 	bl	80014b4 <Error_Handler>
	}
	if(HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK)
 8000eca:	482a      	ldr	r0, [pc, #168]	@ (8000f74 <main+0x100>)
 8000ecc:	f002 fd4e 	bl	800396c <HAL_TIM_Base_Start_IT>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <main+0x72>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000edc:	4823      	ldr	r0, [pc, #140]	@ (8000f6c <main+0xf8>)
 8000ede:	f001 ff5d 	bl	8002d9c <HAL_GPIO_WritePin>
		Error_Handler();
 8000ee2:	f000 fae7 	bl	80014b4 <Error_Handler>
	}
	HAL_Delay(500);// wait for DC point
 8000ee6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eea:	f000 fd65 	bl	80019b8 <HAL_Delay>

	//Read internal reference for VDDA
	HAL_ADCEx_InjectedStart(&hadc1);
 8000eee:	481e      	ldr	r0, [pc, #120]	@ (8000f68 <main+0xf4>)
 8000ef0:	f001 f972 	bl	80021d8 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedPollForConversion(&hadc1, 500);
 8000ef4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ef8:	481b      	ldr	r0, [pc, #108]	@ (8000f68 <main+0xf4>)
 8000efa:	f001 f9f3 	bl	80022e4 <HAL_ADCEx_InjectedPollForConversion>
	uint16_t Vadc = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000efe:	2101      	movs	r1, #1
 8000f00:	4819      	ldr	r0, [pc, #100]	@ (8000f68 <main+0xf4>)
 8000f02:	f001 fae7 	bl	80024d4 <HAL_ADCEx_InjectedGetValue>
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	Vdda = Vadc/ADC_steps*Vrefint;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	0b1b      	lsrs	r3, r3, #12
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fc55 	bl	80007c0 <__aeabi_i2d>
 8000f16:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <main+0x104>)
 8000f1c:	f7ff f920 	bl	8000160 <__aeabi_dmul>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f7ff fcb4 	bl	8000894 <__aeabi_d2f>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a13      	ldr	r2, [pc, #76]	@ (8000f7c <main+0x108>)
 8000f30:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(updateScreenRequest)//only perfrom LCD switch states on gpio change
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <main+0x10c>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <main+0xcc>
		{
			updateScreen();
 8000f3c:	f000 f8a0 	bl	8001080 <updateScreen>
		}

		switch(STATE_MCU)
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <main+0x110>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	3b01      	subs	r3, #1
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d80b      	bhi.n	8000f64 <main+0xf0>
 8000f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f54 <main+0xe0>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f65 	.word	0x08000f65
 8000f58:	08000f65 	.word	0x08000f65
 8000f5c:	08000f65 	.word	0x08000f65
 8000f60:	08000f65 	.word	0x08000f65
			break;
		}
		default:
		{

			break;
 8000f64:	bf00      	nop
		if(updateScreenRequest)//only perfrom LCD switch states on gpio change
 8000f66:	e7e4      	b.n	8000f32 <main+0xbe>
 8000f68:	20000084 	.word	0x20000084
 8000f6c:	40011000 	.word	0x40011000
 8000f70:	200000e0 	.word	0x200000e0
 8000f74:	20000128 	.word	0x20000128
 8000f78:	3ff33333 	.word	0x3ff33333
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000004 	.word	0x20000004
 8000f84:	200000b4 	.word	0x200000b4

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	@ 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f92:	2228      	movs	r2, #40	@ 0x28
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fcb6 	bl	8004908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 ff16 	bl	8002dfc <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000fd6:	f000 fa6d 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 f983 	bl	8003300 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001000:	f000 fa58 	bl	80014b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001004:	2302      	movs	r3, #2
 8001006:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f002 faf0 	bl	80035f4 <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800101a:	f000 fa4b 	bl	80014b4 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	@ 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <DELAY_US>:

/* USER CODE BEGIN 4 */
void DELAY_US(uint16_t TIME_US)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	uint32_t old_timer_value = TIM3->CNT;
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <DELAY_US+0x54>)
 8001034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001036:	60fb      	str	r3, [r7, #12]
	uint32_t target_time = (old_timer_value + TIME_US) % (TIM3->ARR + 1);
 8001038:	88fa      	ldrh	r2, [r7, #6]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <DELAY_US+0x54>)
 8001040:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001042:	3201      	adds	r2, #1
 8001044:	fbb3 f1f2 	udiv	r1, r3, r2
 8001048:	fb01 f202 	mul.w	r2, r1, r2
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	60bb      	str	r3, [r7, #8]

	if (target_time < old_timer_value)  // Handle timer overflow
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d205      	bcs.n	8001064 <DELAY_US+0x3c>
	{
		while (TIM3->CNT >= old_timer_value);  // Wait for overflow
 8001058:	bf00      	nop
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <DELAY_US+0x54>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d9fa      	bls.n	800105a <DELAY_US+0x32>
	}

	while (TIM3->CNT < target_time);  // Wait until target time is reached
 8001064:	bf00      	nop
 8001066:	4b05      	ldr	r3, [pc, #20]	@ (800107c <DELAY_US+0x54>)
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8fa      	bhi.n	8001066 <DELAY_US+0x3e>
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40000400 	.word	0x40000400

08001080 <updateScreen>:
void updateScreen()
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
	updateScreenRequest = 0;
 8001086:	4b4d      	ldr	r3, [pc, #308]	@ (80011bc <updateScreen+0x13c>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
	switch(STATE_MCU)
 800108c:	4b4c      	ldr	r3, [pc, #304]	@ (80011c0 <updateScreen+0x140>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b04      	cmp	r3, #4
 8001094:	f200 808d 	bhi.w	80011b2 <updateScreen+0x132>
 8001098:	a201      	add	r2, pc, #4	@ (adr r2, 80010a0 <updateScreen+0x20>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010b5 	.word	0x080010b5
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	080011b3 	.word	0x080011b3
 80010ac:	080011b3 	.word	0x080011b3
 80010b0:	080011b3 	.word	0x080011b3
	{
	case  START:
	{
		LCD_Init();
 80010b4:	f003 fb5a 	bl	800476c <LCD_Init>

		sprintf(LCD_buffer,"Battery analyzer");
 80010b8:	4942      	ldr	r1, [pc, #264]	@ (80011c4 <updateScreen+0x144>)
 80010ba:	4843      	ldr	r0, [pc, #268]	@ (80011c8 <updateScreen+0x148>)
 80010bc:	f003 fbe8 	bl	8004890 <siprintf>
		formatCharToLCD(LCD_buffer,0,0,ALIGN_LEFT);
 80010c0:	2301      	movs	r3, #1
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	4840      	ldr	r0, [pc, #256]	@ (80011c8 <updateScreen+0x148>)
 80010c8:	f000 f892 	bl	80011f0 <formatCharToLCD>

		sprintf(LCD_buffer,"BatLinux");
 80010cc:	493f      	ldr	r1, [pc, #252]	@ (80011cc <updateScreen+0x14c>)
 80010ce:	483e      	ldr	r0, [pc, #248]	@ (80011c8 <updateScreen+0x148>)
 80010d0:	f003 fbde 	bl	8004890 <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 80010d4:	2303      	movs	r3, #3
 80010d6:	2201      	movs	r2, #1
 80010d8:	2100      	movs	r1, #0
 80010da:	483b      	ldr	r0, [pc, #236]	@ (80011c8 <updateScreen+0x148>)
 80010dc:	f000 f888 	bl	80011f0 <formatCharToLCD>

		HAL_Delay(1000);
 80010e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e4:	f000 fc68 	bl	80019b8 <HAL_Delay>
		STATE_MCU = SETUP;
 80010e8:	4b35      	ldr	r3, [pc, #212]	@ (80011c0 <updateScreen+0x140>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
		break;
 80010ee:	e061      	b.n	80011b4 <updateScreen+0x134>
	}
	case  SETUP:
	{
		switch(SETUP_CONFIGURATION)
 80010f0:	4b37      	ldr	r3, [pc, #220]	@ (80011d0 <updateScreen+0x150>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <updateScreen+0x80>
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d019      	beq.n	8001132 <updateScreen+0xb2>
 80010fe:	e054      	b.n	80011aa <updateScreen+0x12a>
		{
		case(SETUP_PARAM_DISCHARGE_CURRENT):
				{
			sprintf(LCD_buffer,"Current, mA");
 8001100:	4934      	ldr	r1, [pc, #208]	@ (80011d4 <updateScreen+0x154>)
 8001102:	4831      	ldr	r0, [pc, #196]	@ (80011c8 <updateScreen+0x148>)
 8001104:	f003 fbc4 	bl	8004890 <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001108:	2303      	movs	r3, #3
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	482e      	ldr	r0, [pc, #184]	@ (80011c8 <updateScreen+0x148>)
 8001110:	f000 f86e 	bl	80011f0 <formatCharToLCD>

			sprintf(LCD_buffer,"%d",Discharge_current);
 8001114:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <updateScreen+0x158>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	492f      	ldr	r1, [pc, #188]	@ (80011dc <updateScreen+0x15c>)
 800111e:	482a      	ldr	r0, [pc, #168]	@ (80011c8 <updateScreen+0x148>)
 8001120:	f003 fbb6 	bl	8004890 <siprintf>
			formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 8001124:	2303      	movs	r3, #3
 8001126:	2201      	movs	r2, #1
 8001128:	2100      	movs	r1, #0
 800112a:	4827      	ldr	r0, [pc, #156]	@ (80011c8 <updateScreen+0x148>)
 800112c:	f000 f860 	bl	80011f0 <formatCharToLCD>
			break;
 8001130:	e03e      	b.n	80011b0 <updateScreen+0x130>
				}
		case(SETUP_PARAM_CUTOFF_VOLTAGE):
				{
			sprintf(LCD_buffer,"Voltage, V");
 8001132:	492b      	ldr	r1, [pc, #172]	@ (80011e0 <updateScreen+0x160>)
 8001134:	4824      	ldr	r0, [pc, #144]	@ (80011c8 <updateScreen+0x148>)
 8001136:	f003 fbab 	bl	8004890 <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 800113a:	2303      	movs	r3, #3
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	4821      	ldr	r0, [pc, #132]	@ (80011c8 <updateScreen+0x148>)
 8001142:	f000 f855 	bl	80011f0 <formatCharToLCD>

			//no float support (+10 kB flash)
			uint8_t separator = 10*Cutoff_voltage-10*(int)Cutoff_voltage;
 8001146:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <updateScreen+0x164>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4927      	ldr	r1, [pc, #156]	@ (80011e8 <updateScreen+0x168>)
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f931 	bl	80003b4 <__aeabi_fmul>
 8001152:	4603      	mov	r3, r0
 8001154:	461c      	mov	r4, r3
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <updateScreen+0x164>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fcf8 	bl	8000b50 <__aeabi_f2iz>
 8001160:	4602      	mov	r2, r0
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fc9c 	bl	8000aa8 <__aeabi_i2f>
 8001170:	4603      	mov	r3, r0
 8001172:	4619      	mov	r1, r3
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff fbe1 	bl	800093c <__aeabi_fsub>
 800117a:	4603      	mov	r3, r0
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fd0d 	bl	8000b9c <__aeabi_f2uiz>
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
			sprintf(LCD_buffer,"%d.%d",(int)Cutoff_voltage,separator);
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <updateScreen+0x164>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fce0 	bl	8000b50 <__aeabi_f2iz>
 8001190:	4602      	mov	r2, r0
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4915      	ldr	r1, [pc, #84]	@ (80011ec <updateScreen+0x16c>)
 8001196:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <updateScreen+0x148>)
 8001198:	f003 fb7a 	bl	8004890 <siprintf>
			formatCharToLCD(LCD_buffer,1,1,ALIGN_CENTER);
 800119c:	2303      	movs	r3, #3
 800119e:	2201      	movs	r2, #1
 80011a0:	2101      	movs	r1, #1
 80011a2:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <updateScreen+0x148>)
 80011a4:	f000 f824 	bl	80011f0 <formatCharToLCD>
			break;
 80011a8:	e002      	b.n	80011b0 <updateScreen+0x130>
				}
		default:
			LCD_CLEAR();
 80011aa:	f003 fad7 	bl	800475c <LCD_CLEAR>
			break;
 80011ae:	bf00      	nop
		}
		break;
 80011b0:	e000      	b.n	80011b4 <updateScreen+0x134>
		break;
	}
	default:
	{

		break;
 80011b2:	bf00      	nop
	}
	}
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	20000004 	.word	0x20000004
 80011c0:	200000b4 	.word	0x200000b4
 80011c4:	08005208 	.word	0x08005208
 80011c8:	200000b8 	.word	0x200000b8
 80011cc:	0800521c 	.word	0x0800521c
 80011d0:	200000b5 	.word	0x200000b5
 80011d4:	08005228 	.word	0x08005228
 80011d8:	20000006 	.word	0x20000006
 80011dc:	08005234 	.word	0x08005234
 80011e0:	08005238 	.word	0x08005238
 80011e4:	20000008 	.word	0x20000008
 80011e8:	41200000 	.word	0x41200000
 80011ec:	08005244 	.word	0x08005244

080011f0 <formatCharToLCD>:
//Add padding for LCD display
//If padding is added, place is 0, level is dependant on LCD top(0) or bottom(1)
void formatCharToLCD(char* message, uint8_t place, uint8_t level, uint8_t Padding)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	4608      	mov	r0, r1
 80011fa:	4611      	mov	r1, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4603      	mov	r3, r0
 8001200:	70fb      	strb	r3, [r7, #3]
 8001202:	460b      	mov	r3, r1
 8001204:	70bb      	strb	r3, [r7, #2]
 8001206:	4613      	mov	r3, r2
 8001208:	707b      	strb	r3, [r7, #1]
	static uint8_t buffer_size;
	buffer_size = strlen(message);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7fe ffa0 	bl	8000150 <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b25      	ldr	r3, [pc, #148]	@ (80012ac <formatCharToLCD+0xbc>)
 8001216:	701a      	strb	r2, [r3, #0]
	if(buffer_size != 0 && buffer_size <= LCD_COLS)
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <formatCharToLCD+0xbc>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d041      	beq.n	80012a4 <formatCharToLCD+0xb4>
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <formatCharToLCD+0xbc>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b10      	cmp	r3, #16
 8001226:	d83d      	bhi.n	80012a4 <formatCharToLCD+0xb4>
	{
		if(Padding==ALIGN_NO)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <formatCharToLCD+0x4c>
		{
			LCD_SEND_STR(message,place, level);
 800122e:	78ba      	ldrb	r2, [r7, #2]
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	4619      	mov	r1, r3
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f003 faf1 	bl	800481c <LCD_SEND_STR>
 800123a:	e033      	b.n	80012a4 <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_LEFT)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10d      	bne.n	800125e <formatCharToLCD+0x6e>
		{
			charAddPadding(message, ALIGN_LEFT, buffer_size);
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <formatCharToLCD+0xbc>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	2101      	movs	r1, #1
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f830 	bl	80012b0 <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001250:	78bb      	ldrb	r3, [r7, #2]
 8001252:	461a      	mov	r2, r3
 8001254:	2100      	movs	r1, #0
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f003 fae0 	bl	800481c <LCD_SEND_STR>
 800125c:	e022      	b.n	80012a4 <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_RIGHT)
 800125e:	787b      	ldrb	r3, [r7, #1]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d10d      	bne.n	8001280 <formatCharToLCD+0x90>
		{
			charAddPadding(message, ALIGN_RIGHT, buffer_size);
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <formatCharToLCD+0xbc>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	2102      	movs	r1, #2
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f81f 	bl	80012b0 <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	461a      	mov	r2, r3
 8001276:	2100      	movs	r1, #0
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f003 facf 	bl	800481c <LCD_SEND_STR>
 800127e:	e011      	b.n	80012a4 <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_CENTER)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d10d      	bne.n	80012a2 <formatCharToLCD+0xb2>
		{
			charAddPadding(message, ALIGN_CENTER, buffer_size);
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <formatCharToLCD+0xbc>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	2103      	movs	r1, #3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f80e 	bl	80012b0 <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001294:	78bb      	ldrb	r3, [r7, #2]
 8001296:	461a      	mov	r2, r3
 8001298:	2100      	movs	r1, #0
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f003 fabe 	bl	800481c <LCD_SEND_STR>
 80012a0:	e000      	b.n	80012a4 <formatCharToLCD+0xb4>
		}
		else return;
 80012a2:	bf00      	nop
	}
}
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000d8 	.word	0x200000d8

080012b0 <charAddPadding>:

void charAddPadding(char* buffer, uint8_t align,uint8_t size)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
 80012bc:	4613      	mov	r3, r2
 80012be:	70bb      	strb	r3, [r7, #2]
	if(align == ALIGN_LEFT)
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10e      	bne.n	80012e4 <charAddPadding+0x34>
	{
		for(uint8_t i = size;i<LCD_COLS;i++)
 80012c6:	78bb      	ldrb	r3, [r7, #2]
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	e007      	b.n	80012dc <charAddPadding+0x2c>
		{
			buffer[i] = ' ';
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	2220      	movs	r2, #32
 80012d4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = size;i<LCD_COLS;i++)
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	3301      	adds	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	d9f4      	bls.n	80012cc <charAddPadding+0x1c>
 80012e2:	e054      	b.n	800138e <charAddPadding+0xde>
		}
	}
	else if(align == ALIGN_RIGHT)
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d11c      	bne.n	8001324 <charAddPadding+0x74>
	{
		memmove(buffer+(LCD_COLS-size),buffer,size);// shift to the right
 80012ea:	78bb      	ldrb	r3, [r7, #2]
 80012ec:	f1c3 0310 	rsb	r3, r3, #16
 80012f0:	461a      	mov	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	78ba      	ldrb	r2, [r7, #2]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 faea 	bl	80048d4 <memmove>
		for(uint8_t i = 0;i<LCD_COLS-size;i++)
 8001300:	2300      	movs	r3, #0
 8001302:	73bb      	strb	r3, [r7, #14]
 8001304:	e007      	b.n	8001316 <charAddPadding+0x66>
		{
			buffer[i] = ' ';
 8001306:	7bbb      	ldrb	r3, [r7, #14]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	2220      	movs	r2, #32
 800130e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i<LCD_COLS-size;i++)
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	3301      	adds	r3, #1
 8001314:	73bb      	strb	r3, [r7, #14]
 8001316:	7bba      	ldrb	r2, [r7, #14]
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	f1c3 0310 	rsb	r3, r3, #16
 800131e:	429a      	cmp	r2, r3
 8001320:	dbf1      	blt.n	8001306 <charAddPadding+0x56>
 8001322:	e034      	b.n	800138e <charAddPadding+0xde>
		}
	}
	else if(align == ALIGN_CENTER)
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d130      	bne.n	800138c <charAddPadding+0xdc>
	{
		uint8_t start_place = (LCD_COLS - size)/2;//left side
 800132a:	78bb      	ldrb	r3, [r7, #2]
 800132c:	f1c3 0310 	rsb	r3, r3, #16
 8001330:	0fda      	lsrs	r2, r3, #31
 8001332:	4413      	add	r3, r2
 8001334:	105b      	asrs	r3, r3, #1
 8001336:	72fb      	strb	r3, [r7, #11]
		memmove(buffer+start_place,buffer,size);// shift to the right
 8001338:	7afb      	ldrb	r3, [r7, #11]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	78ba      	ldrb	r2, [r7, #2]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fac6 	bl	80048d4 <memmove>
		for(uint8_t i = 0;i<start_place;i++)
 8001348:	2300      	movs	r3, #0
 800134a:	737b      	strb	r3, [r7, #13]
 800134c:	e007      	b.n	800135e <charAddPadding+0xae>
		{
			buffer[i] = ' ';
 800134e:	7b7b      	ldrb	r3, [r7, #13]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	2220      	movs	r2, #32
 8001356:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i<start_place;i++)
 8001358:	7b7b      	ldrb	r3, [r7, #13]
 800135a:	3301      	adds	r3, #1
 800135c:	737b      	strb	r3, [r7, #13]
 800135e:	7b7a      	ldrb	r2, [r7, #13]
 8001360:	7afb      	ldrb	r3, [r7, #11]
 8001362:	429a      	cmp	r2, r3
 8001364:	d3f3      	bcc.n	800134e <charAddPadding+0x9e>
		}
		start_place +=size;//right side
 8001366:	7afa      	ldrb	r2, [r7, #11]
 8001368:	78bb      	ldrb	r3, [r7, #2]
 800136a:	4413      	add	r3, r2
 800136c:	72fb      	strb	r3, [r7, #11]
		for(uint8_t i = start_place;i<LCD_COLS;i++)
 800136e:	7afb      	ldrb	r3, [r7, #11]
 8001370:	733b      	strb	r3, [r7, #12]
 8001372:	e007      	b.n	8001384 <charAddPadding+0xd4>
		{
			buffer[i] = ' ';
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	2220      	movs	r2, #32
 800137c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = start_place;i<LCD_COLS;i++)
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	3301      	adds	r3, #1
 8001382:	733b      	strb	r3, [r7, #12]
 8001384:	7b3b      	ldrb	r3, [r7, #12]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	d9f4      	bls.n	8001374 <charAddPadding+0xc4>
 800138a:	e000      	b.n	800138e <charAddPadding+0xde>
		}
	}
	else
	{
		return;
 800138c:	bf00      	nop
	}
}
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	0000      	movs	r0, r0
	...

08001398 <HAL_GPIO_EXTI_Callback>:

//INTERRUPT CALLBACKS

//EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
	//test what button is pressed
	if(STATE_MCU != SETUP)
 80013a2:	4b3f      	ldr	r3, [pc, #252]	@ (80014a0 <HAL_GPIO_EXTI_Callback+0x108>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d168      	bne.n	800147e <HAL_GPIO_EXTI_Callback+0xe6>
	{
		return;
	}
	updateScreenRequest = 1;
 80013ac:	4b3d      	ldr	r3, [pc, #244]	@ (80014a4 <HAL_GPIO_EXTI_Callback+0x10c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
	switch(GPIO_Pin)
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013b8:	d03b      	beq.n	8001432 <HAL_GPIO_EXTI_Callback+0x9a>
 80013ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013be:	dc60      	bgt.n	8001482 <HAL_GPIO_EXTI_Callback+0xea>
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_EXTI_Callback+0x34>
 80013c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_EXTI_Callback+0x4e>
		break;
		}
	default:
	{

		break;
 80013ca:	e05a      	b.n	8001482 <HAL_GPIO_EXTI_Callback+0xea>
		SETUP_CONFIGURATION = 	(SETUP_CONFIGURATION+1)%SETUP_PARAM_COUNT;
 80013cc:	4b36      	ldr	r3, [pc, #216]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x110>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	bfb8      	it	lt
 80013dc:	425b      	neglt	r3, r3
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x110>)
 80013e2:	701a      	strb	r2, [r3, #0]
		break;
 80013e4:	e052      	b.n	800148c <HAL_GPIO_EXTI_Callback+0xf4>
		if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 80013e6:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x110>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d113      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x80>
			Cutoff_voltage += 0.05;// 50 mV step
 80013f0:	4b2e      	ldr	r3, [pc, #184]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x114>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f9f5 	bl	80007e4 <__aeabi_f2d>
 80013fa:	a327      	add	r3, pc, #156	@ (adr r3, 8001498 <HAL_GPIO_EXTI_Callback+0x100>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f892 	bl	8000528 <__adddf3>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fa42 	bl	8000894 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	4a26      	ldr	r2, [pc, #152]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x114>)
 8001414:	6013      	str	r3, [r2, #0]
		break;
 8001416:	e036      	b.n	8001486 <HAL_GPIO_EXTI_Callback+0xee>
		else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x110>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d131      	bne.n	8001486 <HAL_GPIO_EXTI_Callback+0xee>
			Discharge_current+=10;// 10 mA step
 8001422:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <HAL_GPIO_EXTI_Callback+0x118>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	330a      	adds	r3, #10
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <HAL_GPIO_EXTI_Callback+0x118>)
 800142e:	801a      	strh	r2, [r3, #0]
		break;
 8001430:	e029      	b.n	8001486 <HAL_GPIO_EXTI_Callback+0xee>
		if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x110>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d113      	bne.n	8001464 <HAL_GPIO_EXTI_Callback+0xcc>
			Cutoff_voltage -= 0.05;// 50 mV step
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x114>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f9cf 	bl	80007e4 <__aeabi_f2d>
 8001446:	a314      	add	r3, pc, #80	@ (adr r3, 8001498 <HAL_GPIO_EXTI_Callback+0x100>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f86a 	bl	8000524 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fa1c 	bl	8000894 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x114>)
 8001460:	6013      	str	r3, [r2, #0]
		break;
 8001462:	e012      	b.n	800148a <HAL_GPIO_EXTI_Callback+0xf2>
		else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x110>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10d      	bne.n	800148a <HAL_GPIO_EXTI_Callback+0xf2>
			Discharge_current-=10;// 10 mA step
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_GPIO_EXTI_Callback+0x118>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	3b0a      	subs	r3, #10
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_GPIO_EXTI_Callback+0x118>)
 800147a:	801a      	strh	r2, [r3, #0]
		break;
 800147c:	e005      	b.n	800148a <HAL_GPIO_EXTI_Callback+0xf2>
		return;
 800147e:	bf00      	nop
 8001480:	e004      	b.n	800148c <HAL_GPIO_EXTI_Callback+0xf4>
		break;
 8001482:	bf00      	nop
 8001484:	e002      	b.n	800148c <HAL_GPIO_EXTI_Callback+0xf4>
		break;
 8001486:	bf00      	nop
 8001488:	e000      	b.n	800148c <HAL_GPIO_EXTI_Callback+0xf4>
		break;
 800148a:	bf00      	nop
	}
	}
}
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	9999999a 	.word	0x9999999a
 800149c:	3fa99999 	.word	0x3fa99999
 80014a0:	200000b4 	.word	0x200000b4
 80014a4:	20000004 	.word	0x20000004
 80014a8:	200000b5 	.word	0x200000b5
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000006 	.word	0x20000006

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_MspInit+0x5c>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a14      	ldr	r2, [pc, #80]	@ (800151c <HAL_MspInit+0x5c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_MspInit+0x5c>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <HAL_MspInit+0x5c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <HAL_MspInit+0x5c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <HAL_MspInit+0x5c>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_MspInit+0x60>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_MspInit+0x60>)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <NMI_Handler+0x4>

0800152c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <UsageFault_Handler+0x4>

0800154c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 fa04 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_mode_Pin);
 8001580:	2002      	movs	r0, #2
 8001582:	f001 fc23 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <ADC1_2_IRQHandler+0x10>)
 8001592:	f000 fb0d 	bl	8001bb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000084 	.word	0x20000084

080015a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <TIM4_IRQHandler+0x10>)
 80015a6:	f002 fa8b 	bl	8003ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000128 	.word	0x20000128

080015b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_add_Pin);
 80015b8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80015bc:	f001 fc06 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_sub_Pin);
 80015c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80015c4:	f001 fc02 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	@ (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f003 f98c 	bl	8004918 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20005000 	.word	0x20005000
 800162c:	00000200 	.word	0x00000200
 8001630:	200000dc 	.word	0x200000dc
 8001634:	200002c0 	.word	0x200002c0

08001638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001660:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <MX_TIM3_Init+0x94>)
 8001662:	4a1e      	ldr	r2, [pc, #120]	@ (80016dc <MX_TIM3_Init+0x98>)
 8001664:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <MX_TIM3_Init+0x94>)
 8001668:	2207      	movs	r2, #7
 800166a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <MX_TIM3_Init+0x94>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <MX_TIM3_Init+0x94>)
 8001674:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001678:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <MX_TIM3_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_TIM3_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001686:	4814      	ldr	r0, [pc, #80]	@ (80016d8 <MX_TIM3_Init+0x94>)
 8001688:	f002 f920 	bl	80038cc <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001692:	f7ff ff0f 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <MX_TIM3_Init+0x94>)
 80016a4:	f002 fbbe 	bl	8003e24 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80016ae:	f7ff ff01 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016b2:	2320      	movs	r3, #32
 80016b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	@ (80016d8 <MX_TIM3_Init+0x94>)
 80016c0:	f002 ff30 	bl	8004524 <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016ca:	f7ff fef3 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000e0 	.word	0x200000e0
 80016dc:	40000400 	.word	0x40000400

080016e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	@ 0x38
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001710:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 8001712:	4a2d      	ldr	r2, [pc, #180]	@ (80017c8 <MX_TIM4_Init+0xe8>)
 8001714:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001716:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8001722:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 8001724:	22c7      	movs	r2, #199	@ 0xc7
 8001726:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001734:	4823      	ldr	r0, [pc, #140]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 8001736:	f002 f8c9 	bl	80038cc <HAL_TIM_Base_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001740:	f7ff feb8 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800174a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800174e:	4619      	mov	r1, r3
 8001750:	481c      	ldr	r0, [pc, #112]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 8001752:	f002 fb67 	bl	8003e24 <HAL_TIM_ConfigClockSource>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800175c:	f7ff feaa 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001760:	4818      	ldr	r0, [pc, #96]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 8001762:	f002 f955 	bl	8003a10 <HAL_TIM_PWM_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800176c:	f7ff fea2 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	4619      	mov	r1, r3
 800177e:	4811      	ldr	r0, [pc, #68]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 8001780:	f002 fed0 	bl	8004524 <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800178a:	f7ff fe93 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178e:	2360      	movs	r3, #96	@ 0x60
 8001790:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	220c      	movs	r2, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 80017a6:	f002 fa7b 	bl	8003ca0 <HAL_TIM_PWM_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80017b0:	f7ff fe80 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017b4:	4803      	ldr	r0, [pc, #12]	@ (80017c4 <MX_TIM4_Init+0xe4>)
 80017b6:	f000 f843 	bl	8001840 <HAL_TIM_MspPostInit>

}
 80017ba:	bf00      	nop
 80017bc:	3738      	adds	r7, #56	@ 0x38
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000128 	.word	0x20000128
 80017c8:	40000800 	.word	0x40000800

080017cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a16      	ldr	r2, [pc, #88]	@ (8001834 <HAL_TIM_Base_MspInit+0x68>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d10c      	bne.n	80017f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_TIM_Base_MspInit+0x6c>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a15      	ldr	r2, [pc, #84]	@ (8001838 <HAL_TIM_Base_MspInit+0x6c>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_TIM_Base_MspInit+0x6c>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80017f6:	e018      	b.n	800182a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0f      	ldr	r2, [pc, #60]	@ (800183c <HAL_TIM_Base_MspInit+0x70>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d113      	bne.n	800182a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001802:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <HAL_TIM_Base_MspInit+0x6c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a0c      	ldr	r2, [pc, #48]	@ (8001838 <HAL_TIM_Base_MspInit+0x6c>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <HAL_TIM_Base_MspInit+0x6c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	201e      	movs	r0, #30
 8001820:	f001 f901 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001824:	201e      	movs	r0, #30
 8001826:	f001 f91a 	bl	8002a5e <HAL_NVIC_EnableIRQ>
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40000400 	.word	0x40000400
 8001838:	40021000 	.word	0x40021000
 800183c:	40000800 	.word	0x40000800

08001840 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a10      	ldr	r2, [pc, #64]	@ (800189c <HAL_TIM_MspPostInit+0x5c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d118      	bne.n	8001892 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <HAL_TIM_MspPostInit+0x60>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <HAL_TIM_MspPostInit+0x60>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <HAL_TIM_MspPostInit+0x60>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_MOSFET_Pin;
 8001878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800187c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2302      	movs	r3, #2
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_MOSFET_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <HAL_TIM_MspPostInit+0x64>)
 800188e:	f001 f901 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3720      	adds	r7, #32
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40000800 	.word	0x40000800
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010c00 	.word	0x40010c00

080018a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a8:	f7ff fec6 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480b      	ldr	r0, [pc, #44]	@ (80018dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ae:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018b0:	4a0c      	ldr	r2, [pc, #48]	@ (80018e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018c4:	4c09      	ldr	r4, [pc, #36]	@ (80018ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f003 f827 	bl	8004924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d6:	f7ff facd 	bl	8000e74 <main>
  bx lr
 80018da:	4770      	bx	lr
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018e4:	080052d0 	.word	0x080052d0
  ldr r2, =_sbss
 80018e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018ec:	200002c0 	.word	0x200002c0

080018f0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <CAN1_RX1_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <HAL_Init+0x28>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a07      	ldr	r2, [pc, #28]	@ (800191c <HAL_Init+0x28>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f001 f883 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190a:	200f      	movs	r0, #15
 800190c:	f000 f808 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001910:	f7ff fdd6 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40022000 	.word	0x40022000

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f001 f89b 	bl	8002a7a <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f001 f863 	bl	8002a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	@ (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000000c 	.word	0x2000000c
 8001978:	20000014 	.word	0x20000014
 800197c:	20000010 	.word	0x20000010

08001980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_IncTick+0x1c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_IncTick+0x20>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a03      	ldr	r2, [pc, #12]	@ (80019a0 <HAL_IncTick+0x20>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	20000014 	.word	0x20000014
 80019a0:	20000170 	.word	0x20000170

080019a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b02      	ldr	r3, [pc, #8]	@ (80019b4 <HAL_GetTick+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	20000170 	.word	0x20000170

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff fff0 	bl	80019a4 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffe0 	bl	80019a4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000014 	.word	0x20000014

08001a00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0be      	b.n	8001ba0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff f930 	bl	8000ca4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fad7 	bl	8001ff8 <ADC_ConversionStop_Disable>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 8099 	bne.w	8001b8e <HAL_ADC_Init+0x18e>
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 8095 	bne.w	8001b8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a6c:	f023 0302 	bic.w	r3, r3, #2
 8001a70:	f043 0202 	orr.w	r2, r3, #2
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7b1b      	ldrb	r3, [r3, #12]
 8001a86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a98:	d003      	beq.n	8001aa2 <HAL_ADC_Init+0xa2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <HAL_ADC_Init+0xa8>
 8001aa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa6:	e000      	b.n	8001aaa <HAL_ADC_Init+0xaa>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7d1b      	ldrb	r3, [r3, #20]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d119      	bne.n	8001aec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7b1b      	ldrb	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d109      	bne.n	8001ad4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	035a      	lsls	r2, r3, #13
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e00b      	b.n	8001aec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad8:	f043 0220 	orr.w	r2, r3, #32
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae4:	f043 0201 	orr.w	r2, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_ADC_Init+0x1a8>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b1c:	d003      	beq.n	8001b26 <HAL_ADC_Init+0x126>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d104      	bne.n	8001b30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	051b      	lsls	r3, r3, #20
 8001b2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b36:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_ADC_Init+0x1ac>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d10b      	bne.n	8001b6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b6a:	e018      	b.n	8001b9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b70:	f023 0312 	bic.w	r3, r3, #18
 8001b74:	f043 0210 	orr.w	r2, r3, #16
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b8c:	e007      	b.n	8001b9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b92:	f043 0210 	orr.w	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	ffe1f7fd 	.word	0xffe1f7fd
 8001bac:	ff1f0efe 	.word	0xff1f0efe

08001bb0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d03e      	beq.n	8001c50 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d039      	beq.n	8001c50 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bfe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c02:	d11d      	bne.n	8001c40 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d119      	bne.n	8001c40 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0220 	bic.w	r2, r2, #32
 8001c1a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f874 	bl	8001d2e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f06f 0212 	mvn.w	r2, #18
 8001c4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d04d      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d048      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c74:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001c86:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001c8a:	d012      	beq.n	8001cb2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d125      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ca4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ca8:	d11d      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d119      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fc22 	bl	8002530 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 020c 	mvn.w	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d012      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00d      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f812 	bl	8001d40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0201 	mvn.w	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x20>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e0dc      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1da>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b06      	cmp	r3, #6
 8001d82:	d81c      	bhi.n	8001dbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b05      	subs	r3, #5
 8001d96:	221f      	movs	r2, #31
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4019      	ands	r1, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3b05      	subs	r3, #5
 8001db0:	fa00 f203 	lsl.w	r2, r0, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dbc:	e03c      	b.n	8001e38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d81c      	bhi.n	8001e00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b23      	subs	r3, #35	@ 0x23
 8001dd8:	221f      	movs	r2, #31
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	4019      	ands	r1, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b23      	subs	r3, #35	@ 0x23
 8001df2:	fa00 f203 	lsl.w	r2, r0, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dfe:	e01b      	b.n	8001e38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b41      	subs	r3, #65	@ 0x41
 8001e12:	221f      	movs	r2, #31
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4019      	ands	r1, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b41      	subs	r3, #65	@ 0x41
 8001e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d91c      	bls.n	8001e7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	3b1e      	subs	r3, #30
 8001e52:	2207      	movs	r2, #7
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4019      	ands	r1, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6898      	ldr	r0, [r3, #8]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b1e      	subs	r3, #30
 8001e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	e019      	b.n	8001eae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6919      	ldr	r1, [r3, #16]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4019      	ands	r1, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6898      	ldr	r0, [r3, #8]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d003      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eba:	2b11      	cmp	r3, #17
 8001ebc:	d132      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f38 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d125      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d126      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ee4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d11a      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <HAL_ADC_ConfigChannel+0x1e8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a13      	ldr	r2, [pc, #76]	@ (8001f40 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	0c9a      	lsrs	r2, r3, #18
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f04:	e002      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x1b2>
 8001f12:	e007      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40012400 	.word	0x40012400
 8001f3c:	2000000c 	.word	0x2000000c
 8001f40:	431bde83 	.word	0x431bde83

08001f44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d040      	beq.n	8001fe4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <ADC_Enable+0xac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff4 <ADC_Enable+0xb0>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	0c9b      	lsrs	r3, r3, #18
 8001f7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f80:	e002      	b.n	8001f88 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f8e:	f7ff fd09 	bl	80019a4 <HAL_GetTick>
 8001f92:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f94:	e01f      	b.n	8001fd6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f96:	f7ff fd05 	bl	80019a4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d918      	bls.n	8001fd6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d011      	beq.n	8001fd6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e007      	b.n	8001fe6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d1d8      	bne.n	8001f96 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000000c 	.word	0x2000000c
 8001ff4:	431bde83 	.word	0x431bde83

08001ff8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d12e      	bne.n	8002070 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002022:	f7ff fcbf 	bl	80019a4 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002028:	e01b      	b.n	8002062 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800202a:	f7ff fcbb 	bl	80019a4 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d914      	bls.n	8002062 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d10d      	bne.n	8002062 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204a:	f043 0210 	orr.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e007      	b.n	8002072 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d0dc      	beq.n	800202a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADCEx_Calibration_Start+0x1e>
 8002096:	2302      	movs	r3, #2
 8002098:	e097      	b.n	80021ca <HAL_ADCEx_Calibration_Start+0x14e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffa8 	bl	8001ff8 <ADC_ConversionStop_Disable>
 80020a8:	4603      	mov	r3, r0
 80020aa:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff49 	bl	8001f44 <ADC_Enable>
 80020b2:	4603      	mov	r3, r0
 80020b4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 8081 	bne.w	80021c0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020c6:	f023 0302 	bic.w	r3, r3, #2
 80020ca:	f043 0202 	orr.w	r2, r3, #2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020d2:	4b40      	ldr	r3, [pc, #256]	@ (80021d4 <HAL_ADCEx_Calibration_Start+0x158>)
 80020d4:	681c      	ldr	r4, [r3, #0]
 80020d6:	2002      	movs	r0, #2
 80020d8:	f001 fb42 	bl	8003760 <HAL_RCCEx_GetPeriphCLKFreq>
 80020dc:	4603      	mov	r3, r0
 80020de:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80020e2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80020e4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80020e6:	e002      	b.n	80020ee <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f9      	bne.n	80020e8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0208 	orr.w	r2, r2, #8
 8002102:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002104:	f7ff fc4e 	bl	80019a4 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800210a:	e01b      	b.n	8002144 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800210c:	f7ff fc4a 	bl	80019a4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b0a      	cmp	r3, #10
 8002118:	d914      	bls.n	8002144 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212c:	f023 0312 	bic.w	r3, r3, #18
 8002130:	f043 0210 	orr.w	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e042      	b.n	80021ca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1dc      	bne.n	800210c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0204 	orr.w	r2, r2, #4
 8002160:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002162:	f7ff fc1f 	bl	80019a4 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002168:	e01b      	b.n	80021a2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800216a:	f7ff fc1b 	bl	80019a4 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b0a      	cmp	r3, #10
 8002176:	d914      	bls.n	80021a2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00d      	beq.n	80021a2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	f023 0312 	bic.w	r3, r3, #18
 800218e:	f043 0210 	orr.w	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e013      	b.n	80021ca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1dc      	bne.n	800216a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	f023 0303 	bic.w	r3, r3, #3
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000000c 	.word	0x2000000c

080021d8 <HAL_ADCEx_InjectedStart>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ADCEx_InjectedStart+0x1a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e070      	b.n	80022d4 <HAL_ADCEx_InjectedStart+0xfc>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fea2 	bl	8001f44 <ADC_Enable>
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d15f      	bne.n	80022ca <HAL_ADCEx_InjectedStart+0xf2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2e      	ldr	r2, [pc, #184]	@ (80022dc <HAL_ADCEx_InjectedStart+0x104>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d105      	bne.n	8002234 <HAL_ADCEx_InjectedStart+0x5c>
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_ADCEx_InjectedStart+0x108>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <HAL_ADCEx_InjectedStart+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002240:	e005      	b.n	800224e <HAL_ADCEx_InjectedStart+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002246:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_ADCEx_InjectedStart+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0204 	mvn.w	r2, #4
 8002270:	601a      	str	r2, [r3, #0]
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
    /* slave, ADC is enabled only (conversion is not started). If ADC is      */
    /* master, ADC is enabled and conversion is started.                      */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d128      	bne.n	80022d2 <HAL_ADCEx_InjectedStart+0xfa>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800228a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800228e:	d113      	bne.n	80022b8 <HAL_ADCEx_InjectedStart+0xe0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002294:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_ADCEx_InjectedStart+0x104>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d105      	bne.n	80022a6 <HAL_ADCEx_InjectedStart+0xce>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800229a:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_ADCEx_InjectedStart+0x108>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <HAL_ADCEx_InjectedStart+0xe0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 1202 	orr.w	r2, r2, #2129920	@ 0x208000
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	e00c      	b.n	80022d2 <HAL_ADCEx_InjectedStart+0xfa>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	e003      	b.n	80022d2 <HAL_ADCEx_InjectedStart+0xfa>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40012800 	.word	0x40012800
 80022e0:	40012400 	.word	0x40012400

080022e4 <HAL_ADCEx_InjectedPollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Get timeout */
  tickstart = HAL_GetTick();  
 80022f6:	f7ff fb55 	bl	80019a4 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag JEOC is not set after each conversion, no timeout status can  */
  /*    be set.                                                               */
  if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002302:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d12a      	bne.n	8002360 <HAL_ADCEx_InjectedPollForConversion+0x7c>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 800230a:	e021      	b.n	8002350 <HAL_ADCEx_InjectedPollForConversion+0x6c>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d01d      	beq.n	8002350 <HAL_ADCEx_InjectedPollForConversion+0x6c>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_ADCEx_InjectedPollForConversion+0x46>
 800231a:	f7ff fb43 	bl	80019a4 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d212      	bcs.n	8002350 <HAL_ADCEx_InjectedPollForConversion+0x6c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_ADCEx_InjectedPollForConversion+0x6c>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	f043 0204 	orr.w	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0b1      	b.n	80024b4 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0d6      	beq.n	800230c <HAL_ADCEx_InjectedPollForConversion+0x28>
 800235e:	e070      	b.n	8002442 <HAL_ADCEx_InjectedPollForConversion+0x15e>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002360:	4b56      	ldr	r3, [pc, #344]	@ (80024bc <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 8002362:	681c      	ldr	r4, [r3, #0]
 8002364:	2002      	movs	r0, #2
 8002366:	f001 f9fb 	bl	8003760 <HAL_RCCEx_GetPeriphCLKFreq>
 800236a:	4603      	mov	r3, r0
 800236c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6919      	ldr	r1, [r3, #16]
 8002376:	4b52      	ldr	r3, [pc, #328]	@ (80024c0 <HAL_ADCEx_InjectedPollForConversion+0x1dc>)
 8002378:	400b      	ands	r3, r1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68d9      	ldr	r1, [r3, #12]
 8002384:	4b4f      	ldr	r3, [pc, #316]	@ (80024c4 <HAL_ADCEx_InjectedPollForConversion+0x1e0>)
 8002386:	400b      	ands	r3, r1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d111      	bne.n	80023b0 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6919      	ldr	r1, [r3, #16]
 8002392:	4b4d      	ldr	r3, [pc, #308]	@ (80024c8 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 8002394:	400b      	ands	r3, r1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d108      	bne.n	80023ac <HAL_ADCEx_InjectedPollForConversion+0xc8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68d9      	ldr	r1, [r3, #12]
 80023a0:	4b4a      	ldr	r3, [pc, #296]	@ (80024cc <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 80023a2:	400b      	ands	r3, r1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADCEx_InjectedPollForConversion+0xc8>
 80023a8:	2314      	movs	r3, #20
 80023aa:	e020      	b.n	80023ee <HAL_ADCEx_InjectedPollForConversion+0x10a>
 80023ac:	2329      	movs	r3, #41	@ 0x29
 80023ae:	e01e      	b.n	80023ee <HAL_ADCEx_InjectedPollForConversion+0x10a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6919      	ldr	r1, [r3, #16]
 80023b6:	4b44      	ldr	r3, [pc, #272]	@ (80024c8 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 80023b8:	400b      	ands	r3, r1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_ADCEx_InjectedPollForConversion+0xe8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68d9      	ldr	r1, [r3, #12]
 80023c4:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 80023c6:	400b      	ands	r3, r1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00d      	beq.n	80023e8 <HAL_ADCEx_InjectedPollForConversion+0x104>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6919      	ldr	r1, [r3, #16]
 80023d2:	4b3f      	ldr	r3, [pc, #252]	@ (80024d0 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 80023d4:	400b      	ands	r3, r1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_ADCEx_InjectedPollForConversion+0x108>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68d9      	ldr	r1, [r3, #12]
 80023e0:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 80023e2:	400b      	ands	r3, r1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADCEx_InjectedPollForConversion+0x108>
 80023e8:	2354      	movs	r3, #84	@ 0x54
 80023ea:	e000      	b.n	80023ee <HAL_ADCEx_InjectedPollForConversion+0x10a>
 80023ec:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023f4:	e021      	b.n	800243a <HAL_ADCEx_InjectedPollForConversion+0x156>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d01a      	beq.n	8002434 <HAL_ADCEx_InjectedPollForConversion+0x150>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_ADCEx_InjectedPollForConversion+0x130>
 8002404:	f7ff face 	bl	80019a4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d20f      	bcs.n	8002434 <HAL_ADCEx_InjectedPollForConversion+0x150>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	d90b      	bls.n	8002434 <HAL_ADCEx_InjectedPollForConversion+0x150>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	f043 0204 	orr.w	r2, r3, #4
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e03f      	b.n	80024b4 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3301      	adds	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	429a      	cmp	r2, r3
 8002440:	d8d9      	bhi.n	80023f6 <HAL_ADCEx_InjectedPollForConversion+0x112>
  }

  /* Clear injected group conversion flag */
  /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
  /* simultaneously.                                                          */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f06f 020e 	mvn.w	r2, #14
 800244a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002462:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002466:	d012      	beq.n	800248e <HAL_ADCEx_InjectedPollForConversion+0x1aa>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11d      	bne.n	80024b2 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002480:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002484:	d115      	bne.n	80024b2 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
      (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7b1b      	ldrb	r3, [r3, #12]
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800248a:	2b00      	cmp	r3, #0
 800248c:	d111      	bne.n	80024b2 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	629a      	str	r2, [r3, #40]	@ 0x28
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d105      	bne.n	80024b2 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	24924924 	.word	0x24924924
 80024c4:	00924924 	.word	0x00924924
 80024c8:	12492492 	.word	0x12492492
 80024cc:	00492492 	.word	0x00492492
 80024d0:	00249249 	.word	0x00249249

080024d4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d009      	beq.n	80024fc <HAL_ADCEx_InjectedGetValue+0x28>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d815      	bhi.n	800251a <HAL_ADCEx_InjectedGetValue+0x46>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d00d      	beq.n	8002510 <HAL_ADCEx_InjectedGetValue+0x3c>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d005      	beq.n	8002506 <HAL_ADCEx_InjectedGetValue+0x32>
 80024fa:	e00e      	b.n	800251a <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002502:	60fb      	str	r3, [r7, #12]
      break;
 8002504:	e00e      	b.n	8002524 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250c:	60fb      	str	r3, [r7, #12]
      break;
 800250e:	e009      	b.n	8002524 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	60fb      	str	r3, [r7, #12]
      break;
 8002518:	e004      	b.n	8002524 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	60fb      	str	r3, [r7, #12]
      break;
 8002522:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8002524:	68fb      	ldr	r3, [r7, #12]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
	...

08002544 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002544:	b490      	push	{r4, r7}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8002560:	2302      	movs	r3, #2
 8002562:	e17d      	b.n	8002860 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d119      	bne.n	80025a8 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10c      	bne.n	8002596 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002582:	0d9b      	lsrs	r3, r3, #22
 8002584:	059b      	lsls	r3, r3, #22
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	03d1      	lsls	r1, r2, #15
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	6393      	str	r3, [r2, #56]	@ 0x38
 8002594:	e04f      	b.n	8002636 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e046      	b.n	8002636 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d82a      	bhi.n	800260a <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	1ad2      	subs	r2, r2, r3
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	330f      	adds	r3, #15
 80025cc:	221f      	movs	r2, #31
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80025d6:	43db      	mvns	r3, r3
 80025d8:	4019      	ands	r1, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	3b01      	subs	r3, #1
 80025e0:	0518      	lsls	r0, r3, #20
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681c      	ldr	r4, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	330f      	adds	r3, #15
 80025f8:	fa04 f303 	lsl.w	r3, r4, r3
 80025fc:	ea40 0203 	orr.w	r2, r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	639a      	str	r2, [r3, #56]	@ 0x38
 8002608:	e015      	b.n	8002636 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	1ad2      	subs	r2, r2, r3
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	330f      	adds	r3, #15
 8002622:	221f      	movs	r2, #31
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800262c:	43da      	mvns	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	400a      	ands	r2, r1
 8002634:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d00c      	beq.n	800265e <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	6991      	ldr	r1, [r2, #24]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	430b      	orrs	r3, r1
 800265c:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	7d5b      	ldrb	r3, [r3, #21]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d115      	bne.n	8002692 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800266e:	d108      	bne.n	8002682 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	e007      	b.n	8002692 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	7d1b      	ldrb	r3, [r3, #20]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d114      	bne.n	80026c4 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	7d5b      	ldrb	r3, [r3, #21]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	e007      	b.n	80026c4 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b09      	cmp	r3, #9
 80026ca:	d91c      	bls.n	8002706 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68d9      	ldr	r1, [r3, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	3b1e      	subs	r3, #30
 80026de:	2207      	movs	r2, #7
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4019      	ands	r1, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6898      	ldr	r0, [r3, #8]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	3b1e      	subs	r3, #30
 80026f8:	fa00 f203 	lsl.w	r2, r0, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	e019      	b.n	800273a <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6919      	ldr	r1, [r3, #16]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	2207      	movs	r2, #7
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	4019      	ands	r1, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6898      	ldr	r0, [r3, #8]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	fa00 f203 	lsl.w	r2, r0, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d003      	beq.n	800274a <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002746:	2b11      	cmp	r3, #17
 8002748:	d107      	bne.n	800275a <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002758:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d022      	beq.n	80027a8 <HAL_ADCEx_InjectedConfigChannel+0x264>
 8002762:	2b03      	cmp	r3, #3
 8002764:	d82e      	bhi.n	80027c4 <HAL_ADCEx_InjectedConfigChannel+0x280>
 8002766:	2b01      	cmp	r3, #1
 8002768:	d002      	beq.n	8002770 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 800276a:	2b02      	cmp	r3, #2
 800276c:	d00e      	beq.n	800278c <HAL_ADCEx_InjectedConfigChannel+0x248>
 800276e:	e029      	b.n	80027c4 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800277a:	f023 030f 	bic.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	68d1      	ldr	r1, [r2, #12]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	430b      	orrs	r3, r1
 8002788:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800278a:	e029      	b.n	80027e0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002796:	f023 030f 	bic.w	r3, r3, #15
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	68d1      	ldr	r1, [r2, #12]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 80027a6:	e01b      	b.n	80027e0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80027b2:	f023 030f 	bic.w	r3, r3, #15
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	68d1      	ldr	r1, [r2, #12]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	430b      	orrs	r3, r1
 80027c0:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 80027c2:	e00d      	b.n	80027e0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80027ce:	f023 030f 	bic.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	68d1      	ldr	r1, [r2, #12]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	430b      	orrs	r3, r1
 80027dc:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80027de:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d003      	beq.n	80027f0 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80027ec:	2b11      	cmp	r3, #17
 80027ee:	d132      	bne.n	8002856 <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d125      	bne.n	8002846 <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d126      	bne.n	8002856 <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002816:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b10      	cmp	r3, #16
 800281e:	d11a      	bne.n	8002856 <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a13      	ldr	r2, [pc, #76]	@ (8002874 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0c9a      	lsrs	r2, r3, #18
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002836:	e002      	b.n	800283e <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3b01      	subs	r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f9      	bne.n	8002838 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 8002844:	e007      	b.n	8002856 <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bc90      	pop	{r4, r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40012400 	.word	0x40012400
 8002870:	2000000c 	.word	0x2000000c
 8002874:	431bde83 	.word	0x431bde83

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4906      	ldr	r1, [pc, #24]	@ (8002910 <__NVIC_EnableIRQ+0x34>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	e000e100 	.word	0xe000e100

08002914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0a      	blt.n	800293e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	490c      	ldr	r1, [pc, #48]	@ (8002960 <__NVIC_SetPriority+0x4c>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	440b      	add	r3, r1
 8002938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800293c:	e00a      	b.n	8002954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4908      	ldr	r1, [pc, #32]	@ (8002964 <__NVIC_SetPriority+0x50>)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3b04      	subs	r3, #4
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	440b      	add	r3, r1
 8002952:	761a      	strb	r2, [r3, #24]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	@ 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f1c3 0307 	rsb	r3, r3, #7
 8002982:	2b04      	cmp	r3, #4
 8002984:	bf28      	it	cs
 8002986:	2304      	movcs	r3, #4
 8002988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	2b06      	cmp	r3, #6
 8002990:	d902      	bls.n	8002998 <NVIC_EncodePriority+0x30>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3b03      	subs	r3, #3
 8002996:	e000      	b.n	800299a <NVIC_EncodePriority+0x32>
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	f04f 32ff 	mov.w	r2, #4294967295
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	401a      	ands	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b0:	f04f 31ff 	mov.w	r1, #4294967295
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	4313      	orrs	r3, r2
         );
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	@ 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f7ff ff90 	bl	8002914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff2d 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff42 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff90 	bl	8002968 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5f 	bl	8002914 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff35 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa2 	bl	80029cc <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b08b      	sub	sp, #44	@ 0x2c
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	e169      	b.n	8002d7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	f040 8158 	bne.w	8002d76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a9a      	ldr	r2, [pc, #616]	@ (8002d34 <HAL_GPIO_Init+0x2a0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d05e      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002ad0:	4a98      	ldr	r2, [pc, #608]	@ (8002d34 <HAL_GPIO_Init+0x2a0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d875      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002ad6:	4a98      	ldr	r2, [pc, #608]	@ (8002d38 <HAL_GPIO_Init+0x2a4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d058      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002adc:	4a96      	ldr	r2, [pc, #600]	@ (8002d38 <HAL_GPIO_Init+0x2a4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d86f      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002ae2:	4a96      	ldr	r2, [pc, #600]	@ (8002d3c <HAL_GPIO_Init+0x2a8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d052      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002ae8:	4a94      	ldr	r2, [pc, #592]	@ (8002d3c <HAL_GPIO_Init+0x2a8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d869      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002aee:	4a94      	ldr	r2, [pc, #592]	@ (8002d40 <HAL_GPIO_Init+0x2ac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d04c      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002af4:	4a92      	ldr	r2, [pc, #584]	@ (8002d40 <HAL_GPIO_Init+0x2ac>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d863      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002afa:	4a92      	ldr	r2, [pc, #584]	@ (8002d44 <HAL_GPIO_Init+0x2b0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d046      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002b00:	4a90      	ldr	r2, [pc, #576]	@ (8002d44 <HAL_GPIO_Init+0x2b0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d85d      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002b06:	2b12      	cmp	r3, #18
 8002b08:	d82a      	bhi.n	8002b60 <HAL_GPIO_Init+0xcc>
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d859      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b14 <HAL_GPIO_Init+0x80>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b8f 	.word	0x08002b8f
 8002b18:	08002b69 	.word	0x08002b69
 8002b1c:	08002b7b 	.word	0x08002b7b
 8002b20:	08002bbd 	.word	0x08002bbd
 8002b24:	08002bc3 	.word	0x08002bc3
 8002b28:	08002bc3 	.word	0x08002bc3
 8002b2c:	08002bc3 	.word	0x08002bc3
 8002b30:	08002bc3 	.word	0x08002bc3
 8002b34:	08002bc3 	.word	0x08002bc3
 8002b38:	08002bc3 	.word	0x08002bc3
 8002b3c:	08002bc3 	.word	0x08002bc3
 8002b40:	08002bc3 	.word	0x08002bc3
 8002b44:	08002bc3 	.word	0x08002bc3
 8002b48:	08002bc3 	.word	0x08002bc3
 8002b4c:	08002bc3 	.word	0x08002bc3
 8002b50:	08002bc3 	.word	0x08002bc3
 8002b54:	08002bc3 	.word	0x08002bc3
 8002b58:	08002b71 	.word	0x08002b71
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	4a79      	ldr	r2, [pc, #484]	@ (8002d48 <HAL_GPIO_Init+0x2b4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b66:	e02c      	b.n	8002bc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	623b      	str	r3, [r7, #32]
          break;
 8002b6e:	e029      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e024      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	3308      	adds	r3, #8
 8002b80:	623b      	str	r3, [r7, #32]
          break;
 8002b82:	e01f      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	623b      	str	r3, [r7, #32]
          break;
 8002b8c:	e01a      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b96:	2304      	movs	r3, #4
 8002b98:	623b      	str	r3, [r7, #32]
          break;
 8002b9a:	e013      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	611a      	str	r2, [r3, #16]
          break;
 8002bae:	e009      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	615a      	str	r2, [r3, #20]
          break;
 8002bba:	e003      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
          break;
 8002bc0:	e000      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          break;
 8002bc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2bff      	cmp	r3, #255	@ 0xff
 8002bc8:	d801      	bhi.n	8002bce <HAL_GPIO_Init+0x13a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_Init+0x13e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2bff      	cmp	r3, #255	@ 0xff
 8002bd8:	d802      	bhi.n	8002be0 <HAL_GPIO_Init+0x14c>
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	e002      	b.n	8002be6 <HAL_GPIO_Init+0x152>
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	3b08      	subs	r3, #8
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	210f      	movs	r1, #15
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	431a      	orrs	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80b1 	beq.w	8002d76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c14:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	4a4c      	ldr	r2, [pc, #304]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6193      	str	r3, [r2, #24]
 8002c20:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c2c:	4a48      	ldr	r2, [pc, #288]	@ (8002d50 <HAL_GPIO_Init+0x2bc>)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a40      	ldr	r2, [pc, #256]	@ (8002d54 <HAL_GPIO_Init+0x2c0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_GPIO_Init+0x1ec>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d58 <HAL_GPIO_Init+0x2c4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00d      	beq.n	8002c7c <HAL_GPIO_Init+0x1e8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3e      	ldr	r2, [pc, #248]	@ (8002d5c <HAL_GPIO_Init+0x2c8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <HAL_GPIO_Init+0x1e4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d60 <HAL_GPIO_Init+0x2cc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_GPIO_Init+0x1e0>
 8002c70:	2303      	movs	r3, #3
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c74:	2304      	movs	r3, #4
 8002c76:	e004      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e002      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c80:	2300      	movs	r3, #0
 8002c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c84:	f002 0203 	and.w	r2, r2, #3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c92:	492f      	ldr	r1, [pc, #188]	@ (8002d50 <HAL_GPIO_Init+0x2bc>)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cac:	4b2d      	ldr	r3, [pc, #180]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	492c      	ldr	r1, [pc, #176]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cba:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	4928      	ldr	r1, [pc, #160]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	4922      	ldr	r1, [pc, #136]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60cb      	str	r3, [r1, #12]
 8002ce0:	e006      	b.n	8002cf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ce2:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	491e      	ldr	r1, [pc, #120]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4918      	ldr	r1, [pc, #96]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d0a:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4914      	ldr	r1, [pc, #80]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d021      	beq.n	8002d68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e021      	b.n	8002d76 <HAL_GPIO_Init+0x2e2>
 8002d32:	bf00      	nop
 8002d34:	10320000 	.word	0x10320000
 8002d38:	10310000 	.word	0x10310000
 8002d3c:	10220000 	.word	0x10220000
 8002d40:	10210000 	.word	0x10210000
 8002d44:	10120000 	.word	0x10120000
 8002d48:	10110000 	.word	0x10110000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40010800 	.word	0x40010800
 8002d58:	40010c00 	.word	0x40010c00
 8002d5c:	40011000 	.word	0x40011000
 8002d60:	40011400 	.word	0x40011400
 8002d64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	4909      	ldr	r1, [pc, #36]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	3301      	adds	r3, #1
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f47f ae8e 	bne.w	8002aa8 <HAL_GPIO_Init+0x14>
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	372c      	adds	r7, #44	@ 0x2c
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40010400 	.word	0x40010400

08002d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
 8002da8:	4613      	mov	r3, r2
 8002daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002db8:	e003      	b.n	8002dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	041a      	lsls	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de2:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fad4 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e272      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8087 	beq.w	8002f2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e1c:	4b92      	ldr	r3, [pc, #584]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d00c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e28:	4b8f      	ldr	r3, [pc, #572]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d112      	bne.n	8002e5a <HAL_RCC_OscConfig+0x5e>
 8002e34:	4b8c      	ldr	r3, [pc, #560]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e40:	d10b      	bne.n	8002e5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e42:	4b89      	ldr	r3, [pc, #548]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d06c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x12c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d168      	bne.n	8002f28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e24c      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x76>
 8002e64:	4b80      	ldr	r3, [pc, #512]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a7f      	ldr	r2, [pc, #508]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	e02e      	b.n	8002ed0 <HAL_RCC_OscConfig+0xd4>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x98>
 8002e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7a      	ldr	r2, [pc, #488]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b78      	ldr	r3, [pc, #480]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a77      	ldr	r2, [pc, #476]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e01d      	b.n	8002ed0 <HAL_RCC_OscConfig+0xd4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xbc>
 8002e9e:	4b72      	ldr	r3, [pc, #456]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a71      	ldr	r2, [pc, #452]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b6f      	ldr	r3, [pc, #444]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a6e      	ldr	r2, [pc, #440]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0xd4>
 8002eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a6a      	ldr	r2, [pc, #424]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b68      	ldr	r3, [pc, #416]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a67      	ldr	r2, [pc, #412]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ece:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fd64 	bl	80019a4 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fd60 	bl	80019a4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	@ 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e200      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xe4>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fd50 	bl	80019a4 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fe fd4c 	bl	80019a4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	@ 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1ec      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	4b53      	ldr	r3, [pc, #332]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x10c>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f36:	4b4c      	ldr	r3, [pc, #304]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f42:	4b49      	ldr	r3, [pc, #292]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d11c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x18c>
 8002f4e:	4b46      	ldr	r3, [pc, #280]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d116      	bne.n	8002f88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	4b43      	ldr	r3, [pc, #268]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x176>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e1c0      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	4b3d      	ldr	r3, [pc, #244]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4939      	ldr	r1, [pc, #228]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	e03a      	b.n	8002ffe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f90:	4b36      	ldr	r3, [pc, #216]	@ (800306c <HAL_RCC_OscConfig+0x270>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fe fd05 	bl	80019a4 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9e:	f7fe fd01 	bl	80019a4 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e1a1      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4927      	ldr	r1, [pc, #156]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
 8002fd0:	e015      	b.n	8002ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd2:	4b26      	ldr	r3, [pc, #152]	@ (800306c <HAL_RCC_OscConfig+0x270>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fce4 	bl	80019a4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7fe fce0 	bl	80019a4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e180      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d03a      	beq.n	8003080 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d019      	beq.n	8003046 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003012:	4b17      	ldr	r3, [pc, #92]	@ (8003070 <HAL_RCC_OscConfig+0x274>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003018:	f7fe fcc4 	bl	80019a4 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7fe fcc0 	bl	80019a4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e160      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <HAL_RCC_OscConfig+0x26c>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800303e:	2001      	movs	r0, #1
 8003040:	f000 faba 	bl	80035b8 <RCC_Delay>
 8003044:	e01c      	b.n	8003080 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003046:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <HAL_RCC_OscConfig+0x274>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe fcaa 	bl	80019a4 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003052:	e00f      	b.n	8003074 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003054:	f7fe fca6 	bl	80019a4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d908      	bls.n	8003074 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e146      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	42420000 	.word	0x42420000
 8003070:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	4b92      	ldr	r3, [pc, #584]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e9      	bne.n	8003054 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a6 	beq.w	80031da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b8b      	ldr	r3, [pc, #556]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10d      	bne.n	80030ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	4b88      	ldr	r3, [pc, #544]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4a87      	ldr	r2, [pc, #540]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a8:	61d3      	str	r3, [r2, #28]
 80030aa:	4b85      	ldr	r3, [pc, #532]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b82      	ldr	r3, [pc, #520]	@ (80032c4 <HAL_RCC_OscConfig+0x4c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c6:	4b7f      	ldr	r3, [pc, #508]	@ (80032c4 <HAL_RCC_OscConfig+0x4c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a7e      	ldr	r2, [pc, #504]	@ (80032c4 <HAL_RCC_OscConfig+0x4c8>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7fe fc67 	bl	80019a4 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fe fc63 	bl	80019a4 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b64      	cmp	r3, #100	@ 0x64
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e103      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	4b75      	ldr	r3, [pc, #468]	@ (80032c4 <HAL_RCC_OscConfig+0x4c8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x312>
 8003100:	4b6f      	ldr	r3, [pc, #444]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a6e      	ldr	r2, [pc, #440]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	e02d      	b.n	800316a <HAL_RCC_OscConfig+0x36e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x334>
 8003116:	4b6a      	ldr	r3, [pc, #424]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4a69      	ldr	r2, [pc, #420]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6213      	str	r3, [r2, #32]
 8003122:	4b67      	ldr	r3, [pc, #412]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a66      	ldr	r2, [pc, #408]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	6213      	str	r3, [r2, #32]
 800312e:	e01c      	b.n	800316a <HAL_RCC_OscConfig+0x36e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b05      	cmp	r3, #5
 8003136:	d10c      	bne.n	8003152 <HAL_RCC_OscConfig+0x356>
 8003138:	4b61      	ldr	r3, [pc, #388]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4a60      	ldr	r2, [pc, #384]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	f043 0304 	orr.w	r3, r3, #4
 8003142:	6213      	str	r3, [r2, #32]
 8003144:	4b5e      	ldr	r3, [pc, #376]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4a5d      	ldr	r2, [pc, #372]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6213      	str	r3, [r2, #32]
 8003150:	e00b      	b.n	800316a <HAL_RCC_OscConfig+0x36e>
 8003152:	4b5b      	ldr	r3, [pc, #364]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4a5a      	ldr	r2, [pc, #360]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	6213      	str	r3, [r2, #32]
 800315e:	4b58      	ldr	r3, [pc, #352]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4a57      	ldr	r2, [pc, #348]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d015      	beq.n	800319e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7fe fc17 	bl	80019a4 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fe fc13 	bl	80019a4 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0b1      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003190:	4b4b      	ldr	r3, [pc, #300]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ee      	beq.n	800317a <HAL_RCC_OscConfig+0x37e>
 800319c:	e014      	b.n	80031c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319e:	f7fe fc01 	bl	80019a4 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe fbfd 	bl	80019a4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e09b      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031bc:	4b40      	ldr	r3, [pc, #256]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ee      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d105      	bne.n	80031da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4b3c      	ldr	r3, [pc, #240]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4a3b      	ldr	r2, [pc, #236]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8087 	beq.w	80032f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e4:	4b36      	ldr	r3, [pc, #216]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d061      	beq.n	80032b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d146      	bne.n	8003286 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f8:	4b33      	ldr	r3, [pc, #204]	@ (80032c8 <HAL_RCC_OscConfig+0x4cc>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fe fbd1 	bl	80019a4 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003206:	f7fe fbcd 	bl	80019a4 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e06d      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003218:	4b29      	ldr	r3, [pc, #164]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f0      	bne.n	8003206 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322c:	d108      	bne.n	8003240 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800322e:	4b24      	ldr	r3, [pc, #144]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	4921      	ldr	r1, [pc, #132]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003240:	4b1f      	ldr	r3, [pc, #124]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a19      	ldr	r1, [r3, #32]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	430b      	orrs	r3, r1
 8003252:	491b      	ldr	r1, [pc, #108]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003258:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x4cc>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fe fba1 	bl	80019a4 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003266:	f7fe fb9d 	bl	80019a4 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e03d      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003278:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x46a>
 8003284:	e035      	b.n	80032f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003286:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <HAL_RCC_OscConfig+0x4cc>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fe fb8a 	bl	80019a4 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe fb86 	bl	80019a4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e026      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x498>
 80032b2:	e01e      	b.n	80032f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e019      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <HAL_RCC_OscConfig+0x500>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000

08003300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0d0      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003314:	4b6a      	ldr	r3, [pc, #424]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d910      	bls.n	8003344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b67      	ldr	r3, [pc, #412]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 0207 	bic.w	r2, r3, #7
 800332a:	4965      	ldr	r1, [pc, #404]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	4b63      	ldr	r3, [pc, #396]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0b8      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800335c:	4b59      	ldr	r3, [pc, #356]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a58      	ldr	r2, [pc, #352]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003366:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003374:	4b53      	ldr	r3, [pc, #332]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a52      	ldr	r2, [pc, #328]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800337e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003380:	4b50      	ldr	r3, [pc, #320]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	494d      	ldr	r1, [pc, #308]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d040      	beq.n	8003420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d115      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e07f      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e073      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	4b3d      	ldr	r3, [pc, #244]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06b      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b39      	ldr	r3, [pc, #228]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4936      	ldr	r1, [pc, #216]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fad8 	bl	80019a4 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	e00a      	b.n	800340e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7fe fad4 	bl	80019a4 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e053      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	4b2d      	ldr	r3, [pc, #180]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 020c 	and.w	r2, r3, #12
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d1eb      	bne.n	80033f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b27      	ldr	r3, [pc, #156]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d210      	bcs.n	8003450 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b24      	ldr	r3, [pc, #144]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 0207 	bic.w	r2, r3, #7
 8003436:	4922      	ldr	r1, [pc, #136]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b20      	ldr	r3, [pc, #128]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e032      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800345c:	4b19      	ldr	r3, [pc, #100]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4916      	ldr	r1, [pc, #88]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800347a:	4b12      	ldr	r3, [pc, #72]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	490e      	ldr	r1, [pc, #56]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800348e:	f000 f821 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8003492:	4602      	mov	r2, r0
 8003494:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	490a      	ldr	r1, [pc, #40]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	5ccb      	ldrb	r3, [r1, r3]
 80034a2:	fa22 f303 	lsr.w	r3, r2, r3
 80034a6:	4a09      	ldr	r2, [pc, #36]	@ (80034cc <HAL_RCC_ClockConfig+0x1cc>)
 80034a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_RCC_ClockConfig+0x1d0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fa36 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40022000 	.word	0x40022000
 80034c4:	40021000 	.word	0x40021000
 80034c8:	0800524c 	.word	0x0800524c
 80034cc:	2000000c 	.word	0x2000000c
 80034d0:	20000010 	.word	0x20000010

080034d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x94>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d002      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x30>
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d003      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x36>
 8003502:	e027      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003504:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_RCC_GetSysClockFreq+0x98>)
 8003506:	613b      	str	r3, [r7, #16]
      break;
 8003508:	e027      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	0c9b      	lsrs	r3, r3, #18
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003514:	5cd3      	ldrb	r3, [r2, r3]
 8003516:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d010      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003522:	4b11      	ldr	r3, [pc, #68]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x94>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	0c5b      	lsrs	r3, r3, #17
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	4a11      	ldr	r2, [pc, #68]	@ (8003574 <HAL_RCC_GetSysClockFreq+0xa0>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a0d      	ldr	r2, [pc, #52]	@ (800356c <HAL_RCC_GetSysClockFreq+0x98>)
 8003536:	fb03 f202 	mul.w	r2, r3, r2
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	e004      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0c      	ldr	r2, [pc, #48]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003548:	fb02 f303 	mul.w	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	613b      	str	r3, [r7, #16]
      break;
 8003552:	e002      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_RCC_GetSysClockFreq+0x98>)
 8003556:	613b      	str	r3, [r7, #16]
      break;
 8003558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355a:	693b      	ldr	r3, [r7, #16]
}
 800355c:	4618      	mov	r0, r3
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	007a1200 	.word	0x007a1200
 8003570:	08005264 	.word	0x08005264
 8003574:	08005274 	.word	0x08005274
 8003578:	003d0900 	.word	0x003d0900

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b02      	ldr	r3, [pc, #8]	@ (800358c <HAL_RCC_GetHCLKFreq+0x10>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	2000000c 	.word	0x2000000c

08003590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003594:	f7ff fff2 	bl	800357c <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0adb      	lsrs	r3, r3, #11
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4903      	ldr	r1, [pc, #12]	@ (80035b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	0800525c 	.word	0x0800525c

080035b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035c0:	4b0a      	ldr	r3, [pc, #40]	@ (80035ec <RCC_Delay+0x34>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <RCC_Delay+0x38>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	0a5b      	lsrs	r3, r3, #9
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d4:	bf00      	nop
  }
  while (Delay --);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1e5a      	subs	r2, r3, #1
 80035da:	60fa      	str	r2, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f9      	bne.n	80035d4 <RCC_Delay+0x1c>
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	2000000c 	.word	0x2000000c
 80035f0:	10624dd3 	.word	0x10624dd3

080035f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d07d      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003614:	4b4f      	ldr	r3, [pc, #316]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10d      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003620:	4b4c      	ldr	r3, [pc, #304]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	4a4b      	ldr	r2, [pc, #300]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362a:	61d3      	str	r3, [r2, #28]
 800362c:	4b49      	ldr	r3, [pc, #292]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003638:	2301      	movs	r3, #1
 800363a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b46      	ldr	r3, [pc, #280]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d118      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003648:	4b43      	ldr	r3, [pc, #268]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a42      	ldr	r2, [pc, #264]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003654:	f7fe f9a6 	bl	80019a4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	e008      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7fe f9a2 	bl	80019a4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	@ 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e06d      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b3a      	ldr	r3, [pc, #232]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800367a:	4b36      	ldr	r3, [pc, #216]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003682:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02e      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	429a      	cmp	r2, r3
 8003696:	d027      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003698:	4b2e      	ldr	r3, [pc, #184]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a2:	4b2e      	ldr	r3, [pc, #184]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a8:	4b2c      	ldr	r3, [pc, #176]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036ae:	4a29      	ldr	r2, [pc, #164]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d014      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe f971 	bl	80019a4 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe f96d 	bl	80019a4 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e036      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ee      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4917      	ldr	r1, [pc, #92]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b14      	ldr	r3, [pc, #80]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4a13      	ldr	r2, [pc, #76]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003718:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	490b      	ldr	r1, [pc, #44]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003736:	4b07      	ldr	r3, [pc, #28]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	4904      	ldr	r1, [pc, #16]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	40007000 	.word	0x40007000
 800375c:	42420440 	.word	0x42420440

08003760 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	2300      	movs	r3, #0
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b10      	cmp	r3, #16
 8003786:	f200 808a 	bhi.w	800389e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d045      	beq.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d075      	beq.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003796:	e082      	b.n	800389e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003798:	4b46      	ldr	r3, [pc, #280]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800379e:	4b45      	ldr	r3, [pc, #276]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d07b      	beq.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0c9b      	lsrs	r3, r3, #18
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	4a41      	ldr	r2, [pc, #260]	@ (80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80037b4:	5cd3      	ldrb	r3, [r2, r3]
 80037b6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d015      	beq.n	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037c2:	4b3c      	ldr	r3, [pc, #240]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	0c5b      	lsrs	r3, r3, #17
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	4a3b      	ldr	r2, [pc, #236]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037dc:	4a38      	ldr	r2, [pc, #224]	@ (80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	e004      	b.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4a34      	ldr	r2, [pc, #208]	@ (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80037f8:	4b2e      	ldr	r3, [pc, #184]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003800:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003804:	d102      	bne.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	61bb      	str	r3, [r7, #24]
      break;
 800380a:	e04a      	b.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4a2d      	ldr	r2, [pc, #180]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	61bb      	str	r3, [r7, #24]
      break;
 800381a:	e042      	b.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800381c:	4b25      	ldr	r3, [pc, #148]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800382c:	d108      	bne.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003838:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	e01f      	b.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800384a:	d109      	bne.n	8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800384c:	4b19      	ldr	r3, [pc, #100]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003858:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e00f      	b.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800386a:	d11c      	bne.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800386c:	4b11      	ldr	r3, [pc, #68]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d016      	beq.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003878:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800387c:	61bb      	str	r3, [r7, #24]
      break;
 800387e:	e012      	b.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003880:	e011      	b.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003882:	f7ff fe85 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 8003886:	4602      	mov	r2, r0
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	0b9b      	lsrs	r3, r3, #14
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	3301      	adds	r3, #1
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	61bb      	str	r3, [r7, #24]
      break;
 800389c:	e004      	b.n	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80038a6:	bf00      	nop
    }
  }
  return (frequency);
 80038a8:	69bb      	ldr	r3, [r7, #24]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	08005278 	.word	0x08005278
 80038bc:	08005288 	.word	0x08005288
 80038c0:	007a1200 	.word	0x007a1200
 80038c4:	003d0900 	.word	0x003d0900
 80038c8:	aaaaaaab 	.word	0xaaaaaaab

080038cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e041      	b.n	8003962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd ff6a 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f000 fb7e 	bl	800400c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d001      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e03a      	b.n	80039fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a18      	ldr	r2, [pc, #96]	@ (8003a04 <HAL_TIM_Base_Start_IT+0x98>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00e      	beq.n	80039c4 <HAL_TIM_Base_Start_IT+0x58>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ae:	d009      	beq.n	80039c4 <HAL_TIM_Base_Start_IT+0x58>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <HAL_TIM_Base_Start_IT+0x9c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_TIM_Base_Start_IT+0x58>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a13      	ldr	r2, [pc, #76]	@ (8003a0c <HAL_TIM_Base_Start_IT+0xa0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d111      	bne.n	80039e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d010      	beq.n	80039f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e6:	e007      	b.n	80039f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40000800 	.word	0x40000800

08003a10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e041      	b.n	8003aa6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f839 	bl	8003aae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 fadc 	bl	800400c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d020      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01b      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0202 	mvn.w	r2, #2
 8003af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa63 	bl	8003fd6 <HAL_TIM_IC_CaptureCallback>
 8003b10:	e005      	b.n	8003b1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa56 	bl	8003fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fa65 	bl	8003fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d020      	beq.n	8003b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01b      	beq.n	8003b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0204 	mvn.w	r2, #4
 8003b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa3d 	bl	8003fd6 <HAL_TIM_IC_CaptureCallback>
 8003b5c:	e005      	b.n	8003b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa30 	bl	8003fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fa3f 	bl	8003fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d020      	beq.n	8003bbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01b      	beq.n	8003bbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0208 	mvn.w	r2, #8
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2204      	movs	r2, #4
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa17 	bl	8003fd6 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa0a 	bl	8003fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa19 	bl	8003fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d020      	beq.n	8003c08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01b      	beq.n	8003c08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0210 	mvn.w	r2, #16
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f9f1 	bl	8003fd6 <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9e4 	bl	8003fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f9f3 	bl	8003fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00c      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0201 	mvn.w	r2, #1
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f9c3 	bl	8003fb2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00c      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fcd1 	bl	80045f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00c      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9c3 	bl	8003ffa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00c      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0220 	mvn.w	r2, #32
 8003c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fca4 	bl	80045e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0ae      	b.n	8003e1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	f200 809f 	bhi.w	8003e0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cce:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003e0d 	.word	0x08003e0d
 8003cdc:	08003e0d 	.word	0x08003e0d
 8003ce0:	08003e0d 	.word	0x08003e0d
 8003ce4:	08003d49 	.word	0x08003d49
 8003ce8:	08003e0d 	.word	0x08003e0d
 8003cec:	08003e0d 	.word	0x08003e0d
 8003cf0:	08003e0d 	.word	0x08003e0d
 8003cf4:	08003d8b 	.word	0x08003d8b
 8003cf8:	08003e0d 	.word	0x08003e0d
 8003cfc:	08003e0d 	.word	0x08003e0d
 8003d00:	08003e0d 	.word	0x08003e0d
 8003d04:	08003dcb 	.word	0x08003dcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f9ea 	bl	80040e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0208 	orr.w	r2, r2, #8
 8003d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0204 	bic.w	r2, r2, #4
 8003d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6999      	ldr	r1, [r3, #24]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	619a      	str	r2, [r3, #24]
      break;
 8003d46:	e064      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fa30 	bl	80041b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6999      	ldr	r1, [r3, #24]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	021a      	lsls	r2, r3, #8
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	619a      	str	r2, [r3, #24]
      break;
 8003d88:	e043      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fa79 	bl	8004288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0208 	orr.w	r2, r2, #8
 8003da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0204 	bic.w	r2, r2, #4
 8003db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69d9      	ldr	r1, [r3, #28]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	61da      	str	r2, [r3, #28]
      break;
 8003dc8:	e023      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fac3 	bl	800435c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69d9      	ldr	r1, [r3, #28]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	021a      	lsls	r2, r3, #8
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	61da      	str	r2, [r3, #28]
      break;
 8003e0a:	e002      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_TIM_ConfigClockSource+0x1c>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e0b4      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x186>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e78:	d03e      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e7e:	f200 8087 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e86:	f000 8086 	beq.w	8003f96 <HAL_TIM_ConfigClockSource+0x172>
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8e:	d87f      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b70      	cmp	r3, #112	@ 0x70
 8003e92:	d01a      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0xa6>
 8003e94:	2b70      	cmp	r3, #112	@ 0x70
 8003e96:	d87b      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b60      	cmp	r3, #96	@ 0x60
 8003e9a:	d050      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x11a>
 8003e9c:	2b60      	cmp	r3, #96	@ 0x60
 8003e9e:	d877      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b50      	cmp	r3, #80	@ 0x50
 8003ea2:	d03c      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0xfa>
 8003ea4:	2b50      	cmp	r3, #80	@ 0x50
 8003ea6:	d873      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d058      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x13a>
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d86f      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b30      	cmp	r3, #48	@ 0x30
 8003eb2:	d064      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	2b30      	cmp	r3, #48	@ 0x30
 8003eb6:	d86b      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d060      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x15a>
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d867      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d05c      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x15a>
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d05a      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x15a>
 8003ec8:	e062      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eda:	f000 fb04 	bl	80044e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	609a      	str	r2, [r3, #8]
      break;
 8003ef6:	e04f      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f08:	f000 faed 	bl	80044e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f1a:	609a      	str	r2, [r3, #8]
      break;
 8003f1c:	e03c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 fa64 	bl	80043f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2150      	movs	r1, #80	@ 0x50
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fabb 	bl	80044b2 <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e02c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 fa82 	bl	8004454 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2160      	movs	r1, #96	@ 0x60
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 faab 	bl	80044b2 <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e01c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 fa44 	bl	80043f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2140      	movs	r1, #64	@ 0x40
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fa9b 	bl	80044b2 <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e00c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f000 fa92 	bl	80044b2 <TIM_ITRx_SetConfig>
      break;
 8003f8e:	e003      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      break;
 8003f94:	e000      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a2f      	ldr	r2, [pc, #188]	@ (80040dc <TIM_Base_SetConfig+0xd0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0x30>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0x30>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a2c      	ldr	r2, [pc, #176]	@ (80040e0 <TIM_Base_SetConfig+0xd4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0x30>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a2b      	ldr	r2, [pc, #172]	@ (80040e4 <TIM_Base_SetConfig+0xd8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d108      	bne.n	800404e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a22      	ldr	r2, [pc, #136]	@ (80040dc <TIM_Base_SetConfig+0xd0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00b      	beq.n	800406e <TIM_Base_SetConfig+0x62>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405c:	d007      	beq.n	800406e <TIM_Base_SetConfig+0x62>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1f      	ldr	r2, [pc, #124]	@ (80040e0 <TIM_Base_SetConfig+0xd4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d003      	beq.n	800406e <TIM_Base_SetConfig+0x62>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1e      	ldr	r2, [pc, #120]	@ (80040e4 <TIM_Base_SetConfig+0xd8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d108      	bne.n	8004080 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a0d      	ldr	r2, [pc, #52]	@ (80040dc <TIM_Base_SetConfig+0xd0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d103      	bne.n	80040b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f023 0201 	bic.w	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	611a      	str	r2, [r3, #16]
  }
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	40012c00 	.word	0x40012c00
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800

080040e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f023 0201 	bic.w	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f023 0302 	bic.w	r3, r3, #2
 8004130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <TIM_OC1_SetConfig+0xc8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10c      	bne.n	800415e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0308 	bic.w	r3, r3, #8
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f023 0304 	bic.w	r3, r3, #4
 800415c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a13      	ldr	r2, [pc, #76]	@ (80041b0 <TIM_OC1_SetConfig+0xc8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d111      	bne.n	800418a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800416c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	621a      	str	r2, [r3, #32]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40012c00 	.word	0x40012c00

080041b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f023 0210 	bic.w	r2, r3, #16
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0320 	bic.w	r3, r3, #32
 80041fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a1d      	ldr	r2, [pc, #116]	@ (8004284 <TIM_OC2_SetConfig+0xd0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10d      	bne.n	8004230 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800421a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800422e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a14      	ldr	r2, [pc, #80]	@ (8004284 <TIM_OC2_SetConfig+0xd0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d113      	bne.n	8004260 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800423e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	40012c00 	.word	0x40012c00

08004288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0303 	bic.w	r3, r3, #3
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004358 <TIM_OC3_SetConfig+0xd0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10d      	bne.n	8004302 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a14      	ldr	r2, [pc, #80]	@ (8004358 <TIM_OC3_SetConfig+0xd0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d113      	bne.n	8004332 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	621a      	str	r2, [r3, #32]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40012c00 	.word	0x40012c00

0800435c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	031b      	lsls	r3, r3, #12
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a0f      	ldr	r2, [pc, #60]	@ (80043f4 <TIM_OC4_SetConfig+0x98>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d109      	bne.n	80043d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	019b      	lsls	r3, r3, #6
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40012c00 	.word	0x40012c00

080043f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f023 030a 	bic.w	r3, r3, #10
 8004434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0210 	bic.w	r2, r3, #16
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800447e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	031b      	lsls	r3, r3, #12
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004490:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	621a      	str	r2, [r3, #32]
}
 80044a8:	bf00      	nop
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr

080044b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f043 0307 	orr.w	r3, r3, #7
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	609a      	str	r2, [r3, #8]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b087      	sub	sp, #28
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004500:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	021a      	lsls	r2, r3, #8
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	431a      	orrs	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4313      	orrs	r3, r2
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	609a      	str	r2, [r3, #8]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004538:	2302      	movs	r3, #2
 800453a:	e046      	b.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a16      	ldr	r2, [pc, #88]	@ (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004588:	d009      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a12      	ldr	r2, [pc, #72]	@ (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a10      	ldr	r2, [pc, #64]	@ (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10c      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800

080045e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <SEND_4_BIT>:
 */

#include "LCD_16x2_PARALLEL.h"

void SEND_4_BIT(char data, uint8_t rsPin)//rs=0 yra instruction register o HIGH(1) data register
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	460a      	mov	r2, r1
 800460e:	71fb      	strb	r3, [r7, #7]
 8004610:	4613      	mov	r3, r2
 8004612:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rsPin);
 8004614:	79bb      	ldrb	r3, [r7, #6]
 8004616:	461a      	mov	r2, r3
 8004618:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800461c:	4823      	ldr	r0, [pc, #140]	@ (80046ac <SEND_4_BIT+0xa8>)
 800461e:	f7fe fbbd 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8004622:	2200      	movs	r2, #0
 8004624:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004628:	4820      	ldr	r0, [pc, #128]	@ (80046ac <SEND_4_BIT+0xa8>)
 800462a:	f7fe fbb7 	bl	8002d9c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data>>0)&0x1);
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	2120      	movs	r1, #32
 800463a:	481d      	ldr	r0, [pc, #116]	@ (80046b0 <SEND_4_BIT+0xac>)
 800463c:	f7fe fbae 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data>>1)&0x1);
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	2140      	movs	r1, #64	@ 0x40
 8004650:	4817      	ldr	r0, [pc, #92]	@ (80046b0 <SEND_4_BIT+0xac>)
 8004652:	f7fe fba3 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data>>2)&0x1);
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	2180      	movs	r1, #128	@ 0x80
 8004666:	4812      	ldr	r0, [pc, #72]	@ (80046b0 <SEND_4_BIT+0xac>)
 8004668:	f7fe fb98 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data>>3)&0x1);
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800467e:	480c      	ldr	r0, [pc, #48]	@ (80046b0 <SEND_4_BIT+0xac>)
 8004680:	f7fe fb8c 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8004684:	2201      	movs	r2, #1
 8004686:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800468a:	4808      	ldr	r0, [pc, #32]	@ (80046ac <SEND_4_BIT+0xa8>)
 800468c:	f7fe fb86 	bl	8002d9c <HAL_GPIO_WritePin>
	DELAY_US(500); // Allow LCD to latch
 8004690:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004694:	f7fc fcc8 	bl	8001028 <DELAY_US>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8004698:	2200      	movs	r2, #0
 800469a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800469e:	4803      	ldr	r0, [pc, #12]	@ (80046ac <SEND_4_BIT+0xa8>)
 80046a0:	f7fe fb7c 	bl	8002d9c <HAL_GPIO_WritePin>

}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40010800 	.word	0x40010800
 80046b0:	40010c00 	.word	0x40010c00

080046b4 <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(char komanda)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	4b13      	ldr	r3, [pc, #76]	@ (8004714 <LCD_SEND_COMMAND+0x60>)
 80046c6:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 80046c8:	4b12      	ldr	r3, [pc, #72]	@ (8004714 <LCD_SEND_COMMAND+0x60>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff98 	bl	8004604 <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004714 <LCD_SEND_COMMAND+0x60>)
 80046de:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 80046e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <LCD_SEND_COMMAND+0x60>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff ff8c 	bl	8004604 <SEND_4_BIT>
	if (komanda == 0x01 || komanda == 0x02) {
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d002      	beq.n	80046f8 <LCD_SEND_COMMAND+0x44>
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d103      	bne.n	8004700 <LCD_SEND_COMMAND+0x4c>
		HAL_Delay(2); // These are extra slow
 80046f8:	2002      	movs	r0, #2
 80046fa:	f7fd f95d 	bl	80019b8 <HAL_Delay>
 80046fe:	e004      	b.n	800470a <LCD_SEND_COMMAND+0x56>
	} else {
		DELAY_US(300); // All other commands
 8004700:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004704:	f7fc fc90 	bl	8001028 <DELAY_US>
	}
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000174 	.word	0x20000174

08004718 <LCD_SEND_DATA>:
void LCD_SEND_DATA(char komanda)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	b2da      	uxtb	r2, r3
 8004728:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <LCD_SEND_DATA+0x40>)
 800472a:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 800472c:	4b0a      	ldr	r3, [pc, #40]	@ (8004758 <LCD_SEND_DATA+0x40>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ff66 	bl	8004604 <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	b2da      	uxtb	r2, r3
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <LCD_SEND_DATA+0x40>)
 8004742:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8004744:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <LCD_SEND_DATA+0x40>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2101      	movs	r1, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff5a 	bl	8004604 <SEND_4_BIT>
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000175 	.word	0x20000175

0800475c <LCD_CLEAR>:

void LCD_CLEAR()
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_DISPLAY_CLEAR);
 8004760:	2001      	movs	r0, #1
 8004762:	f7ff ffa7 	bl	80046b4 <LCD_SEND_COMMAND>
}
 8004766:	bf00      	nop
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <LCD_Init>:
	}
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
}

void LCD_Init()
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin,GPIO_PIN_RESET);
 8004770:	2200      	movs	r2, #0
 8004772:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004776:	4827      	ldr	r0, [pc, #156]	@ (8004814 <LCD_Init+0xa8>)
 8004778:	f7fe fb10 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin,GPIO_PIN_RESET);
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004782:	4824      	ldr	r0, [pc, #144]	@ (8004814 <LCD_Init+0xa8>)
 8004784:	f7fe fb0a 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8004788:	2200      	movs	r2, #0
 800478a:	2120      	movs	r1, #32
 800478c:	4822      	ldr	r0, [pc, #136]	@ (8004818 <LCD_Init+0xac>)
 800478e:	f7fe fb05 	bl	8002d9c <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8004792:	2200      	movs	r2, #0
 8004794:	2140      	movs	r1, #64	@ 0x40
 8004796:	4820      	ldr	r0, [pc, #128]	@ (8004818 <LCD_Init+0xac>)
 8004798:	f7fe fb00 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800479c:	2200      	movs	r2, #0
 800479e:	2180      	movs	r1, #128	@ 0x80
 80047a0:	481d      	ldr	r0, [pc, #116]	@ (8004818 <LCD_Init+0xac>)
 80047a2:	f7fe fafb 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 80047a6:	2200      	movs	r2, #0
 80047a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047ac:	481a      	ldr	r0, [pc, #104]	@ (8004818 <LCD_Init+0xac>)
 80047ae:	f7fe faf5 	bl	8002d9c <HAL_GPIO_WritePin>

    HAL_Delay(200); // Wait >40ms after power-on
 80047b2:	20c8      	movs	r0, #200	@ 0xc8
 80047b4:	f7fd f900 	bl	80019b8 <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 80047b8:	2100      	movs	r1, #0
 80047ba:	2003      	movs	r0, #3
 80047bc:	f7ff ff22 	bl	8004604 <SEND_4_BIT>
    HAL_Delay(2);
 80047c0:	2002      	movs	r0, #2
 80047c2:	f7fd f8f9 	bl	80019b8 <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 80047c6:	2100      	movs	r1, #0
 80047c8:	2003      	movs	r0, #3
 80047ca:	f7ff ff1b 	bl	8004604 <SEND_4_BIT>
    HAL_Delay(2);
 80047ce:	2002      	movs	r0, #2
 80047d0:	f7fd f8f2 	bl	80019b8 <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 80047d4:	2100      	movs	r1, #0
 80047d6:	2003      	movs	r0, #3
 80047d8:	f7ff ff14 	bl	8004604 <SEND_4_BIT>
    HAL_Delay(2);
 80047dc:	2002      	movs	r0, #2
 80047de:	f7fd f8eb 	bl	80019b8 <HAL_Delay>
    SEND_4_BIT(0x2, LCD_RS_INSTRUCTION);
 80047e2:	2100      	movs	r1, #0
 80047e4:	2002      	movs	r0, #2
 80047e6:	f7ff ff0d 	bl	8004604 <SEND_4_BIT>
    HAL_Delay(10);
 80047ea:	200a      	movs	r0, #10
 80047ec:	f7fd f8e4 	bl	80019b8 <HAL_Delay>

    //4 bit interface started
    LCD_SEND_COMMAND(0x28);  // Function Set: 4-bit, 2 lines, 5x8 dots
 80047f0:	2028      	movs	r0, #40	@ 0x28
 80047f2:	f7ff ff5f 	bl	80046b4 <LCD_SEND_COMMAND>
	// From now on: full commands (2 x 4-bit transfers)
    LCD_SEND_COMMAND(0x08);  // Display OFF (D=0, C=0, B=0)
 80047f6:	2008      	movs	r0, #8
 80047f8:	f7ff ff5c 	bl	80046b4 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x01);  // Clear Display
 80047fc:	2001      	movs	r0, #1
 80047fe:	f7ff ff59 	bl	80046b4 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x06);  // Entry Mode Set: Increment, No shift
 8004802:	2006      	movs	r0, #6
 8004804:	f7ff ff56 	bl	80046b4 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x0C);  // Display ON, Cursor OFF, Blink OFF
 8004808:	200c      	movs	r0, #12
 800480a:	f7ff ff53 	bl	80046b4 <LCD_SEND_COMMAND>
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40010800 	.word	0x40010800
 8004818:	40010c00 	.word	0x40010c00

0800481c <LCD_SEND_STR>:

void LCD_SEND_STR(const char data[], uint8_t place, uint8_t level)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
 8004828:	4613      	mov	r3, r2
 800482a:	70bb      	strb	r3, [r7, #2]
	/*
	 * @brief Offset from left side and level 0 - top and 1 - bottom
	 */
	if(level==1)
 800482c:	78bb      	ldrb	r3, [r7, #2]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d106      	bne.n	8004840 <LCD_SEND_STR+0x24>
	{
		LCD_SEND_COMMAND(0xC0+place);
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	3b40      	subs	r3, #64	@ 0x40
 8004836:	b2db      	uxtb	r3, r3
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ff3b 	bl	80046b4 <LCD_SEND_COMMAND>
 800483e:	e005      	b.n	800484c <LCD_SEND_STR+0x30>
	}
	else LCD_SEND_COMMAND(0x80+place);
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	3b80      	subs	r3, #128	@ 0x80
 8004844:	b2db      	uxtb	r3, r3
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff ff34 	bl	80046b4 <LCD_SEND_COMMAND>
	//kai N=high 2 line tai 1 line 0-4F o 2 0-27h   40-67h
	// KAI level 0 tai pirmas kai 1 tai antras levelis
	static uint8_t x;
	x = 0;
 800484c:	4b0f      	ldr	r3, [pc, #60]	@ (800488c <LCD_SEND_STR+0x70>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8004852:	e00e      	b.n	8004872 <LCD_SEND_STR+0x56>
	{
		LCD_SEND_DATA(data[x]);
 8004854:	4b0d      	ldr	r3, [pc, #52]	@ (800488c <LCD_SEND_STR+0x70>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff ff59 	bl	8004718 <LCD_SEND_DATA>
		x++;
 8004866:	4b09      	ldr	r3, [pc, #36]	@ (800488c <LCD_SEND_STR+0x70>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	3301      	adds	r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4b07      	ldr	r3, [pc, #28]	@ (800488c <LCD_SEND_STR+0x70>)
 8004870:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8004872:	4b06      	ldr	r3, [pc, #24]	@ (800488c <LCD_SEND_STR+0x70>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4413      	add	r3, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e8      	bne.n	8004854 <LCD_SEND_STR+0x38>
	}
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000176 	.word	0x20000176

08004890 <siprintf>:
 8004890:	b40e      	push	{r1, r2, r3}
 8004892:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004896:	b510      	push	{r4, lr}
 8004898:	2400      	movs	r4, #0
 800489a:	b09d      	sub	sp, #116	@ 0x74
 800489c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800489e:	9002      	str	r0, [sp, #8]
 80048a0:	9006      	str	r0, [sp, #24]
 80048a2:	9107      	str	r1, [sp, #28]
 80048a4:	9104      	str	r1, [sp, #16]
 80048a6:	4809      	ldr	r0, [pc, #36]	@ (80048cc <siprintf+0x3c>)
 80048a8:	4909      	ldr	r1, [pc, #36]	@ (80048d0 <siprintf+0x40>)
 80048aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ae:	9105      	str	r1, [sp, #20]
 80048b0:	6800      	ldr	r0, [r0, #0]
 80048b2:	a902      	add	r1, sp, #8
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80048b8:	f000 f9ac 	bl	8004c14 <_svfiprintf_r>
 80048bc:	9b02      	ldr	r3, [sp, #8]
 80048be:	701c      	strb	r4, [r3, #0]
 80048c0:	b01d      	add	sp, #116	@ 0x74
 80048c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c6:	b003      	add	sp, #12
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000018 	.word	0x20000018
 80048d0:	ffff0208 	.word	0xffff0208

080048d4 <memmove>:
 80048d4:	4288      	cmp	r0, r1
 80048d6:	b510      	push	{r4, lr}
 80048d8:	eb01 0402 	add.w	r4, r1, r2
 80048dc:	d902      	bls.n	80048e4 <memmove+0x10>
 80048de:	4284      	cmp	r4, r0
 80048e0:	4623      	mov	r3, r4
 80048e2:	d807      	bhi.n	80048f4 <memmove+0x20>
 80048e4:	1e43      	subs	r3, r0, #1
 80048e6:	42a1      	cmp	r1, r4
 80048e8:	d008      	beq.n	80048fc <memmove+0x28>
 80048ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048f2:	e7f8      	b.n	80048e6 <memmove+0x12>
 80048f4:	4601      	mov	r1, r0
 80048f6:	4402      	add	r2, r0
 80048f8:	428a      	cmp	r2, r1
 80048fa:	d100      	bne.n	80048fe <memmove+0x2a>
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004906:	e7f7      	b.n	80048f8 <memmove+0x24>

08004908 <memset>:
 8004908:	4603      	mov	r3, r0
 800490a:	4402      	add	r2, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	d100      	bne.n	8004912 <memset+0xa>
 8004910:	4770      	bx	lr
 8004912:	f803 1b01 	strb.w	r1, [r3], #1
 8004916:	e7f9      	b.n	800490c <memset+0x4>

08004918 <__errno>:
 8004918:	4b01      	ldr	r3, [pc, #4]	@ (8004920 <__errno+0x8>)
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000018 	.word	0x20000018

08004924 <__libc_init_array>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	2600      	movs	r6, #0
 8004928:	4d0c      	ldr	r5, [pc, #48]	@ (800495c <__libc_init_array+0x38>)
 800492a:	4c0d      	ldr	r4, [pc, #52]	@ (8004960 <__libc_init_array+0x3c>)
 800492c:	1b64      	subs	r4, r4, r5
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	42a6      	cmp	r6, r4
 8004932:	d109      	bne.n	8004948 <__libc_init_array+0x24>
 8004934:	f000 fc5c 	bl	80051f0 <_init>
 8004938:	2600      	movs	r6, #0
 800493a:	4d0a      	ldr	r5, [pc, #40]	@ (8004964 <__libc_init_array+0x40>)
 800493c:	4c0a      	ldr	r4, [pc, #40]	@ (8004968 <__libc_init_array+0x44>)
 800493e:	1b64      	subs	r4, r4, r5
 8004940:	10a4      	asrs	r4, r4, #2
 8004942:	42a6      	cmp	r6, r4
 8004944:	d105      	bne.n	8004952 <__libc_init_array+0x2e>
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	f855 3b04 	ldr.w	r3, [r5], #4
 800494c:	4798      	blx	r3
 800494e:	3601      	adds	r6, #1
 8004950:	e7ee      	b.n	8004930 <__libc_init_array+0xc>
 8004952:	f855 3b04 	ldr.w	r3, [r5], #4
 8004956:	4798      	blx	r3
 8004958:	3601      	adds	r6, #1
 800495a:	e7f2      	b.n	8004942 <__libc_init_array+0x1e>
 800495c:	080052c8 	.word	0x080052c8
 8004960:	080052c8 	.word	0x080052c8
 8004964:	080052c8 	.word	0x080052c8
 8004968:	080052cc 	.word	0x080052cc

0800496c <__retarget_lock_acquire_recursive>:
 800496c:	4770      	bx	lr

0800496e <__retarget_lock_release_recursive>:
 800496e:	4770      	bx	lr

08004970 <_free_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4605      	mov	r5, r0
 8004974:	2900      	cmp	r1, #0
 8004976:	d040      	beq.n	80049fa <_free_r+0x8a>
 8004978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800497c:	1f0c      	subs	r4, r1, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfb8      	it	lt
 8004982:	18e4      	addlt	r4, r4, r3
 8004984:	f000 f8de 	bl	8004b44 <__malloc_lock>
 8004988:	4a1c      	ldr	r2, [pc, #112]	@ (80049fc <_free_r+0x8c>)
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	b933      	cbnz	r3, 800499c <_free_r+0x2c>
 800498e:	6063      	str	r3, [r4, #4]
 8004990:	6014      	str	r4, [r2, #0]
 8004992:	4628      	mov	r0, r5
 8004994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004998:	f000 b8da 	b.w	8004b50 <__malloc_unlock>
 800499c:	42a3      	cmp	r3, r4
 800499e:	d908      	bls.n	80049b2 <_free_r+0x42>
 80049a0:	6820      	ldr	r0, [r4, #0]
 80049a2:	1821      	adds	r1, r4, r0
 80049a4:	428b      	cmp	r3, r1
 80049a6:	bf01      	itttt	eq
 80049a8:	6819      	ldreq	r1, [r3, #0]
 80049aa:	685b      	ldreq	r3, [r3, #4]
 80049ac:	1809      	addeq	r1, r1, r0
 80049ae:	6021      	streq	r1, [r4, #0]
 80049b0:	e7ed      	b.n	800498e <_free_r+0x1e>
 80049b2:	461a      	mov	r2, r3
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	b10b      	cbz	r3, 80049bc <_free_r+0x4c>
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	d9fa      	bls.n	80049b2 <_free_r+0x42>
 80049bc:	6811      	ldr	r1, [r2, #0]
 80049be:	1850      	adds	r0, r2, r1
 80049c0:	42a0      	cmp	r0, r4
 80049c2:	d10b      	bne.n	80049dc <_free_r+0x6c>
 80049c4:	6820      	ldr	r0, [r4, #0]
 80049c6:	4401      	add	r1, r0
 80049c8:	1850      	adds	r0, r2, r1
 80049ca:	4283      	cmp	r3, r0
 80049cc:	6011      	str	r1, [r2, #0]
 80049ce:	d1e0      	bne.n	8004992 <_free_r+0x22>
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4408      	add	r0, r1
 80049d6:	6010      	str	r0, [r2, #0]
 80049d8:	6053      	str	r3, [r2, #4]
 80049da:	e7da      	b.n	8004992 <_free_r+0x22>
 80049dc:	d902      	bls.n	80049e4 <_free_r+0x74>
 80049de:	230c      	movs	r3, #12
 80049e0:	602b      	str	r3, [r5, #0]
 80049e2:	e7d6      	b.n	8004992 <_free_r+0x22>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	1821      	adds	r1, r4, r0
 80049e8:	428b      	cmp	r3, r1
 80049ea:	bf01      	itttt	eq
 80049ec:	6819      	ldreq	r1, [r3, #0]
 80049ee:	685b      	ldreq	r3, [r3, #4]
 80049f0:	1809      	addeq	r1, r1, r0
 80049f2:	6021      	streq	r1, [r4, #0]
 80049f4:	6063      	str	r3, [r4, #4]
 80049f6:	6054      	str	r4, [r2, #4]
 80049f8:	e7cb      	b.n	8004992 <_free_r+0x22>
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	200002bc 	.word	0x200002bc

08004a00 <sbrk_aligned>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	4e0f      	ldr	r6, [pc, #60]	@ (8004a40 <sbrk_aligned+0x40>)
 8004a04:	460c      	mov	r4, r1
 8004a06:	6831      	ldr	r1, [r6, #0]
 8004a08:	4605      	mov	r5, r0
 8004a0a:	b911      	cbnz	r1, 8004a12 <sbrk_aligned+0x12>
 8004a0c:	f000 fb8e 	bl	800512c <_sbrk_r>
 8004a10:	6030      	str	r0, [r6, #0]
 8004a12:	4621      	mov	r1, r4
 8004a14:	4628      	mov	r0, r5
 8004a16:	f000 fb89 	bl	800512c <_sbrk_r>
 8004a1a:	1c43      	adds	r3, r0, #1
 8004a1c:	d103      	bne.n	8004a26 <sbrk_aligned+0x26>
 8004a1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004a22:	4620      	mov	r0, r4
 8004a24:	bd70      	pop	{r4, r5, r6, pc}
 8004a26:	1cc4      	adds	r4, r0, #3
 8004a28:	f024 0403 	bic.w	r4, r4, #3
 8004a2c:	42a0      	cmp	r0, r4
 8004a2e:	d0f8      	beq.n	8004a22 <sbrk_aligned+0x22>
 8004a30:	1a21      	subs	r1, r4, r0
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 fb7a 	bl	800512c <_sbrk_r>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d1f2      	bne.n	8004a22 <sbrk_aligned+0x22>
 8004a3c:	e7ef      	b.n	8004a1e <sbrk_aligned+0x1e>
 8004a3e:	bf00      	nop
 8004a40:	200002b8 	.word	0x200002b8

08004a44 <_malloc_r>:
 8004a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a48:	1ccd      	adds	r5, r1, #3
 8004a4a:	f025 0503 	bic.w	r5, r5, #3
 8004a4e:	3508      	adds	r5, #8
 8004a50:	2d0c      	cmp	r5, #12
 8004a52:	bf38      	it	cc
 8004a54:	250c      	movcc	r5, #12
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	4606      	mov	r6, r0
 8004a5a:	db01      	blt.n	8004a60 <_malloc_r+0x1c>
 8004a5c:	42a9      	cmp	r1, r5
 8004a5e:	d904      	bls.n	8004a6a <_malloc_r+0x26>
 8004a60:	230c      	movs	r3, #12
 8004a62:	6033      	str	r3, [r6, #0]
 8004a64:	2000      	movs	r0, #0
 8004a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b40 <_malloc_r+0xfc>
 8004a6e:	f000 f869 	bl	8004b44 <__malloc_lock>
 8004a72:	f8d8 3000 	ldr.w	r3, [r8]
 8004a76:	461c      	mov	r4, r3
 8004a78:	bb44      	cbnz	r4, 8004acc <_malloc_r+0x88>
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f7ff ffbf 	bl	8004a00 <sbrk_aligned>
 8004a82:	1c43      	adds	r3, r0, #1
 8004a84:	4604      	mov	r4, r0
 8004a86:	d158      	bne.n	8004b3a <_malloc_r+0xf6>
 8004a88:	f8d8 4000 	ldr.w	r4, [r8]
 8004a8c:	4627      	mov	r7, r4
 8004a8e:	2f00      	cmp	r7, #0
 8004a90:	d143      	bne.n	8004b1a <_malloc_r+0xd6>
 8004a92:	2c00      	cmp	r4, #0
 8004a94:	d04b      	beq.n	8004b2e <_malloc_r+0xea>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	4639      	mov	r1, r7
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	eb04 0903 	add.w	r9, r4, r3
 8004aa0:	f000 fb44 	bl	800512c <_sbrk_r>
 8004aa4:	4581      	cmp	r9, r0
 8004aa6:	d142      	bne.n	8004b2e <_malloc_r+0xea>
 8004aa8:	6821      	ldr	r1, [r4, #0]
 8004aaa:	4630      	mov	r0, r6
 8004aac:	1a6d      	subs	r5, r5, r1
 8004aae:	4629      	mov	r1, r5
 8004ab0:	f7ff ffa6 	bl	8004a00 <sbrk_aligned>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d03a      	beq.n	8004b2e <_malloc_r+0xea>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	442b      	add	r3, r5
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	bb62      	cbnz	r2, 8004b20 <_malloc_r+0xdc>
 8004ac6:	f8c8 7000 	str.w	r7, [r8]
 8004aca:	e00f      	b.n	8004aec <_malloc_r+0xa8>
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	1b52      	subs	r2, r2, r5
 8004ad0:	d420      	bmi.n	8004b14 <_malloc_r+0xd0>
 8004ad2:	2a0b      	cmp	r2, #11
 8004ad4:	d917      	bls.n	8004b06 <_malloc_r+0xc2>
 8004ad6:	1961      	adds	r1, r4, r5
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	6025      	str	r5, [r4, #0]
 8004adc:	bf18      	it	ne
 8004ade:	6059      	strne	r1, [r3, #4]
 8004ae0:	6863      	ldr	r3, [r4, #4]
 8004ae2:	bf08      	it	eq
 8004ae4:	f8c8 1000 	streq.w	r1, [r8]
 8004ae8:	5162      	str	r2, [r4, r5]
 8004aea:	604b      	str	r3, [r1, #4]
 8004aec:	4630      	mov	r0, r6
 8004aee:	f000 f82f 	bl	8004b50 <__malloc_unlock>
 8004af2:	f104 000b 	add.w	r0, r4, #11
 8004af6:	1d23      	adds	r3, r4, #4
 8004af8:	f020 0007 	bic.w	r0, r0, #7
 8004afc:	1ac2      	subs	r2, r0, r3
 8004afe:	bf1c      	itt	ne
 8004b00:	1a1b      	subne	r3, r3, r0
 8004b02:	50a3      	strne	r3, [r4, r2]
 8004b04:	e7af      	b.n	8004a66 <_malloc_r+0x22>
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	bf0c      	ite	eq
 8004b0c:	f8c8 2000 	streq.w	r2, [r8]
 8004b10:	605a      	strne	r2, [r3, #4]
 8004b12:	e7eb      	b.n	8004aec <_malloc_r+0xa8>
 8004b14:	4623      	mov	r3, r4
 8004b16:	6864      	ldr	r4, [r4, #4]
 8004b18:	e7ae      	b.n	8004a78 <_malloc_r+0x34>
 8004b1a:	463c      	mov	r4, r7
 8004b1c:	687f      	ldr	r7, [r7, #4]
 8004b1e:	e7b6      	b.n	8004a8e <_malloc_r+0x4a>
 8004b20:	461a      	mov	r2, r3
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	d1fb      	bne.n	8004b20 <_malloc_r+0xdc>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6053      	str	r3, [r2, #4]
 8004b2c:	e7de      	b.n	8004aec <_malloc_r+0xa8>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	4630      	mov	r0, r6
 8004b32:	6033      	str	r3, [r6, #0]
 8004b34:	f000 f80c 	bl	8004b50 <__malloc_unlock>
 8004b38:	e794      	b.n	8004a64 <_malloc_r+0x20>
 8004b3a:	6005      	str	r5, [r0, #0]
 8004b3c:	e7d6      	b.n	8004aec <_malloc_r+0xa8>
 8004b3e:	bf00      	nop
 8004b40:	200002bc 	.word	0x200002bc

08004b44 <__malloc_lock>:
 8004b44:	4801      	ldr	r0, [pc, #4]	@ (8004b4c <__malloc_lock+0x8>)
 8004b46:	f7ff bf11 	b.w	800496c <__retarget_lock_acquire_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	200002b4 	.word	0x200002b4

08004b50 <__malloc_unlock>:
 8004b50:	4801      	ldr	r0, [pc, #4]	@ (8004b58 <__malloc_unlock+0x8>)
 8004b52:	f7ff bf0c 	b.w	800496e <__retarget_lock_release_recursive>
 8004b56:	bf00      	nop
 8004b58:	200002b4 	.word	0x200002b4

08004b5c <__ssputs_r>:
 8004b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	461f      	mov	r7, r3
 8004b62:	688e      	ldr	r6, [r1, #8]
 8004b64:	4682      	mov	sl, r0
 8004b66:	42be      	cmp	r6, r7
 8004b68:	460c      	mov	r4, r1
 8004b6a:	4690      	mov	r8, r2
 8004b6c:	680b      	ldr	r3, [r1, #0]
 8004b6e:	d82d      	bhi.n	8004bcc <__ssputs_r+0x70>
 8004b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b78:	d026      	beq.n	8004bc8 <__ssputs_r+0x6c>
 8004b7a:	6965      	ldr	r5, [r4, #20]
 8004b7c:	6909      	ldr	r1, [r1, #16]
 8004b7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b82:	eba3 0901 	sub.w	r9, r3, r1
 8004b86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b8a:	1c7b      	adds	r3, r7, #1
 8004b8c:	444b      	add	r3, r9
 8004b8e:	106d      	asrs	r5, r5, #1
 8004b90:	429d      	cmp	r5, r3
 8004b92:	bf38      	it	cc
 8004b94:	461d      	movcc	r5, r3
 8004b96:	0553      	lsls	r3, r2, #21
 8004b98:	d527      	bpl.n	8004bea <__ssputs_r+0x8e>
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	f7ff ff52 	bl	8004a44 <_malloc_r>
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	b360      	cbz	r0, 8004bfe <__ssputs_r+0xa2>
 8004ba4:	464a      	mov	r2, r9
 8004ba6:	6921      	ldr	r1, [r4, #16]
 8004ba8:	f000 fade 	bl	8005168 <memcpy>
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb6:	81a3      	strh	r3, [r4, #12]
 8004bb8:	6126      	str	r6, [r4, #16]
 8004bba:	444e      	add	r6, r9
 8004bbc:	6026      	str	r6, [r4, #0]
 8004bbe:	463e      	mov	r6, r7
 8004bc0:	6165      	str	r5, [r4, #20]
 8004bc2:	eba5 0509 	sub.w	r5, r5, r9
 8004bc6:	60a5      	str	r5, [r4, #8]
 8004bc8:	42be      	cmp	r6, r7
 8004bca:	d900      	bls.n	8004bce <__ssputs_r+0x72>
 8004bcc:	463e      	mov	r6, r7
 8004bce:	4632      	mov	r2, r6
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	6820      	ldr	r0, [r4, #0]
 8004bd4:	f7ff fe7e 	bl	80048d4 <memmove>
 8004bd8:	2000      	movs	r0, #0
 8004bda:	68a3      	ldr	r3, [r4, #8]
 8004bdc:	1b9b      	subs	r3, r3, r6
 8004bde:	60a3      	str	r3, [r4, #8]
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	4433      	add	r3, r6
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bea:	462a      	mov	r2, r5
 8004bec:	f000 faca 	bl	8005184 <_realloc_r>
 8004bf0:	4606      	mov	r6, r0
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d1e0      	bne.n	8004bb8 <__ssputs_r+0x5c>
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	6921      	ldr	r1, [r4, #16]
 8004bfa:	f7ff feb9 	bl	8004970 <_free_r>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	f8ca 3000 	str.w	r3, [sl]
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	e7e9      	b.n	8004be6 <__ssputs_r+0x8a>
	...

08004c14 <_svfiprintf_r>:
 8004c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	4698      	mov	r8, r3
 8004c1a:	898b      	ldrh	r3, [r1, #12]
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	460d      	mov	r5, r1
 8004c22:	4614      	mov	r4, r2
 8004c24:	b09d      	sub	sp, #116	@ 0x74
 8004c26:	d510      	bpl.n	8004c4a <_svfiprintf_r+0x36>
 8004c28:	690b      	ldr	r3, [r1, #16]
 8004c2a:	b973      	cbnz	r3, 8004c4a <_svfiprintf_r+0x36>
 8004c2c:	2140      	movs	r1, #64	@ 0x40
 8004c2e:	f7ff ff09 	bl	8004a44 <_malloc_r>
 8004c32:	6028      	str	r0, [r5, #0]
 8004c34:	6128      	str	r0, [r5, #16]
 8004c36:	b930      	cbnz	r0, 8004c46 <_svfiprintf_r+0x32>
 8004c38:	230c      	movs	r3, #12
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	b01d      	add	sp, #116	@ 0x74
 8004c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c46:	2340      	movs	r3, #64	@ 0x40
 8004c48:	616b      	str	r3, [r5, #20]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c4e:	2320      	movs	r3, #32
 8004c50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c54:	2330      	movs	r3, #48	@ 0x30
 8004c56:	f04f 0901 	mov.w	r9, #1
 8004c5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004df8 <_svfiprintf_r+0x1e4>
 8004c62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c66:	4623      	mov	r3, r4
 8004c68:	469a      	mov	sl, r3
 8004c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c6e:	b10a      	cbz	r2, 8004c74 <_svfiprintf_r+0x60>
 8004c70:	2a25      	cmp	r2, #37	@ 0x25
 8004c72:	d1f9      	bne.n	8004c68 <_svfiprintf_r+0x54>
 8004c74:	ebba 0b04 	subs.w	fp, sl, r4
 8004c78:	d00b      	beq.n	8004c92 <_svfiprintf_r+0x7e>
 8004c7a:	465b      	mov	r3, fp
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	4638      	mov	r0, r7
 8004c82:	f7ff ff6b 	bl	8004b5c <__ssputs_r>
 8004c86:	3001      	adds	r0, #1
 8004c88:	f000 80a7 	beq.w	8004dda <_svfiprintf_r+0x1c6>
 8004c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c8e:	445a      	add	r2, fp
 8004c90:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c92:	f89a 3000 	ldrb.w	r3, [sl]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 809f 	beq.w	8004dda <_svfiprintf_r+0x1c6>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ca6:	f10a 0a01 	add.w	sl, sl, #1
 8004caa:	9304      	str	r3, [sp, #16]
 8004cac:	9307      	str	r3, [sp, #28]
 8004cae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cb4:	4654      	mov	r4, sl
 8004cb6:	2205      	movs	r2, #5
 8004cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cbc:	484e      	ldr	r0, [pc, #312]	@ (8004df8 <_svfiprintf_r+0x1e4>)
 8004cbe:	f000 fa45 	bl	800514c <memchr>
 8004cc2:	9a04      	ldr	r2, [sp, #16]
 8004cc4:	b9d8      	cbnz	r0, 8004cfe <_svfiprintf_r+0xea>
 8004cc6:	06d0      	lsls	r0, r2, #27
 8004cc8:	bf44      	itt	mi
 8004cca:	2320      	movmi	r3, #32
 8004ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cd0:	0711      	lsls	r1, r2, #28
 8004cd2:	bf44      	itt	mi
 8004cd4:	232b      	movmi	r3, #43	@ 0x2b
 8004cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cda:	f89a 3000 	ldrb.w	r3, [sl]
 8004cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce0:	d015      	beq.n	8004d0e <_svfiprintf_r+0xfa>
 8004ce2:	4654      	mov	r4, sl
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f04f 0c0a 	mov.w	ip, #10
 8004cea:	9a07      	ldr	r2, [sp, #28]
 8004cec:	4621      	mov	r1, r4
 8004cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cf2:	3b30      	subs	r3, #48	@ 0x30
 8004cf4:	2b09      	cmp	r3, #9
 8004cf6:	d94b      	bls.n	8004d90 <_svfiprintf_r+0x17c>
 8004cf8:	b1b0      	cbz	r0, 8004d28 <_svfiprintf_r+0x114>
 8004cfa:	9207      	str	r2, [sp, #28]
 8004cfc:	e014      	b.n	8004d28 <_svfiprintf_r+0x114>
 8004cfe:	eba0 0308 	sub.w	r3, r0, r8
 8004d02:	fa09 f303 	lsl.w	r3, r9, r3
 8004d06:	4313      	orrs	r3, r2
 8004d08:	46a2      	mov	sl, r4
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	e7d2      	b.n	8004cb4 <_svfiprintf_r+0xa0>
 8004d0e:	9b03      	ldr	r3, [sp, #12]
 8004d10:	1d19      	adds	r1, r3, #4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	9103      	str	r1, [sp, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bfbb      	ittet	lt
 8004d1a:	425b      	neglt	r3, r3
 8004d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004d20:	9307      	strge	r3, [sp, #28]
 8004d22:	9307      	strlt	r3, [sp, #28]
 8004d24:	bfb8      	it	lt
 8004d26:	9204      	strlt	r2, [sp, #16]
 8004d28:	7823      	ldrb	r3, [r4, #0]
 8004d2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d2c:	d10a      	bne.n	8004d44 <_svfiprintf_r+0x130>
 8004d2e:	7863      	ldrb	r3, [r4, #1]
 8004d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d32:	d132      	bne.n	8004d9a <_svfiprintf_r+0x186>
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	3402      	adds	r4, #2
 8004d38:	1d1a      	adds	r2, r3, #4
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	9203      	str	r2, [sp, #12]
 8004d3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004dfc <_svfiprintf_r+0x1e8>
 8004d48:	2203      	movs	r2, #3
 8004d4a:	4650      	mov	r0, sl
 8004d4c:	7821      	ldrb	r1, [r4, #0]
 8004d4e:	f000 f9fd 	bl	800514c <memchr>
 8004d52:	b138      	cbz	r0, 8004d64 <_svfiprintf_r+0x150>
 8004d54:	2240      	movs	r2, #64	@ 0x40
 8004d56:	9b04      	ldr	r3, [sp, #16]
 8004d58:	eba0 000a 	sub.w	r0, r0, sl
 8004d5c:	4082      	lsls	r2, r0
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	3401      	adds	r4, #1
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d68:	2206      	movs	r2, #6
 8004d6a:	4825      	ldr	r0, [pc, #148]	@ (8004e00 <_svfiprintf_r+0x1ec>)
 8004d6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d70:	f000 f9ec 	bl	800514c <memchr>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d036      	beq.n	8004de6 <_svfiprintf_r+0x1d2>
 8004d78:	4b22      	ldr	r3, [pc, #136]	@ (8004e04 <_svfiprintf_r+0x1f0>)
 8004d7a:	bb1b      	cbnz	r3, 8004dc4 <_svfiprintf_r+0x1b0>
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	3307      	adds	r3, #7
 8004d80:	f023 0307 	bic.w	r3, r3, #7
 8004d84:	3308      	adds	r3, #8
 8004d86:	9303      	str	r3, [sp, #12]
 8004d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d8a:	4433      	add	r3, r6
 8004d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d8e:	e76a      	b.n	8004c66 <_svfiprintf_r+0x52>
 8004d90:	460c      	mov	r4, r1
 8004d92:	2001      	movs	r0, #1
 8004d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d98:	e7a8      	b.n	8004cec <_svfiprintf_r+0xd8>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f04f 0c0a 	mov.w	ip, #10
 8004da0:	4619      	mov	r1, r3
 8004da2:	3401      	adds	r4, #1
 8004da4:	9305      	str	r3, [sp, #20]
 8004da6:	4620      	mov	r0, r4
 8004da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dac:	3a30      	subs	r2, #48	@ 0x30
 8004dae:	2a09      	cmp	r2, #9
 8004db0:	d903      	bls.n	8004dba <_svfiprintf_r+0x1a6>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0c6      	beq.n	8004d44 <_svfiprintf_r+0x130>
 8004db6:	9105      	str	r1, [sp, #20]
 8004db8:	e7c4      	b.n	8004d44 <_svfiprintf_r+0x130>
 8004dba:	4604      	mov	r4, r0
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dc2:	e7f0      	b.n	8004da6 <_svfiprintf_r+0x192>
 8004dc4:	ab03      	add	r3, sp, #12
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4638      	mov	r0, r7
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <_svfiprintf_r+0x1f4>)
 8004dce:	a904      	add	r1, sp, #16
 8004dd0:	f3af 8000 	nop.w
 8004dd4:	1c42      	adds	r2, r0, #1
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	d1d6      	bne.n	8004d88 <_svfiprintf_r+0x174>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	065b      	lsls	r3, r3, #25
 8004dde:	f53f af2d 	bmi.w	8004c3c <_svfiprintf_r+0x28>
 8004de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004de4:	e72c      	b.n	8004c40 <_svfiprintf_r+0x2c>
 8004de6:	ab03      	add	r3, sp, #12
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	462a      	mov	r2, r5
 8004dec:	4638      	mov	r0, r7
 8004dee:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <_svfiprintf_r+0x1f4>)
 8004df0:	a904      	add	r1, sp, #16
 8004df2:	f000 f87d 	bl	8004ef0 <_printf_i>
 8004df6:	e7ed      	b.n	8004dd4 <_svfiprintf_r+0x1c0>
 8004df8:	0800528a 	.word	0x0800528a
 8004dfc:	08005290 	.word	0x08005290
 8004e00:	08005294 	.word	0x08005294
 8004e04:	00000000 	.word	0x00000000
 8004e08:	08004b5d 	.word	0x08004b5d

08004e0c <_printf_common>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	4616      	mov	r6, r2
 8004e12:	4698      	mov	r8, r3
 8004e14:	688a      	ldr	r2, [r1, #8]
 8004e16:	690b      	ldr	r3, [r1, #16]
 8004e18:	4607      	mov	r7, r0
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	bfb8      	it	lt
 8004e1e:	4613      	movlt	r3, r2
 8004e20:	6033      	str	r3, [r6, #0]
 8004e22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e26:	460c      	mov	r4, r1
 8004e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e2c:	b10a      	cbz	r2, 8004e32 <_printf_common+0x26>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	0699      	lsls	r1, r3, #26
 8004e36:	bf42      	ittt	mi
 8004e38:	6833      	ldrmi	r3, [r6, #0]
 8004e3a:	3302      	addmi	r3, #2
 8004e3c:	6033      	strmi	r3, [r6, #0]
 8004e3e:	6825      	ldr	r5, [r4, #0]
 8004e40:	f015 0506 	ands.w	r5, r5, #6
 8004e44:	d106      	bne.n	8004e54 <_printf_common+0x48>
 8004e46:	f104 0a19 	add.w	sl, r4, #25
 8004e4a:	68e3      	ldr	r3, [r4, #12]
 8004e4c:	6832      	ldr	r2, [r6, #0]
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	dc2b      	bgt.n	8004eac <_printf_common+0xa0>
 8004e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	3b00      	subs	r3, #0
 8004e5c:	bf18      	it	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	0692      	lsls	r2, r2, #26
 8004e62:	d430      	bmi.n	8004ec6 <_printf_common+0xba>
 8004e64:	4641      	mov	r1, r8
 8004e66:	4638      	mov	r0, r7
 8004e68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e6c:	47c8      	blx	r9
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d023      	beq.n	8004eba <_printf_common+0xae>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	6922      	ldr	r2, [r4, #16]
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf14      	ite	ne
 8004e7e:	2500      	movne	r5, #0
 8004e80:	6833      	ldreq	r3, [r6, #0]
 8004e82:	f04f 0600 	mov.w	r6, #0
 8004e86:	bf08      	it	eq
 8004e88:	68e5      	ldreq	r5, [r4, #12]
 8004e8a:	f104 041a 	add.w	r4, r4, #26
 8004e8e:	bf08      	it	eq
 8004e90:	1aed      	subeq	r5, r5, r3
 8004e92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e96:	bf08      	it	eq
 8004e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	bfc4      	itt	gt
 8004ea0:	1a9b      	subgt	r3, r3, r2
 8004ea2:	18ed      	addgt	r5, r5, r3
 8004ea4:	42b5      	cmp	r5, r6
 8004ea6:	d11a      	bne.n	8004ede <_printf_common+0xd2>
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	e008      	b.n	8004ebe <_printf_common+0xb2>
 8004eac:	2301      	movs	r3, #1
 8004eae:	4652      	mov	r2, sl
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	47c8      	blx	r9
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d103      	bne.n	8004ec2 <_printf_common+0xb6>
 8004eba:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec2:	3501      	adds	r5, #1
 8004ec4:	e7c1      	b.n	8004e4a <_printf_common+0x3e>
 8004ec6:	2030      	movs	r0, #48	@ 0x30
 8004ec8:	18e1      	adds	r1, r4, r3
 8004eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ed4:	4422      	add	r2, r4
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004edc:	e7c2      	b.n	8004e64 <_printf_common+0x58>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	47c8      	blx	r9
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d0e6      	beq.n	8004eba <_printf_common+0xae>
 8004eec:	3601      	adds	r6, #1
 8004eee:	e7d9      	b.n	8004ea4 <_printf_common+0x98>

08004ef0 <_printf_i>:
 8004ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef4:	7e0f      	ldrb	r7, [r1, #24]
 8004ef6:	4691      	mov	r9, r2
 8004ef8:	2f78      	cmp	r7, #120	@ 0x78
 8004efa:	4680      	mov	r8, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	469a      	mov	sl, r3
 8004f00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f06:	d807      	bhi.n	8004f18 <_printf_i+0x28>
 8004f08:	2f62      	cmp	r7, #98	@ 0x62
 8004f0a:	d80a      	bhi.n	8004f22 <_printf_i+0x32>
 8004f0c:	2f00      	cmp	r7, #0
 8004f0e:	f000 80d1 	beq.w	80050b4 <_printf_i+0x1c4>
 8004f12:	2f58      	cmp	r7, #88	@ 0x58
 8004f14:	f000 80b8 	beq.w	8005088 <_printf_i+0x198>
 8004f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f20:	e03a      	b.n	8004f98 <_printf_i+0xa8>
 8004f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f26:	2b15      	cmp	r3, #21
 8004f28:	d8f6      	bhi.n	8004f18 <_printf_i+0x28>
 8004f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f30 <_printf_i+0x40>)
 8004f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	08004f9d 	.word	0x08004f9d
 8004f38:	08004f19 	.word	0x08004f19
 8004f3c:	08004f19 	.word	0x08004f19
 8004f40:	08004f19 	.word	0x08004f19
 8004f44:	08004f19 	.word	0x08004f19
 8004f48:	08004f9d 	.word	0x08004f9d
 8004f4c:	08004f19 	.word	0x08004f19
 8004f50:	08004f19 	.word	0x08004f19
 8004f54:	08004f19 	.word	0x08004f19
 8004f58:	08004f19 	.word	0x08004f19
 8004f5c:	0800509b 	.word	0x0800509b
 8004f60:	08004fc7 	.word	0x08004fc7
 8004f64:	08005055 	.word	0x08005055
 8004f68:	08004f19 	.word	0x08004f19
 8004f6c:	08004f19 	.word	0x08004f19
 8004f70:	080050bd 	.word	0x080050bd
 8004f74:	08004f19 	.word	0x08004f19
 8004f78:	08004fc7 	.word	0x08004fc7
 8004f7c:	08004f19 	.word	0x08004f19
 8004f80:	08004f19 	.word	0x08004f19
 8004f84:	0800505d 	.word	0x0800505d
 8004f88:	6833      	ldr	r3, [r6, #0]
 8004f8a:	1d1a      	adds	r2, r3, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6032      	str	r2, [r6, #0]
 8004f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e09c      	b.n	80050d6 <_printf_i+0x1e6>
 8004f9c:	6833      	ldr	r3, [r6, #0]
 8004f9e:	6820      	ldr	r0, [r4, #0]
 8004fa0:	1d19      	adds	r1, r3, #4
 8004fa2:	6031      	str	r1, [r6, #0]
 8004fa4:	0606      	lsls	r6, r0, #24
 8004fa6:	d501      	bpl.n	8004fac <_printf_i+0xbc>
 8004fa8:	681d      	ldr	r5, [r3, #0]
 8004faa:	e003      	b.n	8004fb4 <_printf_i+0xc4>
 8004fac:	0645      	lsls	r5, r0, #25
 8004fae:	d5fb      	bpl.n	8004fa8 <_printf_i+0xb8>
 8004fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	da03      	bge.n	8004fc0 <_printf_i+0xd0>
 8004fb8:	232d      	movs	r3, #45	@ 0x2d
 8004fba:	426d      	negs	r5, r5
 8004fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fc0:	230a      	movs	r3, #10
 8004fc2:	4858      	ldr	r0, [pc, #352]	@ (8005124 <_printf_i+0x234>)
 8004fc4:	e011      	b.n	8004fea <_printf_i+0xfa>
 8004fc6:	6821      	ldr	r1, [r4, #0]
 8004fc8:	6833      	ldr	r3, [r6, #0]
 8004fca:	0608      	lsls	r0, r1, #24
 8004fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fd0:	d402      	bmi.n	8004fd8 <_printf_i+0xe8>
 8004fd2:	0649      	lsls	r1, r1, #25
 8004fd4:	bf48      	it	mi
 8004fd6:	b2ad      	uxthmi	r5, r5
 8004fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fda:	6033      	str	r3, [r6, #0]
 8004fdc:	bf14      	ite	ne
 8004fde:	230a      	movne	r3, #10
 8004fe0:	2308      	moveq	r3, #8
 8004fe2:	4850      	ldr	r0, [pc, #320]	@ (8005124 <_printf_i+0x234>)
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fea:	6866      	ldr	r6, [r4, #4]
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	60a6      	str	r6, [r4, #8]
 8004ff0:	db05      	blt.n	8004ffe <_printf_i+0x10e>
 8004ff2:	6821      	ldr	r1, [r4, #0]
 8004ff4:	432e      	orrs	r6, r5
 8004ff6:	f021 0104 	bic.w	r1, r1, #4
 8004ffa:	6021      	str	r1, [r4, #0]
 8004ffc:	d04b      	beq.n	8005096 <_printf_i+0x1a6>
 8004ffe:	4616      	mov	r6, r2
 8005000:	fbb5 f1f3 	udiv	r1, r5, r3
 8005004:	fb03 5711 	mls	r7, r3, r1, r5
 8005008:	5dc7      	ldrb	r7, [r0, r7]
 800500a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800500e:	462f      	mov	r7, r5
 8005010:	42bb      	cmp	r3, r7
 8005012:	460d      	mov	r5, r1
 8005014:	d9f4      	bls.n	8005000 <_printf_i+0x110>
 8005016:	2b08      	cmp	r3, #8
 8005018:	d10b      	bne.n	8005032 <_printf_i+0x142>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	07df      	lsls	r7, r3, #31
 800501e:	d508      	bpl.n	8005032 <_printf_i+0x142>
 8005020:	6923      	ldr	r3, [r4, #16]
 8005022:	6861      	ldr	r1, [r4, #4]
 8005024:	4299      	cmp	r1, r3
 8005026:	bfde      	ittt	le
 8005028:	2330      	movle	r3, #48	@ 0x30
 800502a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800502e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005032:	1b92      	subs	r2, r2, r6
 8005034:	6122      	str	r2, [r4, #16]
 8005036:	464b      	mov	r3, r9
 8005038:	4621      	mov	r1, r4
 800503a:	4640      	mov	r0, r8
 800503c:	f8cd a000 	str.w	sl, [sp]
 8005040:	aa03      	add	r2, sp, #12
 8005042:	f7ff fee3 	bl	8004e0c <_printf_common>
 8005046:	3001      	adds	r0, #1
 8005048:	d14a      	bne.n	80050e0 <_printf_i+0x1f0>
 800504a:	f04f 30ff 	mov.w	r0, #4294967295
 800504e:	b004      	add	sp, #16
 8005050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	f043 0320 	orr.w	r3, r3, #32
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	2778      	movs	r7, #120	@ 0x78
 800505e:	4832      	ldr	r0, [pc, #200]	@ (8005128 <_printf_i+0x238>)
 8005060:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	6831      	ldr	r1, [r6, #0]
 8005068:	061f      	lsls	r7, r3, #24
 800506a:	f851 5b04 	ldr.w	r5, [r1], #4
 800506e:	d402      	bmi.n	8005076 <_printf_i+0x186>
 8005070:	065f      	lsls	r7, r3, #25
 8005072:	bf48      	it	mi
 8005074:	b2ad      	uxthmi	r5, r5
 8005076:	6031      	str	r1, [r6, #0]
 8005078:	07d9      	lsls	r1, r3, #31
 800507a:	bf44      	itt	mi
 800507c:	f043 0320 	orrmi.w	r3, r3, #32
 8005080:	6023      	strmi	r3, [r4, #0]
 8005082:	b11d      	cbz	r5, 800508c <_printf_i+0x19c>
 8005084:	2310      	movs	r3, #16
 8005086:	e7ad      	b.n	8004fe4 <_printf_i+0xf4>
 8005088:	4826      	ldr	r0, [pc, #152]	@ (8005124 <_printf_i+0x234>)
 800508a:	e7e9      	b.n	8005060 <_printf_i+0x170>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	f023 0320 	bic.w	r3, r3, #32
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	e7f6      	b.n	8005084 <_printf_i+0x194>
 8005096:	4616      	mov	r6, r2
 8005098:	e7bd      	b.n	8005016 <_printf_i+0x126>
 800509a:	6833      	ldr	r3, [r6, #0]
 800509c:	6825      	ldr	r5, [r4, #0]
 800509e:	1d18      	adds	r0, r3, #4
 80050a0:	6961      	ldr	r1, [r4, #20]
 80050a2:	6030      	str	r0, [r6, #0]
 80050a4:	062e      	lsls	r6, r5, #24
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	d501      	bpl.n	80050ae <_printf_i+0x1be>
 80050aa:	6019      	str	r1, [r3, #0]
 80050ac:	e002      	b.n	80050b4 <_printf_i+0x1c4>
 80050ae:	0668      	lsls	r0, r5, #25
 80050b0:	d5fb      	bpl.n	80050aa <_printf_i+0x1ba>
 80050b2:	8019      	strh	r1, [r3, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	4616      	mov	r6, r2
 80050b8:	6123      	str	r3, [r4, #16]
 80050ba:	e7bc      	b.n	8005036 <_printf_i+0x146>
 80050bc:	6833      	ldr	r3, [r6, #0]
 80050be:	2100      	movs	r1, #0
 80050c0:	1d1a      	adds	r2, r3, #4
 80050c2:	6032      	str	r2, [r6, #0]
 80050c4:	681e      	ldr	r6, [r3, #0]
 80050c6:	6862      	ldr	r2, [r4, #4]
 80050c8:	4630      	mov	r0, r6
 80050ca:	f000 f83f 	bl	800514c <memchr>
 80050ce:	b108      	cbz	r0, 80050d4 <_printf_i+0x1e4>
 80050d0:	1b80      	subs	r0, r0, r6
 80050d2:	6060      	str	r0, [r4, #4]
 80050d4:	6863      	ldr	r3, [r4, #4]
 80050d6:	6123      	str	r3, [r4, #16]
 80050d8:	2300      	movs	r3, #0
 80050da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050de:	e7aa      	b.n	8005036 <_printf_i+0x146>
 80050e0:	4632      	mov	r2, r6
 80050e2:	4649      	mov	r1, r9
 80050e4:	4640      	mov	r0, r8
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	47d0      	blx	sl
 80050ea:	3001      	adds	r0, #1
 80050ec:	d0ad      	beq.n	800504a <_printf_i+0x15a>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	079b      	lsls	r3, r3, #30
 80050f2:	d413      	bmi.n	800511c <_printf_i+0x22c>
 80050f4:	68e0      	ldr	r0, [r4, #12]
 80050f6:	9b03      	ldr	r3, [sp, #12]
 80050f8:	4298      	cmp	r0, r3
 80050fa:	bfb8      	it	lt
 80050fc:	4618      	movlt	r0, r3
 80050fe:	e7a6      	b.n	800504e <_printf_i+0x15e>
 8005100:	2301      	movs	r3, #1
 8005102:	4632      	mov	r2, r6
 8005104:	4649      	mov	r1, r9
 8005106:	4640      	mov	r0, r8
 8005108:	47d0      	blx	sl
 800510a:	3001      	adds	r0, #1
 800510c:	d09d      	beq.n	800504a <_printf_i+0x15a>
 800510e:	3501      	adds	r5, #1
 8005110:	68e3      	ldr	r3, [r4, #12]
 8005112:	9903      	ldr	r1, [sp, #12]
 8005114:	1a5b      	subs	r3, r3, r1
 8005116:	42ab      	cmp	r3, r5
 8005118:	dcf2      	bgt.n	8005100 <_printf_i+0x210>
 800511a:	e7eb      	b.n	80050f4 <_printf_i+0x204>
 800511c:	2500      	movs	r5, #0
 800511e:	f104 0619 	add.w	r6, r4, #25
 8005122:	e7f5      	b.n	8005110 <_printf_i+0x220>
 8005124:	0800529b 	.word	0x0800529b
 8005128:	080052ac 	.word	0x080052ac

0800512c <_sbrk_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	2300      	movs	r3, #0
 8005130:	4d05      	ldr	r5, [pc, #20]	@ (8005148 <_sbrk_r+0x1c>)
 8005132:	4604      	mov	r4, r0
 8005134:	4608      	mov	r0, r1
 8005136:	602b      	str	r3, [r5, #0]
 8005138:	f7fc fa48 	bl	80015cc <_sbrk>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_sbrk_r+0x1a>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_sbrk_r+0x1a>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	200002b0 	.word	0x200002b0

0800514c <memchr>:
 800514c:	4603      	mov	r3, r0
 800514e:	b510      	push	{r4, lr}
 8005150:	b2c9      	uxtb	r1, r1
 8005152:	4402      	add	r2, r0
 8005154:	4293      	cmp	r3, r2
 8005156:	4618      	mov	r0, r3
 8005158:	d101      	bne.n	800515e <memchr+0x12>
 800515a:	2000      	movs	r0, #0
 800515c:	e003      	b.n	8005166 <memchr+0x1a>
 800515e:	7804      	ldrb	r4, [r0, #0]
 8005160:	3301      	adds	r3, #1
 8005162:	428c      	cmp	r4, r1
 8005164:	d1f6      	bne.n	8005154 <memchr+0x8>
 8005166:	bd10      	pop	{r4, pc}

08005168 <memcpy>:
 8005168:	440a      	add	r2, r1
 800516a:	4291      	cmp	r1, r2
 800516c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005170:	d100      	bne.n	8005174 <memcpy+0xc>
 8005172:	4770      	bx	lr
 8005174:	b510      	push	{r4, lr}
 8005176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800517a:	4291      	cmp	r1, r2
 800517c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005180:	d1f9      	bne.n	8005176 <memcpy+0xe>
 8005182:	bd10      	pop	{r4, pc}

08005184 <_realloc_r>:
 8005184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005188:	4607      	mov	r7, r0
 800518a:	4614      	mov	r4, r2
 800518c:	460d      	mov	r5, r1
 800518e:	b921      	cbnz	r1, 800519a <_realloc_r+0x16>
 8005190:	4611      	mov	r1, r2
 8005192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	f7ff bc55 	b.w	8004a44 <_malloc_r>
 800519a:	b92a      	cbnz	r2, 80051a8 <_realloc_r+0x24>
 800519c:	f7ff fbe8 	bl	8004970 <_free_r>
 80051a0:	4625      	mov	r5, r4
 80051a2:	4628      	mov	r0, r5
 80051a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a8:	f000 f81a 	bl	80051e0 <_malloc_usable_size_r>
 80051ac:	4284      	cmp	r4, r0
 80051ae:	4606      	mov	r6, r0
 80051b0:	d802      	bhi.n	80051b8 <_realloc_r+0x34>
 80051b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051b6:	d8f4      	bhi.n	80051a2 <_realloc_r+0x1e>
 80051b8:	4621      	mov	r1, r4
 80051ba:	4638      	mov	r0, r7
 80051bc:	f7ff fc42 	bl	8004a44 <_malloc_r>
 80051c0:	4680      	mov	r8, r0
 80051c2:	b908      	cbnz	r0, 80051c8 <_realloc_r+0x44>
 80051c4:	4645      	mov	r5, r8
 80051c6:	e7ec      	b.n	80051a2 <_realloc_r+0x1e>
 80051c8:	42b4      	cmp	r4, r6
 80051ca:	4622      	mov	r2, r4
 80051cc:	4629      	mov	r1, r5
 80051ce:	bf28      	it	cs
 80051d0:	4632      	movcs	r2, r6
 80051d2:	f7ff ffc9 	bl	8005168 <memcpy>
 80051d6:	4629      	mov	r1, r5
 80051d8:	4638      	mov	r0, r7
 80051da:	f7ff fbc9 	bl	8004970 <_free_r>
 80051de:	e7f1      	b.n	80051c4 <_realloc_r+0x40>

080051e0 <_malloc_usable_size_r>:
 80051e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e4:	1f18      	subs	r0, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bfbc      	itt	lt
 80051ea:	580b      	ldrlt	r3, [r1, r0]
 80051ec:	18c0      	addlt	r0, r0, r3
 80051ee:	4770      	bx	lr

080051f0 <_init>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	bf00      	nop
 80051f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f6:	bc08      	pop	{r3}
 80051f8:	469e      	mov	lr, r3
 80051fa:	4770      	bx	lr

080051fc <_fini>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr
