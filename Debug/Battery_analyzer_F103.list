
Battery_analyzer_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006b00  08006b00  00007b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c3c  08006c3c  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c3c  08006c3c  00007c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c44  08006c44  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c44  08006c44  00007c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006c4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000068  08006cb4  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  20000448  08006cb4  00008448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c46d  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002742  00000000  00000000  000144fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00016c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c0  00000000  00000000  00017900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c90  00000000  00000000  000182c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010414  00000000  00000000  00030f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de43  00000000  00000000  00041364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf1a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  000cf1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d2bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ae8 	.word	0x08006ae8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006ae8 	.word	0x08006ae8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	@ 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	@ 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	@ 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__aeabi_f2uiz>:
 8000e98:	0042      	lsls	r2, r0, #1
 8000e9a:	d20e      	bcs.n	8000eba <__aeabi_f2uiz+0x22>
 8000e9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ea0:	d30b      	bcc.n	8000eba <__aeabi_f2uiz+0x22>
 8000ea2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ea6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eaa:	d409      	bmi.n	8000ec0 <__aeabi_f2uiz+0x28>
 8000eac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000eb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb8:	4770      	bx	lr
 8000eba:	f04f 0000 	mov.w	r0, #0
 8000ebe:	4770      	bx	lr
 8000ec0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ec4:	d101      	bne.n	8000eca <__aeabi_f2uiz+0x32>
 8000ec6:	0242      	lsls	r2, r0, #9
 8000ec8:	d102      	bne.n	8000ed0 <__aeabi_f2uiz+0x38>
 8000eca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ece:	4770      	bx	lr
 8000ed0:	f04f 0000 	mov.w	r0, #0
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000efc:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000efe:	4a2f      	ldr	r2, [pc, #188]	@ (8000fbc <MX_ADC1_Init+0xe4>)
 8000f00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f10:	4b29      	ldr	r3, [pc, #164]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2a:	4823      	ldr	r0, [pc, #140]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f2c:	f001 fca2 	bl	8002874 <HAL_ADC_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8000f36:	f001 f989 	bl	800224c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000f42:	2303      	movs	r3, #3
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481a      	ldr	r0, [pc, #104]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f4e:	f001 ff65 	bl	8002e1c <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8000f58:	f001 f978 	bl	800224c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4813      	ldr	r0, [pc, #76]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f6c:	f001 ff56 	bl	8002e1c <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8000f76:	f001 f969 	bl	800224c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 8000f7a:	2311      	movs	r3, #17
 8000f7c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000f86:	2306      	movs	r3, #6
 8000f88:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f8a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000f8e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000fa2:	f002 fb99 	bl	80036d8 <HAL_ADCEx_InjectedConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000fac:	f001 f94e 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	@ 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000084 	.word	0x20000084
 8000fbc:	40012400 	.word	0x40012400

08000fc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2c      	ldr	r2, [pc, #176]	@ (800108c <HAL_ADC_MspInit+0xcc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d151      	bne.n	8001084 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a24      	ldr	r2, [pc, #144]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001010:	2303      	movs	r3, #3
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001014:	2303      	movs	r3, #3
 8001016:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	481d      	ldr	r0, [pc, #116]	@ (8001094 <HAL_ADC_MspInit+0xd4>)
 8001020:	f003 f82c 	bl	800407c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001026:	4a1d      	ldr	r2, [pc, #116]	@ (800109c <HAL_ADC_MspInit+0xdc>)
 8001028:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103c:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800103e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001042:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800104a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800104e:	2220      	movs	r2, #32
 8001050:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001058:	480f      	ldr	r0, [pc, #60]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800105a:	f002 fde5 	bl	8003c28 <HAL_DMA_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001064:	f001 f8f2 	bl	800224c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800106c:	621a      	str	r2, [r3, #32]
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	2012      	movs	r0, #18
 800107a:	f002 fd9e 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800107e:	2012      	movs	r0, #18
 8001080:	f002 fdb7 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40012400 	.word	0x40012400
 8001090:	40021000 	.word	0x40021000
 8001094:	40010800 	.word	0x40010800
 8001098:	200000b4 	.word	0x200000b4
 800109c:	40020008 	.word	0x40020008

080010a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_DMA_Init+0x38>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <MX_DMA_Init+0x38>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_DMA_Init+0x38>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200b      	movs	r0, #11
 80010c4:	f002 fd79 	bl	8003bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010c8:	200b      	movs	r0, #11
 80010ca:	f002 fd92 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f0:	4b4e      	ldr	r3, [pc, #312]	@ (800122c <MX_GPIO_Init+0x150>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	@ (800122c <MX_GPIO_Init+0x150>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <MX_GPIO_Init+0x150>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001108:	4b48      	ldr	r3, [pc, #288]	@ (800122c <MX_GPIO_Init+0x150>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a47      	ldr	r2, [pc, #284]	@ (800122c <MX_GPIO_Init+0x150>)
 800110e:	f043 0320 	orr.w	r3, r3, #32
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b45      	ldr	r3, [pc, #276]	@ (800122c <MX_GPIO_Init+0x150>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b42      	ldr	r3, [pc, #264]	@ (800122c <MX_GPIO_Init+0x150>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a41      	ldr	r2, [pc, #260]	@ (800122c <MX_GPIO_Init+0x150>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <MX_GPIO_Init+0x150>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b3c      	ldr	r3, [pc, #240]	@ (800122c <MX_GPIO_Init+0x150>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a3b      	ldr	r2, [pc, #236]	@ (800122c <MX_GPIO_Init+0x150>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b39      	ldr	r3, [pc, #228]	@ (800122c <MX_GPIO_Init+0x150>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED_Pin|CHARGING_STATE_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001156:	4836      	ldr	r0, [pc, #216]	@ (8001230 <MX_GPIO_Init+0x154>)
 8001158:	f003 f92b 	bl	80043b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISCHARGE_STOP_Pin|RS_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f640 6104 	movw	r1, #3588	@ 0xe04
 8001162:	4834      	ldr	r0, [pc, #208]	@ (8001234 <MX_GPIO_Init+0x158>)
 8001164:	f003 f925 	bl	80043b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800116e:	4832      	ldr	r0, [pc, #200]	@ (8001238 <MX_GPIO_Init+0x15c>)
 8001170:	f003 f91f 	bl	80043b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_LED_Pin CHARGING_STATE_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|CHARGING_STATE_Pin;
 8001174:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2302      	movs	r3, #2
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4619      	mov	r1, r3
 800118c:	4828      	ldr	r0, [pc, #160]	@ (8001230 <MX_GPIO_Init+0x154>)
 800118e:	f002 ff75 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISCHARGE_STOP_Pin */
  GPIO_InitStruct.Pin = DISCHARGE_STOP_Pin;
 8001192:	2304      	movs	r3, #4
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2302      	movs	r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCHARGE_STOP_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	4822      	ldr	r0, [pc, #136]	@ (8001234 <MX_GPIO_Init+0x158>)
 80011aa:	f002 ff67 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_mode_Pin Button_sub_Pin Button_add_Pin */
  GPIO_InitStruct.Pin = Button_mode_Pin|Button_sub_Pin|Button_add_Pin;
 80011ae:	f640 4302 	movw	r3, #3074	@ 0xc02
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b4:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_GPIO_Init+0x160>)
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	481d      	ldr	r0, [pc, #116]	@ (8001238 <MX_GPIO_Init+0x15c>)
 80011c4:	f002 ff5a 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 80011c8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	4814      	ldr	r0, [pc, #80]	@ (8001234 <MX_GPIO_Init+0x158>)
 80011e2:	f002 ff4b 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80011e6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	480e      	ldr	r0, [pc, #56]	@ (8001238 <MX_GPIO_Init+0x15c>)
 8001200:	f002 ff3c 	bl	800407c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2007      	movs	r0, #7
 800120a:	f002 fcd6 	bl	8003bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800120e:	2007      	movs	r0, #7
 8001210:	f002 fcef 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2028      	movs	r0, #40	@ 0x28
 800121a:	f002 fcce 	bl	8003bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800121e:	2028      	movs	r0, #40	@ 0x28
 8001220:	f002 fce7 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	40011000 	.word	0x40011000
 8001234:	40010800 	.word	0x40010800
 8001238:	40010c00 	.word	0x40010c00
 800123c:	10110000 	.word	0x10110000

08001240 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001246:	f001 fa8f 	bl	8002768 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800124a:	f000 fb1f 	bl	800188c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800124e:	f7ff ff45 	bl	80010dc <MX_GPIO_Init>
	MX_DMA_Init();
 8001252:	f7ff ff25 	bl	80010a0 <MX_DMA_Init>
	MX_TIM4_Init();
 8001256:	f001 f997 	bl	8002588 <MX_TIM4_Init>
	MX_TIM3_Init();
 800125a:	f001 f947 	bl	80024ec <MX_TIM3_Init>
	MX_ADC1_Init();
 800125e:	f7ff fe3b 	bl	8000ed8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8001262:	f001 f8cf 	bl	8002404 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_SET);// OP AMP inv input to turn off discharge
 8001266:	2201      	movs	r2, #1
 8001268:	2104      	movs	r1, #4
 800126a:	48b1      	ldr	r0, [pc, #708]	@ (8001530 <main+0x2f0>)
 800126c:	f003 f8a1 	bl	80043b2 <HAL_GPIO_WritePin>


	if(HAL_ADCEx_Calibration_Start(&hadc1) !=HAL_OK)
 8001270:	48b0      	ldr	r0, [pc, #704]	@ (8001534 <main+0x2f4>)
 8001272:	f001 ffcd 	bl	8003210 <HAL_ADCEx_Calibration_Start>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <main+0x4c>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001282:	48ad      	ldr	r0, [pc, #692]	@ (8001538 <main+0x2f8>)
 8001284:	f003 f895 	bl	80043b2 <HAL_GPIO_WritePin>
		Error_Handler();
 8001288:	f000 ffe0 	bl	800224c <Error_Handler>
	}
	if(HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK)//TIM2 for DELAY_US
 800128c:	48ab      	ldr	r0, [pc, #684]	@ (800153c <main+0x2fc>)
 800128e:	f003 fe91 	bl	8004fb4 <HAL_TIM_Base_Start_IT>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <main+0x68>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	48a6      	ldr	r0, [pc, #664]	@ (8001538 <main+0x2f8>)
 80012a0:	f003 f887 	bl	80043b2 <HAL_GPIO_WritePin>
		Error_Handler();
 80012a4:	f000 ffd2 	bl	800224c <Error_Handler>
	}

	HAL_Delay(500);// wait for DC point
 80012a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ac:	f001 fabe 	bl	800282c <HAL_Delay>

	//Read internal reference for VDDA
	HAL_ADCEx_InjectedStart(&hadc1);
 80012b0:	48a0      	ldr	r0, [pc, #640]	@ (8001534 <main+0x2f4>)
 80012b2:	f002 f85b 	bl	800336c <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedPollForConversion(&hadc1, 500);
 80012b6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80012ba:	489e      	ldr	r0, [pc, #632]	@ (8001534 <main+0x2f4>)
 80012bc:	f002 f8dc 	bl	8003478 <HAL_ADCEx_InjectedPollForConversion>
	uint16_t Vadc = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80012c0:	2101      	movs	r1, #1
 80012c2:	489c      	ldr	r0, [pc, #624]	@ (8001534 <main+0x2f4>)
 80012c4:	f002 f9d0 	bl	8003668 <HAL_ADCEx_InjectedGetValue>
 80012c8:	4603      	mov	r3, r0
 80012ca:	81fb      	strh	r3, [r7, #14]
	Vdda = 1.0*ADC_steps/Vadc*Vrefint;
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f898 	bl	8000404 <__aeabi_i2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	4998      	ldr	r1, [pc, #608]	@ (8001540 <main+0x300>)
 80012de:	f7ff fa25 	bl	800072c <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80012ee:	4b95      	ldr	r3, [pc, #596]	@ (8001544 <main+0x304>)
 80012f0:	f7ff f8f2 	bl	80004d8 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fb1e 	bl	800093c <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	4a91      	ldr	r2, [pc, #580]	@ (8001548 <main+0x308>)
 8001304:	6013      	str	r3, [r2, #0]

	/*
	 * @brief Init in 4 bit LCD 16x2
	 */
	LCD_Init();
 8001306:	f004 fead 	bl	8006064 <LCD_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(updateScreenRequest)//only perform LCD switch states on gpio change
 800130a:	4b90      	ldr	r3, [pc, #576]	@ (800154c <main+0x30c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <main+0xd8>
		{
			updateScreen();
 8001314:	f000 fb36 	bl	8001984 <updateScreen>
		}

		switch(STATE_MCU_CURRENT)
 8001318:	4b8d      	ldr	r3, [pc, #564]	@ (8001550 <main+0x310>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	3b01      	subs	r3, #1
 8001320:	2b03      	cmp	r3, #3
 8001322:	f200 8174 	bhi.w	800160e <main+0x3ce>
 8001326:	a201      	add	r2, pc, #4	@ (adr r2, 800132c <main+0xec>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	0800160f 	.word	0x0800160f
 8001330:	0800133d 	.word	0x0800133d
 8001334:	0800160f 	.word	0x0800160f
 8001338:	08001589 	.word	0x08001589
			break;
		}
		case  DISCHARGE:
		{
			//ONCE TO DO
			if(STATE_MCU_CURRENT != STATE_MCU_PREVIOUS)
 800133c:	4b84      	ldr	r3, [pc, #528]	@ (8001550 <main+0x310>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b84      	ldr	r3, [pc, #528]	@ (8001554 <main+0x314>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	429a      	cmp	r2, r3
 800134a:	d049      	beq.n	80013e0 <main+0x1a0>
			{
				DischargeDisplayData.capacity_mah = 0;
 800134c:	4b82      	ldr	r3, [pc, #520]	@ (8001558 <main+0x318>)
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	609a      	str	r2, [r3, #8]

				if(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK)//TIM3 for SAMPLING
 8001354:	4881      	ldr	r0, [pc, #516]	@ (800155c <main+0x31c>)
 8001356:	f003 fe2d 	bl	8004fb4 <HAL_TIM_Base_Start_IT>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <main+0x130>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001366:	4874      	ldr	r0, [pc, #464]	@ (8001538 <main+0x2f8>)
 8001368:	f003 f823 	bl	80043b2 <HAL_GPIO_WritePin>
					Error_Handler();
 800136c:	f000 ff6e 	bl	800224c <Error_Handler>
				}
				if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_DMA_SIZE)!=HAL_OK)//ADC SAMPLING DMA
 8001370:	2264      	movs	r2, #100	@ 0x64
 8001372:	497b      	ldr	r1, [pc, #492]	@ (8001560 <main+0x320>)
 8001374:	486f      	ldr	r0, [pc, #444]	@ (8001534 <main+0x2f4>)
 8001376:	f001 fb55 	bl	8002a24 <HAL_ADC_Start_DMA>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <main+0x150>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001386:	486c      	ldr	r0, [pc, #432]	@ (8001538 <main+0x2f8>)
 8001388:	f003 f813 	bl	80043b2 <HAL_GPIO_WritePin>
					Error_Handler();
 800138c:	f000 ff5e 	bl	800224c <Error_Handler>
				}
				if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4)!=HAL_OK)//TIM2 for MOSFET PWM
 8001390:	210c      	movs	r1, #12
 8001392:	4874      	ldr	r0, [pc, #464]	@ (8001564 <main+0x324>)
 8001394:	f003 fee6 	bl	8005164 <HAL_TIM_PWM_Start>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <main+0x16e>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a4:	4864      	ldr	r0, [pc, #400]	@ (8001538 <main+0x2f8>)
 80013a6:	f003 f804 	bl	80043b2 <HAL_GPIO_WritePin>
					Error_Handler();
 80013aa:	f000 ff4f 	bl	800224c <Error_Handler>
				}
				STATE_MCU_PREVIOUS = STATE_MCU_CURRENT;
 80013ae:	4b68      	ldr	r3, [pc, #416]	@ (8001550 <main+0x310>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b67      	ldr	r3, [pc, #412]	@ (8001554 <main+0x314>)
 80013b6:	701a      	strb	r2, [r3, #0]
				DischargeDisplayData.start_time = uwTick;
 80013b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001568 <main+0x328>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a66      	ldr	r2, [pc, #408]	@ (8001558 <main+0x318>)
 80013be:	60d3      	str	r3, [r2, #12]
				HAL_GPIO_WritePin(CHARGING_STATE_GPIO_Port, CHARGING_STATE_Pin,GPIO_PIN_RESET); // indication for charging
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013c6:	485c      	ldr	r0, [pc, #368]	@ (8001538 <main+0x2f8>)
 80013c8:	f002 fff3 	bl	80043b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2104      	movs	r1, #4
 80013d0:	4857      	ldr	r0, [pc, #348]	@ (8001530 <main+0x2f0>)
 80013d2:	f002 ffee 	bl	80043b2 <HAL_GPIO_WritePin>
				last_tick = uwTick;
 80013d6:	4b64      	ldr	r3, [pc, #400]	@ (8001568 <main+0x328>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a64      	ldr	r2, [pc, #400]	@ (800156c <main+0x32c>)
 80013dc:	6013      	str	r3, [r2, #0]
				break;
 80013de:	e11b      	b.n	8001618 <main+0x3d8>
			}



			//PERIODIC UPDATE
			if(uwTick - last_tick > 500)// 0.5s refresh rate
 80013e0:	4b61      	ldr	r3, [pc, #388]	@ (8001568 <main+0x328>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b61      	ldr	r3, [pc, #388]	@ (800156c <main+0x32c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013ee:	f240 8110 	bls.w	8001612 <main+0x3d2>
			{
				updateScreenRequest=1;
 80013f2:	4b56      	ldr	r3, [pc, #344]	@ (800154c <main+0x30c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
				uint32_t local_temp_volt;
				uint32_t local_temp_curr;
				uint16_t local_temp_count;

				__disable_irq();
				local_temp_volt = ADC_VOLTAGE_ACCUM;
 80013fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001570 <main+0x330>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60bb      	str	r3, [r7, #8]
				local_temp_curr = ADC_CURRENT_ACCUM;
 8001402:	4b5c      	ldr	r3, [pc, #368]	@ (8001574 <main+0x334>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	607b      	str	r3, [r7, #4]
				local_temp_count = ADC_READING_COUNTER;
 8001408:	4b5b      	ldr	r3, [pc, #364]	@ (8001578 <main+0x338>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	807b      	strh	r3, [r7, #2]

				ADC_READING_COUNTER=0;
 800140e:	4b5a      	ldr	r3, [pc, #360]	@ (8001578 <main+0x338>)
 8001410:	2200      	movs	r2, #0
 8001412:	801a      	strh	r2, [r3, #0]
				ADC_CURRENT_ACCUM=0;
 8001414:	4b57      	ldr	r3, [pc, #348]	@ (8001574 <main+0x334>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
				ADC_VOLTAGE_ACCUM=0;
 800141a:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <main+0x330>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001420:	b662      	cpsie	i
}
 8001422:	bf00      	nop
				__enable_irq();

				DischargeDisplayData.voltage = Vdda*local_temp_volt/local_temp_count/ADC_steps*R_divider_multiplier;//convert from ADC to Voltage
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff fb8f 	bl	8000b48 <__aeabi_ui2f>
 800142a:	4602      	mov	r2, r0
 800142c:	4b46      	ldr	r3, [pc, #280]	@ (8001548 <main+0x308>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f7ff fbe0 	bl	8000bf8 <__aeabi_fmul>
 8001438:	4603      	mov	r3, r0
 800143a:	461c      	mov	r4, r3
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fb86 	bl	8000b50 <__aeabi_i2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff fc89 	bl	8000d60 <__aeabi_fdiv>
 800144e:	4603      	mov	r3, r0
 8001450:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc83 	bl	8000d60 <__aeabi_fdiv>
 800145a:	4603      	mov	r3, r0
 800145c:	4947      	ldr	r1, [pc, #284]	@ (800157c <main+0x33c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc7e 	bl	8000d60 <__aeabi_fdiv>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <main+0x318>)
 800146a:	601a      	str	r2, [r3, #0]
				DischargeDisplayData.current_ma = Vdda*local_temp_curr/local_temp_count/R_load/ADC_steps*1000;//curr is voltage(XD)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fb6b 	bl	8000b48 <__aeabi_ui2f>
 8001472:	4602      	mov	r2, r0
 8001474:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <main+0x308>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f7ff fbbc 	bl	8000bf8 <__aeabi_fmul>
 8001480:	4603      	mov	r3, r0
 8001482:	461c      	mov	r4, r3
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb62 	bl	8000b50 <__aeabi_i2f>
 800148c:	4603      	mov	r3, r0
 800148e:	4619      	mov	r1, r3
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff fc65 	bl	8000d60 <__aeabi_fdiv>
 8001496:	4603      	mov	r3, r0
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ffc5 	bl	8000428 <__aeabi_f2d>
 800149e:	a322      	add	r3, pc, #136	@ (adr r3, 8001528 <main+0x2e8>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f942 	bl	800072c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <main+0x300>)
 80014b6:	f7ff f939 	bl	800072c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <main+0x340>)
 80014c8:	f7ff f806 	bl	80004d8 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fa32 	bl	800093c <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a1f      	ldr	r2, [pc, #124]	@ (8001558 <main+0x318>)
 80014dc:	6053      	str	r3, [r2, #4]

				last_tick = uwTick;
 80014de:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <main+0x328>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a22      	ldr	r2, [pc, #136]	@ (800156c <main+0x32c>)
 80014e4:	6013      	str	r3, [r2, #0]

				if(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin)==GPIO_PIN_SET)
 80014e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014ea:	4826      	ldr	r0, [pc, #152]	@ (8001584 <main+0x344>)
 80014ec:	f002 ff4a 	bl	8004384 <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d106      	bne.n	8001504 <main+0x2c4>
				{
					TIM2->CCR4 += 10;
 80014f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001500:	330a      	adds	r3, #10
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
				}

				if(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin)==GPIO_PIN_SET)
 8001504:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001508:	481e      	ldr	r0, [pc, #120]	@ (8001584 <main+0x344>)
 800150a:	f002 ff3b 	bl	8004384 <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	2b01      	cmp	r3, #1
 8001512:	d17e      	bne.n	8001612 <main+0x3d2>
				{
					TIM2->CCR4 -= 10;
 8001514:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800151e:	3b0a      	subs	r3, #10
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
				}
			}
			break;
 8001522:	e076      	b.n	8001612 <main+0x3d2>
 8001524:	f3af 8000 	nop.w
 8001528:	c28f5c29 	.word	0xc28f5c29
 800152c:	3fcc28f5 	.word	0x3fcc28f5
 8001530:	40010800 	.word	0x40010800
 8001534:	20000084 	.word	0x20000084
 8001538:	40011000 	.word	0x40011000
 800153c:	200002b0 	.word	0x200002b0
 8001540:	40b00000 	.word	0x40b00000
 8001544:	3ff33333 	.word	0x3ff33333
 8001548:	20000000 	.word	0x20000000
 800154c:	20000004 	.word	0x20000004
 8001550:	200000f8 	.word	0x200000f8
 8001554:	200000f9 	.word	0x200000f9
 8001558:	200001f8 	.word	0x200001f8
 800155c:	20000268 	.word	0x20000268
 8001560:	2000011c 	.word	0x2000011c
 8001564:	20000220 	.word	0x20000220
 8001568:	200002f8 	.word	0x200002f8
 800156c:	20000208 	.word	0x20000208
 8001570:	200001ec 	.word	0x200001ec
 8001574:	200001f0 	.word	0x200001f0
 8001578:	200001f4 	.word	0x200001f4
 800157c:	3e3da12f 	.word	0x3e3da12f
 8001580:	408f4000 	.word	0x408f4000
 8001584:	40010c00 	.word	0x40010c00
		}
		case  FINISH:
		{
			if(STATE_MCU_CURRENT != STATE_MCU_PREVIOUS)
 8001588:	4b97      	ldr	r3, [pc, #604]	@ (80017e8 <main+0x5a8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b97      	ldr	r3, [pc, #604]	@ (80017ec <main+0x5ac>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	429a      	cmp	r2, r3
 8001596:	d03e      	beq.n	8001616 <main+0x3d6>
			{
				if(HAL_TIM_Base_Stop_IT(&htim3)!=HAL_OK)//TIM3 for SAMPLING
 8001598:	4895      	ldr	r0, [pc, #596]	@ (80017f0 <main+0x5b0>)
 800159a:	f003 fd5d 	bl	8005058 <HAL_TIM_Base_Stop_IT>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <main+0x374>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015aa:	4892      	ldr	r0, [pc, #584]	@ (80017f4 <main+0x5b4>)
 80015ac:	f002 ff01 	bl	80043b2 <HAL_GPIO_WritePin>
					Error_Handler();
 80015b0:	f000 fe4c 	bl	800224c <Error_Handler>
				}
				if(HAL_ADC_Stop_DMA(&hadc1)!=HAL_OK)//ADC SAMPLING DMA
 80015b4:	4890      	ldr	r0, [pc, #576]	@ (80017f8 <main+0x5b8>)
 80015b6:	f001 fb13 	bl	8002be0 <HAL_ADC_Stop_DMA>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <main+0x390>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015c6:	488b      	ldr	r0, [pc, #556]	@ (80017f4 <main+0x5b4>)
 80015c8:	f002 fef3 	bl	80043b2 <HAL_GPIO_WritePin>
					Error_Handler();
 80015cc:	f000 fe3e 	bl	800224c <Error_Handler>
				}
				if(HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4)!=HAL_OK)//TIM2 for MOSFET PWM
 80015d0:	210c      	movs	r1, #12
 80015d2:	488a      	ldr	r0, [pc, #552]	@ (80017fc <main+0x5bc>)
 80015d4:	f003 fe68 	bl	80052a8 <HAL_TIM_PWM_Stop>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <main+0x3ae>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e4:	4883      	ldr	r0, [pc, #524]	@ (80017f4 <main+0x5b4>)
 80015e6:	f002 fee4 	bl	80043b2 <HAL_GPIO_WritePin>
					Error_Handler();
 80015ea:	f000 fe2f 	bl	800224c <Error_Handler>
				}
				//STATE_MCU_PREVIOUS = STATE_MCU_CURRENT; IMPLEMENTED IN BUTTON
				HAL_GPIO_WritePin(CHARGING_STATE_GPIO_Port, CHARGING_STATE_Pin,GPIO_PIN_SET); // indication for charging
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015f4:	487f      	ldr	r0, [pc, #508]	@ (80017f4 <main+0x5b4>)
 80015f6:	f002 fedc 	bl	80043b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2104      	movs	r1, #4
 80015fe:	4880      	ldr	r0, [pc, #512]	@ (8001800 <main+0x5c0>)
 8001600:	f002 fed7 	bl	80043b2 <HAL_GPIO_WritePin>
				last_tick = uwTick;
 8001604:	4b7f      	ldr	r3, [pc, #508]	@ (8001804 <main+0x5c4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a7f      	ldr	r2, [pc, #508]	@ (8001808 <main+0x5c8>)
 800160a:	6013      	str	r3, [r2, #0]
				break;
 800160c:	e004      	b.n	8001618 <main+0x3d8>
			break;
		}
		default:
		{

			break;
 800160e:	bf00      	nop
 8001610:	e002      	b.n	8001618 <main+0x3d8>
			break;
 8001612:	bf00      	nop
 8001614:	e000      	b.n	8001618 <main+0x3d8>
			break;
 8001616:	bf00      	nop
		}
		}

		if(button_activity)
 8001618:	4b7c      	ldr	r3, [pc, #496]	@ (800180c <main+0x5cc>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	f43f ae73 	beq.w	800130a <main+0xca>
		{
			if(HAL_GPIO_ReadPin(Button_mode_GPIO_Port, Button_mode_Pin) == GPIO_PIN_SET)
 8001624:	2102      	movs	r1, #2
 8001626:	487a      	ldr	r0, [pc, #488]	@ (8001810 <main+0x5d0>)
 8001628:	f002 feac 	bl	8004384 <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	2b01      	cmp	r3, #1
 8001630:	d141      	bne.n	80016b6 <main+0x476>
			{
				if(STATE_MCU_CURRENT == SETUP)
 8001632:	4b6d      	ldr	r3, [pc, #436]	@ (80017e8 <main+0x5a8>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d126      	bne.n	800168a <main+0x44a>
				{
					SETUP_CONFIGURATION = 	(SETUP_CONFIGURATION+1)%SETUP_PARAM_COUNT;
 800163c:	4b75      	ldr	r3, [pc, #468]	@ (8001814 <main+0x5d4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	bfb8      	it	lt
 800164c:	425b      	neglt	r3, r3
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b70      	ldr	r3, [pc, #448]	@ (8001814 <main+0x5d4>)
 8001652:	701a      	strb	r2, [r3, #0]
					while(HAL_GPIO_ReadPin(Button_mode_GPIO_Port, Button_mode_Pin) == GPIO_PIN_SET)
 8001654:	e012      	b.n	800167c <main+0x43c>
					{
						if(uwTick-last_button_time > BUTTON_LONG_PRESS)
 8001656:	4b6b      	ldr	r3, [pc, #428]	@ (8001804 <main+0x5c4>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b6f      	ldr	r3, [pc, #444]	@ (8001818 <main+0x5d8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001664:	d90a      	bls.n	800167c <main+0x43c>
						{
							STATE_MCU_CURRENT = DISCHARGE;
 8001666:	4b60      	ldr	r3, [pc, #384]	@ (80017e8 <main+0x5a8>)
 8001668:	2202      	movs	r2, #2
 800166a:	701a      	strb	r2, [r3, #0]
							STATE_MCU_PREVIOUS = SETUP;
 800166c:	4b5f      	ldr	r3, [pc, #380]	@ (80017ec <main+0x5ac>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
							last_button_time = uwTick;
 8001672:	4b64      	ldr	r3, [pc, #400]	@ (8001804 <main+0x5c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a68      	ldr	r2, [pc, #416]	@ (8001818 <main+0x5d8>)
 8001678:	6013      	str	r3, [r2, #0]
							break;//stop the loop, since its in different state now
 800167a:	e006      	b.n	800168a <main+0x44a>
					while(HAL_GPIO_ReadPin(Button_mode_GPIO_Port, Button_mode_Pin) == GPIO_PIN_SET)
 800167c:	2102      	movs	r1, #2
 800167e:	4864      	ldr	r0, [pc, #400]	@ (8001810 <main+0x5d0>)
 8001680:	f002 fe80 	bl	8004384 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d0e5      	beq.n	8001656 <main+0x416>
						}
					}
				}

				if (STATE_MCU_CURRENT == DISCHARGE)
 800168a:	4b57      	ldr	r3, [pc, #348]	@ (80017e8 <main+0x5a8>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d103      	bne.n	800169c <main+0x45c>
				{
						HAL_GPIO_TogglePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin);
 8001694:	2104      	movs	r1, #4
 8001696:	485a      	ldr	r0, [pc, #360]	@ (8001800 <main+0x5c0>)
 8001698:	f002 fea3 	bl	80043e2 <HAL_GPIO_TogglePin>
				}
				if(STATE_MCU_CURRENT == FINISH)
 800169c:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <main+0x5a8>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	f040 80dc 	bne.w	8001860 <main+0x620>
				{
					//reset for setup to start over
					STATE_MCU_CURRENT = SETUP;
 80016a8:	4b4f      	ldr	r3, [pc, #316]	@ (80017e8 <main+0x5a8>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
					STATE_MCU_PREVIOUS = FINISH;
 80016ae:	4b4f      	ldr	r3, [pc, #316]	@ (80017ec <main+0x5ac>)
 80016b0:	2204      	movs	r2, #4
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e0d4      	b.n	8001860 <main+0x620>
				}
			}

			else if(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin) == GPIO_PIN_SET)
 80016b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016ba:	4855      	ldr	r0, [pc, #340]	@ (8001810 <main+0x5d0>)
 80016bc:	f002 fe62 	bl	8004384 <HAL_GPIO_ReadPin>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d153      	bne.n	800176e <main+0x52e>
			{
				if(STATE_MCU_CURRENT == SETUP)
 80016c6:	4b48      	ldr	r3, [pc, #288]	@ (80017e8 <main+0x5a8>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	f040 80c7 	bne.w	8001860 <main+0x620>
				{
					if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 80016d2:	4b50      	ldr	r3, [pc, #320]	@ (8001814 <main+0x5d4>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d107      	bne.n	80016ec <main+0x4ac>
					{
						Cutoff_voltage += 100;// 100 mV step
 80016dc:	4b4f      	ldr	r3, [pc, #316]	@ (800181c <main+0x5dc>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3364      	adds	r3, #100	@ 0x64
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <main+0x5dc>)
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	e033      	b.n	8001754 <main+0x514>
					}
					else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 80016ec:	4b49      	ldr	r3, [pc, #292]	@ (8001814 <main+0x5d4>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d12e      	bne.n	8001754 <main+0x514>
					{
						Discharge_current+=10;// 10 mA step
 80016f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001820 <main+0x5e0>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	330a      	adds	r3, #10
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b47      	ldr	r3, [pc, #284]	@ (8001820 <main+0x5e0>)
 8001702:	801a      	strh	r2, [r3, #0]
					}
					while(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin) == GPIO_PIN_SET)
 8001704:	e026      	b.n	8001754 <main+0x514>
					{
						if(uwTick-last_button_time > BUTTON_LONG_PRESS)
 8001706:	4b3f      	ldr	r3, [pc, #252]	@ (8001804 <main+0x5c4>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <main+0x5d8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001714:	d91e      	bls.n	8001754 <main+0x514>
						{
							if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 8001716:	4b3f      	ldr	r3, [pc, #252]	@ (8001814 <main+0x5d4>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d107      	bne.n	8001730 <main+0x4f0>
							{
								Cutoff_voltage += 100;// 100 mV step
 8001720:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <main+0x5dc>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	3364      	adds	r3, #100	@ 0x64
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b3c      	ldr	r3, [pc, #240]	@ (800181c <main+0x5dc>)
 800172c:	801a      	strh	r2, [r3, #0]
 800172e:	e00b      	b.n	8001748 <main+0x508>
							}
							else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 8001730:	4b38      	ldr	r3, [pc, #224]	@ (8001814 <main+0x5d4>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <main+0x508>
							{
								Discharge_current+=10;// 10 mA step
 800173a:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <main+0x5e0>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	330a      	adds	r3, #10
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <main+0x5e0>)
 8001746:	801a      	strh	r2, [r3, #0]
							}
							DELAY_US(10000);
 8001748:	f242 7010 	movw	r0, #10000	@ 0x2710
 800174c:	f000 f8ee 	bl	800192c <DELAY_US>
							updateScreen();//periodically update because of the auto increment
 8001750:	f000 f918 	bl	8001984 <updateScreen>
					while(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin) == GPIO_PIN_SET)
 8001754:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001758:	482d      	ldr	r0, [pc, #180]	@ (8001810 <main+0x5d0>)
 800175a:	f002 fe13 	bl	8004384 <HAL_GPIO_ReadPin>
 800175e:	4603      	mov	r3, r0
 8001760:	2b01      	cmp	r3, #1
 8001762:	d0d0      	beq.n	8001706 <main+0x4c6>
						}
					}
					last_button_time = uwTick;
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <main+0x5c4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a2b      	ldr	r2, [pc, #172]	@ (8001818 <main+0x5d8>)
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e078      	b.n	8001860 <main+0x620>
				}
			}

			else if(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin) == GPIO_PIN_SET)
 800176e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001772:	4827      	ldr	r0, [pc, #156]	@ (8001810 <main+0x5d0>)
 8001774:	f002 fe06 	bl	8004384 <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d170      	bne.n	8001860 <main+0x620>
			{
				if(STATE_MCU_CURRENT == SETUP)
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <main+0x5a8>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d16b      	bne.n	8001860 <main+0x620>
				{
					if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 8001788:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <main+0x5d4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <main+0x562>
					{
						Cutoff_voltage -= 100;// 100 mV step
 8001792:	4b22      	ldr	r3, [pc, #136]	@ (800181c <main+0x5dc>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	3b64      	subs	r3, #100	@ 0x64
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <main+0x5dc>)
 800179e:	801a      	strh	r2, [r3, #0]
 80017a0:	e052      	b.n	8001848 <main+0x608>
					}
					else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <main+0x5d4>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d14d      	bne.n	8001848 <main+0x608>
					{
						Discharge_current-=10;// 10 mA step
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <main+0x5e0>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	3b0a      	subs	r3, #10
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <main+0x5e0>)
 80017b8:	801a      	strh	r2, [r3, #0]
					}
					while(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin) == GPIO_PIN_SET)
 80017ba:	e045      	b.n	8001848 <main+0x608>
					{
						if(uwTick-last_button_time > BUTTON_LONG_PRESS)
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <main+0x5c4>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <main+0x5d8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017ca:	d93d      	bls.n	8001848 <main+0x608>
						{
							if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <main+0x5d4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d126      	bne.n	8001824 <main+0x5e4>
							{
								Cutoff_voltage -= 100;// 100 mV step
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <main+0x5dc>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3b64      	subs	r3, #100	@ 0x64
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <main+0x5dc>)
 80017e2:	801a      	strh	r2, [r3, #0]
 80017e4:	e02a      	b.n	800183c <main+0x5fc>
 80017e6:	bf00      	nop
 80017e8:	200000f8 	.word	0x200000f8
 80017ec:	200000f9 	.word	0x200000f9
 80017f0:	20000268 	.word	0x20000268
 80017f4:	40011000 	.word	0x40011000
 80017f8:	20000084 	.word	0x20000084
 80017fc:	20000220 	.word	0x20000220
 8001800:	40010800 	.word	0x40010800
 8001804:	200002f8 	.word	0x200002f8
 8001808:	20000208 	.word	0x20000208
 800180c:	200001e4 	.word	0x200001e4
 8001810:	40010c00 	.word	0x40010c00
 8001814:	200000fa 	.word	0x200000fa
 8001818:	200001e8 	.word	0x200001e8
 800181c:	20000008 	.word	0x20000008
 8001820:	20000006 	.word	0x20000006
							}
							else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <main+0x630>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <main+0x5fc>
							{
								Discharge_current-=10;// 10 mA step
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <main+0x634>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b0a      	subs	r3, #10
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <main+0x634>)
 800183a:	801a      	strh	r2, [r3, #0]
							}
							DELAY_US(10000);
 800183c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001840:	f000 f874 	bl	800192c <DELAY_US>
							updateScreen();//periodically update because of the auto increment
 8001844:	f000 f89e 	bl	8001984 <updateScreen>
					while(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin) == GPIO_PIN_SET)
 8001848:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800184c:	480a      	ldr	r0, [pc, #40]	@ (8001878 <main+0x638>)
 800184e:	f002 fd99 	bl	8004384 <HAL_GPIO_ReadPin>
 8001852:	4603      	mov	r3, r0
 8001854:	2b01      	cmp	r3, #1
 8001856:	d0b1      	beq.n	80017bc <main+0x57c>
						}
					}
					last_button_time = uwTick;
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <main+0x63c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <main+0x640>)
 800185e:	6013      	str	r3, [r2, #0]
				}
			}
			button_activity = 0;
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <main+0x644>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
			updateScreenRequest = 1;
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <main+0x648>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
		if(updateScreenRequest)//only perform LCD switch states on gpio change
 800186c:	e54d      	b.n	800130a <main+0xca>
 800186e:	bf00      	nop
 8001870:	200000fa 	.word	0x200000fa
 8001874:	20000006 	.word	0x20000006
 8001878:	40010c00 	.word	0x40010c00
 800187c:	200002f8 	.word	0x200002f8
 8001880:	200001e8 	.word	0x200001e8
 8001884:	200001e4 	.word	0x200001e4
 8001888:	20000004 	.word	0x20000004

0800188c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b094      	sub	sp, #80	@ 0x50
 8001890:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001896:	2228      	movs	r2, #40	@ 0x28
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f004 fcb0 	bl	8006200 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018bc:	2301      	movs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fdb8 	bl	8004444 <HAL_RCC_OscConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0x52>
	{
		Error_Handler();
 80018da:	f000 fcb7 	bl	800224c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	230f      	movs	r3, #15
 80018e0:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 f825 	bl	8004948 <HAL_RCC_ClockConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 8001904:	f000 fca2 	bl	800224c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001908:	2302      	movs	r3, #2
 800190a:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4618      	mov	r0, r3
 8001914:	f003 f992 	bl	8004c3c <HAL_RCCEx_PeriphCLKConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0x96>
	{
		Error_Handler();
 800191e:	f000 fc95 	bl	800224c <Error_Handler>
	}
}
 8001922:	bf00      	nop
 8001924:	3750      	adds	r7, #80	@ 0x50
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <DELAY_US>:

/* USER CODE BEGIN 4 */
void DELAY_US(uint16_t TIME_US)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
	uint32_t old_timer_value = TIM4->CNT;
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <DELAY_US+0x54>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	60fb      	str	r3, [r7, #12]
	uint32_t target_time = (old_timer_value + TIME_US) % (TIM4->ARR + 1);
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	4a0f      	ldr	r2, [pc, #60]	@ (8001980 <DELAY_US+0x54>)
 8001944:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001946:	3201      	adds	r2, #1
 8001948:	fbb3 f1f2 	udiv	r1, r3, r2
 800194c:	fb01 f202 	mul.w	r2, r1, r2
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	60bb      	str	r3, [r7, #8]

	if (target_time < old_timer_value)  // Handle timer overflow
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d205      	bcs.n	8001968 <DELAY_US+0x3c>
	{
		while (TIM4->CNT >= old_timer_value);  // Wait for overflow
 800195c:	bf00      	nop
 800195e:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <DELAY_US+0x54>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d9fa      	bls.n	800195e <DELAY_US+0x32>
	}
	while (TIM4->CNT < target_time);  // Wait until target time is reached
 8001968:	bf00      	nop
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <DELAY_US+0x54>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	429a      	cmp	r2, r3
 8001972:	d8fa      	bhi.n	800196a <DELAY_US+0x3e>
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40000800 	.word	0x40000800

08001984 <updateScreen>:
void updateScreen()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
	static uint32_t elapsed_time;
	updateScreenRequest = 0;
 800198a:	4bb1      	ldr	r3, [pc, #708]	@ (8001c50 <updateScreen+0x2cc>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
	switch(STATE_MCU_CURRENT)
 8001990:	4bb0      	ldr	r3, [pc, #704]	@ (8001c54 <updateScreen+0x2d0>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b04      	cmp	r3, #4
 8001998:	f200 8154 	bhi.w	8001c44 <updateScreen+0x2c0>
 800199c:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <updateScreen+0x20>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019b9 	.word	0x080019b9
 80019a8:	080019f5 	.word	0x080019f5
 80019ac:	08001aa5 	.word	0x08001aa5
 80019b0:	08001c45 	.word	0x08001c45
 80019b4:	08001bf5 	.word	0x08001bf5
	{
	case  START:
	{
		LCD_Init();
 80019b8:	f004 fb54 	bl	8006064 <LCD_Init>

		sprintf(LCD_buffer,"Battery analyzer");
 80019bc:	49a6      	ldr	r1, [pc, #664]	@ (8001c58 <updateScreen+0x2d4>)
 80019be:	48a7      	ldr	r0, [pc, #668]	@ (8001c5c <updateScreen+0x2d8>)
 80019c0:	f004 fbe2 	bl	8006188 <siprintf>
		formatCharToLCD(LCD_buffer,0,0,ALIGN_LEFT);
 80019c4:	2301      	movs	r3, #1
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	48a4      	ldr	r0, [pc, #656]	@ (8001c5c <updateScreen+0x2d8>)
 80019cc:	f000 f97e 	bl	8001ccc <formatCharToLCD>

		sprintf(LCD_buffer,"BatVinux");
 80019d0:	49a3      	ldr	r1, [pc, #652]	@ (8001c60 <updateScreen+0x2dc>)
 80019d2:	48a2      	ldr	r0, [pc, #648]	@ (8001c5c <updateScreen+0x2d8>)
 80019d4:	f004 fbd8 	bl	8006188 <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 80019d8:	2303      	movs	r3, #3
 80019da:	2201      	movs	r2, #1
 80019dc:	2100      	movs	r1, #0
 80019de:	489f      	ldr	r0, [pc, #636]	@ (8001c5c <updateScreen+0x2d8>)
 80019e0:	f000 f974 	bl	8001ccc <formatCharToLCD>

		HAL_Delay(1000);
 80019e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e8:	f000 ff20 	bl	800282c <HAL_Delay>
		STATE_MCU_CURRENT = SETUP;
 80019ec:	4b99      	ldr	r3, [pc, #612]	@ (8001c54 <updateScreen+0x2d0>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
		break;
 80019f2:	e128      	b.n	8001c46 <updateScreen+0x2c2>
	}
	case  SETUP:
	{
		switch(SETUP_CONFIGURATION)
 80019f4:	4b9b      	ldr	r3, [pc, #620]	@ (8001c64 <updateScreen+0x2e0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <updateScreen+0x80>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d019      	beq.n	8001a36 <updateScreen+0xb2>
 8001a02:	e04b      	b.n	8001a9c <updateScreen+0x118>
		{
		case(SETUP_PARAM_DISCHARGE_CURRENT):
		{
			sprintf(LCD_buffer,"Current, mA");
 8001a04:	4998      	ldr	r1, [pc, #608]	@ (8001c68 <updateScreen+0x2e4>)
 8001a06:	4895      	ldr	r0, [pc, #596]	@ (8001c5c <updateScreen+0x2d8>)
 8001a08:	f004 fbbe 	bl	8006188 <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	4892      	ldr	r0, [pc, #584]	@ (8001c5c <updateScreen+0x2d8>)
 8001a14:	f000 f95a 	bl	8001ccc <formatCharToLCD>

			sprintf(LCD_buffer,"%d",Discharge_current);
 8001a18:	4b94      	ldr	r3, [pc, #592]	@ (8001c6c <updateScreen+0x2e8>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4993      	ldr	r1, [pc, #588]	@ (8001c70 <updateScreen+0x2ec>)
 8001a22:	488e      	ldr	r0, [pc, #568]	@ (8001c5c <updateScreen+0x2d8>)
 8001a24:	f004 fbb0 	bl	8006188 <siprintf>
			formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 8001a28:	2303      	movs	r3, #3
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	488b      	ldr	r0, [pc, #556]	@ (8001c5c <updateScreen+0x2d8>)
 8001a30:	f000 f94c 	bl	8001ccc <formatCharToLCD>
			break;
 8001a34:	e035      	b.n	8001aa2 <updateScreen+0x11e>
		}
		case(SETUP_PARAM_CUTOFF_VOLTAGE):
		{
			sprintf(LCD_buffer,"Cutoff voltage");
 8001a36:	498f      	ldr	r1, [pc, #572]	@ (8001c74 <updateScreen+0x2f0>)
 8001a38:	4888      	ldr	r0, [pc, #544]	@ (8001c5c <updateScreen+0x2d8>)
 8001a3a:	f004 fba5 	bl	8006188 <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001a3e:	2303      	movs	r3, #3
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	4885      	ldr	r0, [pc, #532]	@ (8001c5c <updateScreen+0x2d8>)
 8001a46:	f000 f941 	bl	8001ccc <formatCharToLCD>

			//no float support (+10 kB flash)
			uint8_t temp1 = Cutoff_voltage/1000;
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c78 <updateScreen+0x2f4>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4a8a      	ldr	r2, [pc, #552]	@ (8001c7c <updateScreen+0x2f8>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	727b      	strb	r3, [r7, #9]
			uint8_t temp2 = (Cutoff_voltage/100)%10;
 8001a5c:	4b86      	ldr	r3, [pc, #536]	@ (8001c78 <updateScreen+0x2f4>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4a87      	ldr	r2, [pc, #540]	@ (8001c80 <updateScreen+0x2fc>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4b85      	ldr	r3, [pc, #532]	@ (8001c84 <updateScreen+0x300>)
 8001a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a72:	08d9      	lsrs	r1, r3, #3
 8001a74:	460b      	mov	r3, r1
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	723b      	strb	r3, [r7, #8]
			sprintf(LCD_buffer,"%u.%u V",temp1,temp2);
 8001a82:	7a7a      	ldrb	r2, [r7, #9]
 8001a84:	7a3b      	ldrb	r3, [r7, #8]
 8001a86:	4980      	ldr	r1, [pc, #512]	@ (8001c88 <updateScreen+0x304>)
 8001a88:	4874      	ldr	r0, [pc, #464]	@ (8001c5c <updateScreen+0x2d8>)
 8001a8a:	f004 fb7d 	bl	8006188 <siprintf>
			formatCharToLCD(LCD_buffer,1,1,ALIGN_CENTER);
 8001a8e:	2303      	movs	r3, #3
 8001a90:	2201      	movs	r2, #1
 8001a92:	2101      	movs	r1, #1
 8001a94:	4871      	ldr	r0, [pc, #452]	@ (8001c5c <updateScreen+0x2d8>)
 8001a96:	f000 f919 	bl	8001ccc <formatCharToLCD>
			break;
 8001a9a:	e002      	b.n	8001aa2 <updateScreen+0x11e>
		}
		default:
			LCD_CLEAR();
 8001a9c:	f004 fada 	bl	8006054 <LCD_CLEAR>
			break;
 8001aa0:	bf00      	nop
		}
		break;
 8001aa2:	e0d0      	b.n	8001c46 <updateScreen+0x2c2>
	}
	case  DISCHARGE:
	{
		if(STATE_MCU_CURRENT != STATE_MCU_PREVIOUS)
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c54 <updateScreen+0x2d0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b78      	ldr	r3, [pc, #480]	@ (8001c8c <updateScreen+0x308>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d018      	beq.n	8001ae6 <updateScreen+0x162>
		{
			sprintf(LCD_buffer,"Starting");
 8001ab4:	4976      	ldr	r1, [pc, #472]	@ (8001c90 <updateScreen+0x30c>)
 8001ab6:	4869      	ldr	r0, [pc, #420]	@ (8001c5c <updateScreen+0x2d8>)
 8001ab8:	f004 fb66 	bl	8006188 <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001abc:	2303      	movs	r3, #3
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4866      	ldr	r0, [pc, #408]	@ (8001c5c <updateScreen+0x2d8>)
 8001ac4:	f000 f902 	bl	8001ccc <formatCharToLCD>

			sprintf(LCD_buffer,"the discharge...");
 8001ac8:	4972      	ldr	r1, [pc, #456]	@ (8001c94 <updateScreen+0x310>)
 8001aca:	4864      	ldr	r0, [pc, #400]	@ (8001c5c <updateScreen+0x2d8>)
 8001acc:	f004 fb5c 	bl	8006188 <siprintf>
			formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4861      	ldr	r0, [pc, #388]	@ (8001c5c <updateScreen+0x2d8>)
 8001ad8:	f000 f8f8 	bl	8001ccc <formatCharToLCD>

			HAL_Delay(2000);
 8001adc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ae0:	f000 fea4 	bl	800282c <HAL_Delay>
			break;
 8001ae4:	e0af      	b.n	8001c46 <updateScreen+0x2c2>
		}
		if(OverCurrent_indication != 1)
 8001ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8001c98 <updateScreen+0x314>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d069      	beq.n	8001bc4 <updateScreen+0x240>
		{
		//Printing the reading values
		uint16_t temp = (uint16_t)(((10*DischargeDisplayData.voltage)+0.5))%10;
 8001af0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c9c <updateScreen+0x318>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	496a      	ldr	r1, [pc, #424]	@ (8001ca0 <updateScreen+0x31c>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f87e 	bl	8000bf8 <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fc92 	bl	8000428 <__aeabi_f2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b66      	ldr	r3, [pc, #408]	@ (8001ca4 <updateScreen+0x320>)
 8001b0a:	f7fe fb2f 	bl	800016c <__adddf3>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7fe fef1 	bl	80008fc <__aeabi_d2uiz>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <updateScreen+0x300>)
 8001b20:	fba3 1302 	umull	r1, r3, r3, r2
 8001b24:	08d9      	lsrs	r1, r3, #3
 8001b26:	460b      	mov	r3, r1
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	817b      	strh	r3, [r7, #10]
		char buff[8];
		sprintf(buff,"%u.%u",(uint16_t)DischargeDisplayData.voltage,temp);
 8001b32:	4b5a      	ldr	r3, [pc, #360]	@ (8001c9c <updateScreen+0x318>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f9ae 	bl	8000e98 <__aeabi_f2uiz>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	4638      	mov	r0, r7
 8001b46:	4958      	ldr	r1, [pc, #352]	@ (8001ca8 <updateScreen+0x324>)
 8001b48:	f004 fb1e 	bl	8006188 <siprintf>
		sprintf(LCD_buffer,"%u mA, %s V",(uint16_t)(DischargeDisplayData.current_ma+0.5),buff);
 8001b4c:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <updateScreen+0x318>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fc69 	bl	8000428 <__aeabi_f2d>
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b52      	ldr	r3, [pc, #328]	@ (8001ca4 <updateScreen+0x320>)
 8001b5c:	f7fe fb06 	bl	800016c <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe fec8 	bl	80008fc <__aeabi_d2uiz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	463b      	mov	r3, r7
 8001b74:	494d      	ldr	r1, [pc, #308]	@ (8001cac <updateScreen+0x328>)
 8001b76:	4839      	ldr	r0, [pc, #228]	@ (8001c5c <updateScreen+0x2d8>)
 8001b78:	f004 fb06 	bl	8006188 <siprintf>
		formatCharToLCD(LCD_buffer,0,0,ALIGN_LEFT);
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	4836      	ldr	r0, [pc, #216]	@ (8001c5c <updateScreen+0x2d8>)
 8001b84:	f000 f8a2 	bl	8001ccc <formatCharToLCD>

		elapsed_time = (uwTick-DischargeDisplayData.start_time)/1000;
 8001b88:	4b49      	ldr	r3, [pc, #292]	@ (8001cb0 <updateScreen+0x32c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b43      	ldr	r3, [pc, #268]	@ (8001c9c <updateScreen+0x318>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	4a3a      	ldr	r2, [pc, #232]	@ (8001c7c <updateScreen+0x2f8>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	4a46      	ldr	r2, [pc, #280]	@ (8001cb4 <updateScreen+0x330>)
 8001b9c:	6013      	str	r3, [r2, #0]
		sprintf(LCD_buffer,"%lu mAh, %lu s",(uint32_t)DischargeDisplayData.capacity_mah,elapsed_time);
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c9c <updateScreen+0x318>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f978 	bl	8000e98 <__aeabi_f2uiz>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b42      	ldr	r3, [pc, #264]	@ (8001cb4 <updateScreen+0x330>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4942      	ldr	r1, [pc, #264]	@ (8001cb8 <updateScreen+0x334>)
 8001bb0:	482a      	ldr	r0, [pc, #168]	@ (8001c5c <updateScreen+0x2d8>)
 8001bb2:	f004 fae9 	bl	8006188 <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_LEFT);
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4827      	ldr	r0, [pc, #156]	@ (8001c5c <updateScreen+0x2d8>)
 8001bbe:	f000 f885 	bl	8001ccc <formatCharToLCD>
			formatCharToLCD(LCD_buffer,1,0,ALIGN_LEFT);

			OverCurrent_indication = 0;
		}

		break;
 8001bc2:	e040      	b.n	8001c46 <updateScreen+0x2c2>
			sprintf(LCD_buffer,"OVERCURRENT");
 8001bc4:	493d      	ldr	r1, [pc, #244]	@ (8001cbc <updateScreen+0x338>)
 8001bc6:	4825      	ldr	r0, [pc, #148]	@ (8001c5c <updateScreen+0x2d8>)
 8001bc8:	f004 fade 	bl	8006188 <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_LEFT);
 8001bcc:	2301      	movs	r3, #1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4822      	ldr	r0, [pc, #136]	@ (8001c5c <updateScreen+0x2d8>)
 8001bd4:	f000 f87a 	bl	8001ccc <formatCharToLCD>
			sprintf(LCD_buffer,"CHECK BATTERY");
 8001bd8:	4939      	ldr	r1, [pc, #228]	@ (8001cc0 <updateScreen+0x33c>)
 8001bda:	4820      	ldr	r0, [pc, #128]	@ (8001c5c <updateScreen+0x2d8>)
 8001bdc:	f004 fad4 	bl	8006188 <siprintf>
			formatCharToLCD(LCD_buffer,1,0,ALIGN_LEFT);
 8001be0:	2301      	movs	r3, #1
 8001be2:	2200      	movs	r2, #0
 8001be4:	2101      	movs	r1, #1
 8001be6:	481d      	ldr	r0, [pc, #116]	@ (8001c5c <updateScreen+0x2d8>)
 8001be8:	f000 f870 	bl	8001ccc <formatCharToLCD>
			OverCurrent_indication = 0;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <updateScreen+0x314>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
		break;
 8001bf2:	e028      	b.n	8001c46 <updateScreen+0x2c2>
	}
	case  FINISH:
	{
		sprintf(LCD_buffer,"DISCHARGED");
 8001bf4:	4933      	ldr	r1, [pc, #204]	@ (8001cc4 <updateScreen+0x340>)
 8001bf6:	4819      	ldr	r0, [pc, #100]	@ (8001c5c <updateScreen+0x2d8>)
 8001bf8:	f004 fac6 	bl	8006188 <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2100      	movs	r1, #0
 8001c02:	4816      	ldr	r0, [pc, #88]	@ (8001c5c <updateScreen+0x2d8>)
 8001c04:	f000 f862 	bl	8001ccc <formatCharToLCD>


		uint32_t elapsed_time = (uwTick-DischargeDisplayData.start_time)/1000;
 8001c08:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <updateScreen+0x32c>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <updateScreen+0x318>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	4a1a      	ldr	r2, [pc, #104]	@ (8001c7c <updateScreen+0x2f8>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	60fb      	str	r3, [r7, #12]
		sprintf(LCD_buffer,"%u mAh in %lu s?",(uint16_t)DischargeDisplayData.capacity_mah,elapsed_time);
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <updateScreen+0x318>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f939 	bl	8000e98 <__aeabi_f2uiz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4926      	ldr	r1, [pc, #152]	@ (8001cc8 <updateScreen+0x344>)
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <updateScreen+0x2d8>)
 8001c32:	f004 faa9 	bl	8006188 <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_RIGHT);
 8001c36:	2302      	movs	r3, #2
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4807      	ldr	r0, [pc, #28]	@ (8001c5c <updateScreen+0x2d8>)
 8001c3e:	f000 f845 	bl	8001ccc <formatCharToLCD>

		break;
 8001c42:	e000      	b.n	8001c46 <updateScreen+0x2c2>
		break;
	}
	default:
	{

		break;
 8001c44:	bf00      	nop
	}
	}
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000004 	.word	0x20000004
 8001c54:	200000f8 	.word	0x200000f8
 8001c58:	08006b00 	.word	0x08006b00
 8001c5c:	200000fc 	.word	0x200000fc
 8001c60:	08006b14 	.word	0x08006b14
 8001c64:	200000fa 	.word	0x200000fa
 8001c68:	08006b20 	.word	0x08006b20
 8001c6c:	20000006 	.word	0x20000006
 8001c70:	08006b2c 	.word	0x08006b2c
 8001c74:	08006b30 	.word	0x08006b30
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	10624dd3 	.word	0x10624dd3
 8001c80:	51eb851f 	.word	0x51eb851f
 8001c84:	cccccccd 	.word	0xcccccccd
 8001c88:	08006b40 	.word	0x08006b40
 8001c8c:	200000f9 	.word	0x200000f9
 8001c90:	08006b48 	.word	0x08006b48
 8001c94:	08006b54 	.word	0x08006b54
 8001c98:	200001e5 	.word	0x200001e5
 8001c9c:	200001f8 	.word	0x200001f8
 8001ca0:	41200000 	.word	0x41200000
 8001ca4:	3fe00000 	.word	0x3fe00000
 8001ca8:	08006b68 	.word	0x08006b68
 8001cac:	08006b70 	.word	0x08006b70
 8001cb0:	200002f8 	.word	0x200002f8
 8001cb4:	2000020c 	.word	0x2000020c
 8001cb8:	08006b7c 	.word	0x08006b7c
 8001cbc:	08006b8c 	.word	0x08006b8c
 8001cc0:	08006b98 	.word	0x08006b98
 8001cc4:	08006ba8 	.word	0x08006ba8
 8001cc8:	08006bb4 	.word	0x08006bb4

08001ccc <formatCharToLCD>:
//Add padding for LCD display
//If padding is added, place is 0, level is dependant on LCD top(0) or bottom(1)
void formatCharToLCD(char* message, uint8_t place, uint8_t level, uint8_t Padding)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	70fb      	strb	r3, [r7, #3]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70bb      	strb	r3, [r7, #2]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	707b      	strb	r3, [r7, #1]
	static uint8_t buffer_size;
	buffer_size = strlen(message);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fa32 	bl	8000150 <strlen>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b25      	ldr	r3, [pc, #148]	@ (8001d88 <formatCharToLCD+0xbc>)
 8001cf2:	701a      	strb	r2, [r3, #0]
	if(buffer_size != 0 && buffer_size <= LCD_COLS)
 8001cf4:	4b24      	ldr	r3, [pc, #144]	@ (8001d88 <formatCharToLCD+0xbc>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d041      	beq.n	8001d80 <formatCharToLCD+0xb4>
 8001cfc:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <formatCharToLCD+0xbc>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d83d      	bhi.n	8001d80 <formatCharToLCD+0xb4>
	{
		if(Padding==ALIGN_NO)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <formatCharToLCD+0x4c>
		{
			LCD_SEND_STR(message,place, level);
 8001d0a:	78ba      	ldrb	r2, [r7, #2]
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f004 f9ff 	bl	8006114 <LCD_SEND_STR>
 8001d16:	e033      	b.n	8001d80 <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_LEFT)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d10d      	bne.n	8001d3a <formatCharToLCD+0x6e>
		{
			charAddPadding(message, ALIGN_LEFT, buffer_size);
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <formatCharToLCD+0xbc>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	2101      	movs	r1, #1
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f830 	bl	8001d8c <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001d2c:	78bb      	ldrb	r3, [r7, #2]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2100      	movs	r1, #0
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f004 f9ee 	bl	8006114 <LCD_SEND_STR>
 8001d38:	e022      	b.n	8001d80 <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_RIGHT)
 8001d3a:	787b      	ldrb	r3, [r7, #1]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d10d      	bne.n	8001d5c <formatCharToLCD+0x90>
		{
			charAddPadding(message, ALIGN_RIGHT, buffer_size);
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <formatCharToLCD+0xbc>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	2102      	movs	r1, #2
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f81f 	bl	8001d8c <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001d4e:	78bb      	ldrb	r3, [r7, #2]
 8001d50:	461a      	mov	r2, r3
 8001d52:	2100      	movs	r1, #0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f004 f9dd 	bl	8006114 <LCD_SEND_STR>
 8001d5a:	e011      	b.n	8001d80 <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_CENTER)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d10d      	bne.n	8001d7e <formatCharToLCD+0xb2>
		{
			charAddPadding(message, ALIGN_CENTER, buffer_size);
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <formatCharToLCD+0xbc>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	2103      	movs	r1, #3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f80e 	bl	8001d8c <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001d70:	78bb      	ldrb	r3, [r7, #2]
 8001d72:	461a      	mov	r2, r3
 8001d74:	2100      	movs	r1, #0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f004 f9cc 	bl	8006114 <LCD_SEND_STR>
 8001d7c:	e000      	b.n	8001d80 <formatCharToLCD+0xb4>
		}
		else return;
 8001d7e:	bf00      	nop
	}
}
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000210 	.word	0x20000210

08001d8c <charAddPadding>:

void charAddPadding(char* buffer, uint8_t align,uint8_t size)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	70bb      	strb	r3, [r7, #2]
	if(align == ALIGN_LEFT)
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10e      	bne.n	8001dc0 <charAddPadding+0x34>
	{
		for(uint8_t i = size;i<LCD_COLS;i++)
 8001da2:	78bb      	ldrb	r3, [r7, #2]
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e007      	b.n	8001db8 <charAddPadding+0x2c>
		{
			buffer[i] = ' ';
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	2220      	movs	r2, #32
 8001db0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = size;i<LCD_COLS;i++)
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	3301      	adds	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b0f      	cmp	r3, #15
 8001dbc:	d9f4      	bls.n	8001da8 <charAddPadding+0x1c>
 8001dbe:	e054      	b.n	8001e6a <charAddPadding+0xde>
		}
	}
	else if(align == ALIGN_RIGHT)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d11c      	bne.n	8001e00 <charAddPadding+0x74>
	{
		memmove(buffer+(LCD_COLS-size),buffer,size);// shift to the right
 8001dc6:	78bb      	ldrb	r3, [r7, #2]
 8001dc8:	f1c3 0310 	rsb	r3, r3, #16
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	78ba      	ldrb	r2, [r7, #2]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 f9f8 	bl	80061cc <memmove>
		for(uint8_t i = 0;i<LCD_COLS-size;i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73bb      	strb	r3, [r7, #14]
 8001de0:	e007      	b.n	8001df2 <charAddPadding+0x66>
		{
			buffer[i] = ' ';
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	2220      	movs	r2, #32
 8001dea:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i<LCD_COLS-size;i++)
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73bb      	strb	r3, [r7, #14]
 8001df2:	7bba      	ldrb	r2, [r7, #14]
 8001df4:	78bb      	ldrb	r3, [r7, #2]
 8001df6:	f1c3 0310 	rsb	r3, r3, #16
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbf1      	blt.n	8001de2 <charAddPadding+0x56>
 8001dfe:	e034      	b.n	8001e6a <charAddPadding+0xde>
		}
	}
	else if(align == ALIGN_CENTER)
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d130      	bne.n	8001e68 <charAddPadding+0xdc>
	{
		uint8_t start_place = (LCD_COLS - size)/2;//left side
 8001e06:	78bb      	ldrb	r3, [r7, #2]
 8001e08:	f1c3 0310 	rsb	r3, r3, #16
 8001e0c:	0fda      	lsrs	r2, r3, #31
 8001e0e:	4413      	add	r3, r2
 8001e10:	105b      	asrs	r3, r3, #1
 8001e12:	72fb      	strb	r3, [r7, #11]
		memmove(buffer+start_place,buffer,size);// shift to the right
 8001e14:	7afb      	ldrb	r3, [r7, #11]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	78ba      	ldrb	r2, [r7, #2]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 f9d4 	bl	80061cc <memmove>
		for(uint8_t i = 0;i<start_place;i++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	737b      	strb	r3, [r7, #13]
 8001e28:	e007      	b.n	8001e3a <charAddPadding+0xae>
		{
			buffer[i] = ' ';
 8001e2a:	7b7b      	ldrb	r3, [r7, #13]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	2220      	movs	r2, #32
 8001e32:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i<start_place;i++)
 8001e34:	7b7b      	ldrb	r3, [r7, #13]
 8001e36:	3301      	adds	r3, #1
 8001e38:	737b      	strb	r3, [r7, #13]
 8001e3a:	7b7a      	ldrb	r2, [r7, #13]
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3f3      	bcc.n	8001e2a <charAddPadding+0x9e>
		}
		start_place +=size;//right side
 8001e42:	7afa      	ldrb	r2, [r7, #11]
 8001e44:	78bb      	ldrb	r3, [r7, #2]
 8001e46:	4413      	add	r3, r2
 8001e48:	72fb      	strb	r3, [r7, #11]
		for(uint8_t i = start_place;i<LCD_COLS;i++)
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	733b      	strb	r3, [r7, #12]
 8001e4e:	e007      	b.n	8001e60 <charAddPadding+0xd4>
		{
			buffer[i] = ' ';
 8001e50:	7b3b      	ldrb	r3, [r7, #12]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	2220      	movs	r2, #32
 8001e58:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = start_place;i<LCD_COLS;i++)
 8001e5a:	7b3b      	ldrb	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	733b      	strb	r3, [r7, #12]
 8001e60:	7b3b      	ldrb	r3, [r7, #12]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d9f4      	bls.n	8001e50 <charAddPadding+0xc4>
 8001e66:	e000      	b.n	8001e6a <charAddPadding+0xde>
		}
	}
	else
	{
		return;
 8001e68:	bf00      	nop
	}
}
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <PWM_Control_loop>:

void PWM_Control_loop(TIM_HandleTypeDef *htim, uint16_t *current, uint16_t voltage)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
	if(*current > OVERCURRENT_VALUE)//overcurrent protection 2.5A
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001e86:	d90a      	bls.n	8001e9e <PWM_Control_loop+0x2e>
	{
		HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	4811      	ldr	r0, [pc, #68]	@ (8001ed4 <PWM_Control_loop+0x64>)
 8001e8e:	f002 fa90 	bl	80043b2 <HAL_GPIO_WritePin>
		*current = 0;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2200      	movs	r2, #0
 8001e96:	801a      	strh	r2, [r3, #0]
		OverCurrent_indication = 1;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <PWM_Control_loop+0x68>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
	}

	if(Cutoff_voltage < (voltage*1000))
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <PWM_Control_loop+0x6c>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001eac:	fb02 f303 	mul.w	r3, r2, r3
 8001eb0:	4299      	cmp	r1, r3
 8001eb2:	da0a      	bge.n	8001eca <PWM_Control_loop+0x5a>
	{
		HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_SET);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	4806      	ldr	r0, [pc, #24]	@ (8001ed4 <PWM_Control_loop+0x64>)
 8001eba:	f002 fa7a 	bl	80043b2 <HAL_GPIO_WritePin>
		STATE_MCU_CURRENT = FINISH;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <PWM_Control_loop+0x70>)
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	701a      	strb	r2, [r3, #0]
		STATE_MCU_PREVIOUS = DISCHARGE;
 8001ec4:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <PWM_Control_loop+0x74>)
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	701a      	strb	r2, [r3, #0]
	}
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	200001e5 	.word	0x200001e5
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	200000f8 	.word	0x200000f8
 8001ee4:	200000f9 	.word	0x200000f9

08001ee8 <HAL_GPIO_EXTI_Callback>:

//INTERRUPT CALLBACKS

//EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
	if(uwTick-last_button_time > BUTTON_DEBOUNCE_MS)
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x30>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x34>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b1e      	cmp	r3, #30
 8001efe:	d906      	bls.n	8001f0e <HAL_GPIO_EXTI_Callback+0x26>
	{
		button_activity = 1;
 8001f00:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_GPIO_EXTI_Callback+0x38>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
		last_button_time = uwTick;
 8001f06:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x30>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a04      	ldr	r2, [pc, #16]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x34>)
 8001f0c:	6013      	str	r3, [r2, #0]

	//IMPLEMENT THE STARTING PROCESS
	//	STATE_MCU_CURRENT = DISCHARGE;
	//	STATE_MCU_PREVIOUS = SETUP;

}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	200002f8 	.word	0x200002f8
 8001f1c:	200001e8 	.word	0x200001e8
 8001f20:	200001e4 	.word	0x200001e4
 8001f24:	00000000 	.word	0x00000000

08001f28 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum[2] = {0};
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
	static uint16_t Current_BATT;
	static uint16_t Voltage; // for cutoff calculation only


	//AVERAGING
	for(uint16_t i = 0; i < (ADC_DMA_SIZE/2)-1; i=i+2)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	82fb      	strh	r3, [r7, #22]
 8001f3e:	e011      	b.n	8001f64 <HAL_ADC_ConvHalfCpltCallback+0x3c>
	{
		adc_sum[0] += ADC_Values[i];//first channel
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8afa      	ldrh	r2, [r7, #22]
 8001f44:	4954      	ldr	r1, [pc, #336]	@ (8002098 <HAL_ADC_ConvHalfCpltCallback+0x170>)
 8001f46:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
		adc_sum[1] += ADC_Values[i+1];//second channel
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	8afa      	ldrh	r2, [r7, #22]
 8001f52:	3201      	adds	r2, #1
 8001f54:	4950      	ldr	r1, [pc, #320]	@ (8002098 <HAL_ADC_ConvHalfCpltCallback+0x170>)
 8001f56:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
	for(uint16_t i = 0; i < (ADC_DMA_SIZE/2)-1; i=i+2)
 8001f5e:	8afb      	ldrh	r3, [r7, #22]
 8001f60:	3302      	adds	r3, #2
 8001f62:	82fb      	strh	r3, [r7, #22]
 8001f64:	8afb      	ldrh	r3, [r7, #22]
 8001f66:	2b30      	cmp	r3, #48	@ 0x30
 8001f68:	d9ea      	bls.n	8001f40 <HAL_ADC_ConvHalfCpltCallback+0x18>
	}
	adc_sum[0] = 4*adc_sum[0]/ADC_DMA_SIZE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4a4b      	ldr	r2, [pc, #300]	@ (800209c <HAL_ADC_ConvHalfCpltCallback+0x174>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	60fb      	str	r3, [r7, #12]
	adc_sum[1] = 4*adc_sum[1]/ADC_DMA_SIZE;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4a47      	ldr	r2, [pc, #284]	@ (800209c <HAL_ADC_ConvHalfCpltCallback+0x174>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	613b      	str	r3, [r7, #16]


	//CURRENT AND MAH CONVERSION
	Current_BATT = 3300*adc_sum[1]/R_load/ADC_steps;//convert to mA
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fa27 	bl	80003e4 <__aeabi_ui2d>
 8001f96:	a33c      	add	r3, pc, #240	@ (adr r3, 8002088 <HAL_ADC_ConvHalfCpltCallback+0x160>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe fbc6 	bl	800072c <__aeabi_ddiv>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b3c      	ldr	r3, [pc, #240]	@ (80020a0 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8001fae:	f7fe fbbd 	bl	800072c <__aeabi_ddiv>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fc9f 	bl	80008fc <__aeabi_d2uiz>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4b38      	ldr	r3, [pc, #224]	@ (80020a4 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 8001fc4:	801a      	strh	r2, [r3, #0]
	Voltage = (uint16_t)((Vdda*adc_sum[0])*1.0/ADC_steps*R_divider_multiplier);//in volts
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fdbd 	bl	8000b48 <__aeabi_ui2f>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <HAL_ADC_ConvHalfCpltCallback+0x180>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f7fe fe0e 	bl	8000bf8 <__aeabi_fmul>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fa22 	bl	8000428 <__aeabi_f2d>
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80020a0 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8001fea:	f7fe fb9f 	bl	800072c <__aeabi_ddiv>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	a326      	add	r3, pc, #152	@ (adr r3, 8002090 <HAL_ADC_ConvHalfCpltCallback+0x168>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe fb96 	bl	800072c <__aeabi_ddiv>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fc78 	bl	80008fc <__aeabi_d2uiz>
 800200c:	4603      	mov	r3, r0
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <HAL_ADC_ConvHalfCpltCallback+0x184>)
 8002012:	801a      	strh	r2, [r3, #0]
	PWM_Control_loop(&htim2,&Current_BATT,Voltage);
 8002014:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <HAL_ADC_ConvHalfCpltCallback+0x184>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4922      	ldr	r1, [pc, #136]	@ (80020a4 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 800201c:	4824      	ldr	r0, [pc, #144]	@ (80020b0 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 800201e:	f7ff ff27 	bl	8001e70 <PWM_Control_loop>
	DischargeDisplayData.capacity_mah += Current_BATT*MAH_CONVERSION;
 8002022:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 8002024:	689c      	ldr	r4, [r3, #8]
 8002026:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fd90 	bl	8000b50 <__aeabi_i2f>
 8002030:	4603      	mov	r3, r0
 8002032:	4921      	ldr	r1, [pc, #132]	@ (80020b8 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fddf 	bl	8000bf8 <__aeabi_fmul>
 800203a:	4603      	mov	r3, r0
 800203c:	4619      	mov	r1, r3
 800203e:	4620      	mov	r0, r4
 8002040:	f7fe fcd2 	bl	80009e8 <__addsf3>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 800204a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop

	//defensive guard band
	__disable_irq();
	ADC_VOLTAGE_ACCUM += adc_sum[0];
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <HAL_ADC_ConvHalfCpltCallback+0x194>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a18      	ldr	r2, [pc, #96]	@ (80020bc <HAL_ADC_ConvHalfCpltCallback+0x194>)
 800205a:	6013      	str	r3, [r2, #0]
	ADC_CURRENT_ACCUM += adc_sum[1];
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4413      	add	r3, r2
 8002064:	4a16      	ldr	r2, [pc, #88]	@ (80020c0 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8002066:	6013      	str	r3, [r2, #0]
	ADC_READING_COUNTER+=1;
 8002068:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	3301      	adds	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8002074:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002076:	b662      	cpsie	i
}
 8002078:	bf00      	nop
	__enable_irq();

	//printf("HalfCallback %lu",uwTick);
}
 800207a:	bf00      	nop
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
 8002088:	c28f5c29 	.word	0xc28f5c29
 800208c:	3fcc28f5 	.word	0x3fcc28f5
 8002090:	e0000000 	.word	0xe0000000
 8002094:	3fc7b425 	.word	0x3fc7b425
 8002098:	2000011c 	.word	0x2000011c
 800209c:	51eb851f 	.word	0x51eb851f
 80020a0:	40b00000 	.word	0x40b00000
 80020a4:	20000212 	.word	0x20000212
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000214 	.word	0x20000214
 80020b0:	20000220 	.word	0x20000220
 80020b4:	200001f8 	.word	0x200001f8
 80020b8:	36690453 	.word	0x36690453
 80020bc:	200001ec 	.word	0x200001ec
 80020c0:	200001f0 	.word	0x200001f0
 80020c4:	200001f4 	.word	0x200001f4

080020c8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum[2] = {0};
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
	static uint16_t Current_BATT;
	static uint16_t Voltage; // for cutoff calculation only

	for(uint16_t i = (ADC_DMA_SIZE/2); i < ADC_DMA_SIZE; i=i+2)
 80020da:	2332      	movs	r3, #50	@ 0x32
 80020dc:	82fb      	strh	r3, [r7, #22]
 80020de:	e011      	b.n	8002104 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		adc_sum[0] += ADC_Values[i];//first channel
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8afa      	ldrh	r2, [r7, #22]
 80020e4:	494c      	ldr	r1, [pc, #304]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x150>)
 80020e6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
		adc_sum[1] += ADC_Values[i+1];//second channel
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	8afa      	ldrh	r2, [r7, #22]
 80020f2:	3201      	adds	r2, #1
 80020f4:	4948      	ldr	r1, [pc, #288]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x150>)
 80020f6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80020fa:	4413      	add	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
	for(uint16_t i = (ADC_DMA_SIZE/2); i < ADC_DMA_SIZE; i=i+2)
 80020fe:	8afb      	ldrh	r3, [r7, #22]
 8002100:	3302      	adds	r3, #2
 8002102:	82fb      	strh	r3, [r7, #22]
 8002104:	8afb      	ldrh	r3, [r7, #22]
 8002106:	2b63      	cmp	r3, #99	@ 0x63
 8002108:	d9ea      	bls.n	80020e0 <HAL_ADC_ConvCpltCallback+0x18>
	}
	//AVERAGES
	adc_sum[0] = 4*adc_sum[0]/ADC_DMA_SIZE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4a43      	ldr	r2, [pc, #268]	@ (800221c <HAL_ADC_ConvCpltCallback+0x154>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	60fb      	str	r3, [r7, #12]
	adc_sum[1] = 4*adc_sum[1]/ADC_DMA_SIZE;
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4a3f      	ldr	r2, [pc, #252]	@ (800221c <HAL_ADC_ConvCpltCallback+0x154>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	613b      	str	r3, [r7, #16]

	//CURRENT AND MAH CONVERSION
	Current_BATT = 3300*adc_sum[1]/R_load/ADC_steps;//convert to mA
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe f957 	bl	80003e4 <__aeabi_ui2d>
 8002136:	a336      	add	r3, pc, #216	@ (adr r3, 8002210 <HAL_ADC_ConvCpltCallback+0x148>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe faf6 	bl	800072c <__aeabi_ddiv>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <HAL_ADC_ConvCpltCallback+0x158>)
 800214e:	f7fe faed 	bl	800072c <__aeabi_ddiv>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f7fe fbcf 	bl	80008fc <__aeabi_d2uiz>
 800215e:	4603      	mov	r3, r0
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b30      	ldr	r3, [pc, #192]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x15c>)
 8002164:	801a      	strh	r2, [r3, #0]
	Voltage = (uint16_t)Vdda*adc_sum[0]/ADC_steps*R_divider_multiplier;//in volts
 8002166:	4b30      	ldr	r3, [pc, #192]	@ (8002228 <HAL_ADC_ConvCpltCallback+0x160>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fe94 	bl	8000e98 <__aeabi_f2uiz>
 8002170:	4603      	mov	r3, r0
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	0b1b      	lsrs	r3, r3, #12
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fce2 	bl	8000b48 <__aeabi_ui2f>
 8002184:	4603      	mov	r3, r0
 8002186:	4929      	ldr	r1, [pc, #164]	@ (800222c <HAL_ADC_ConvCpltCallback+0x164>)
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fde9 	bl	8000d60 <__aeabi_fdiv>
 800218e:	4603      	mov	r3, r0
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fe81 	bl	8000e98 <__aeabi_f2uiz>
 8002196:	4603      	mov	r3, r0
 8002198:	b29a      	uxth	r2, r3
 800219a:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <HAL_ADC_ConvCpltCallback+0x168>)
 800219c:	801a      	strh	r2, [r3, #0]
	PWM_Control_loop(&htim2,&Current_BATT,Voltage);
 800219e:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <HAL_ADC_ConvCpltCallback+0x168>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	491f      	ldr	r1, [pc, #124]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x15c>)
 80021a6:	4823      	ldr	r0, [pc, #140]	@ (8002234 <HAL_ADC_ConvCpltCallback+0x16c>)
 80021a8:	f7ff fe62 	bl	8001e70 <PWM_Control_loop>
	DischargeDisplayData.capacity_mah += Current_BATT*MAH_CONVERSION;
 80021ac:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <HAL_ADC_ConvCpltCallback+0x170>)
 80021ae:	689c      	ldr	r4, [r3, #8]
 80021b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x15c>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fccb 	bl	8000b50 <__aeabi_i2f>
 80021ba:	4603      	mov	r3, r0
 80021bc:	491f      	ldr	r1, [pc, #124]	@ (800223c <HAL_ADC_ConvCpltCallback+0x174>)
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fd1a 	bl	8000bf8 <__aeabi_fmul>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4619      	mov	r1, r3
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7fe fc0d 	bl	80009e8 <__addsf3>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_ADC_ConvCpltCallback+0x170>)
 80021d4:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d6:	b672      	cpsid	i
}
 80021d8:	bf00      	nop

	//defensive guard band
	__disable_irq();
	ADC_VOLTAGE_ACCUM += adc_sum[0];
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <HAL_ADC_ConvCpltCallback+0x178>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <HAL_ADC_ConvCpltCallback+0x178>)
 80021e4:	6013      	str	r3, [r2, #0]
	ADC_CURRENT_ACCUM += adc_sum[1];
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <HAL_ADC_ConvCpltCallback+0x17c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a15      	ldr	r2, [pc, #84]	@ (8002244 <HAL_ADC_ConvCpltCallback+0x17c>)
 80021f0:	6013      	str	r3, [r2, #0]
	ADC_READING_COUNTER+=1;
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <HAL_ADC_ConvCpltCallback+0x180>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_ADC_ConvCpltCallback+0x180>)
 80021fe:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002200:	b662      	cpsie	i
}
 8002202:	bf00      	nop
	__enable_irq();

	//PWM CONTROL LOOP
	//printf("FullCallback %lu",uwTick);
}
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	f3af 8000 	nop.w
 8002210:	c28f5c29 	.word	0xc28f5c29
 8002214:	3fcc28f5 	.word	0x3fcc28f5
 8002218:	2000011c 	.word	0x2000011c
 800221c:	51eb851f 	.word	0x51eb851f
 8002220:	40b00000 	.word	0x40b00000
 8002224:	20000216 	.word	0x20000216
 8002228:	20000000 	.word	0x20000000
 800222c:	3e3da12f 	.word	0x3e3da12f
 8002230:	20000218 	.word	0x20000218
 8002234:	20000220 	.word	0x20000220
 8002238:	200001f8 	.word	0x200001f8
 800223c:	36690453 	.word	0x36690453
 8002240:	200001ec 	.word	0x200001ec
 8002244:	200001f0 	.word	0x200001f0
 8002248:	200001f4 	.word	0x200001f4

0800224c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002250:	b672      	cpsid	i
}
 8002252:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8002254:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002258:	4803      	ldr	r0, [pc, #12]	@ (8002268 <Error_Handler+0x1c>)
 800225a:	f002 f8c2 	bl	80043e2 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800225e:	20c8      	movs	r0, #200	@ 0xc8
 8002260:	f000 fae4 	bl	800282c <HAL_Delay>
		HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8002264:	bf00      	nop
 8002266:	e7f5      	b.n	8002254 <Error_Handler+0x8>
 8002268:	40011000 	.word	0x40011000

0800226c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <HAL_MspInit+0x5c>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	4a14      	ldr	r2, [pc, #80]	@ (80022c8 <HAL_MspInit+0x5c>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6193      	str	r3, [r2, #24]
 800227e:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_MspInit+0x5c>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <HAL_MspInit+0x5c>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a0e      	ldr	r2, [pc, #56]	@ (80022c8 <HAL_MspInit+0x5c>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <HAL_MspInit+0x5c>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_MspInit+0x60>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <HAL_MspInit+0x60>)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010000 	.word	0x40010000

080022d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <NMI_Handler+0x4>

080022d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <HardFault_Handler+0x4>

080022e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <MemManage_Handler+0x4>

080022e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <BusFault_Handler+0x4>

080022f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <UsageFault_Handler+0x4>

080022f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002320:	f000 fa68 	bl	80027f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}

08002328 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_mode_Pin);
 800232c:	2002      	movs	r0, #2
 800232e:	f002 f871 	bl	8004414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <DMA1_Channel1_IRQHandler+0x10>)
 800233e:	f001 fd69 	bl	8003e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200000b4 	.word	0x200000b4

0800234c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <ADC1_2_IRQHandler+0x10>)
 8002352:	f000 fc91 	bl	8002c78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000084 	.word	0x20000084

08002360 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <TIM3_IRQHandler+0x10>)
 8002366:	f003 f803 	bl	8005370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000268 	.word	0x20000268

08002374 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_sub_Pin);
 8002378:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800237c:	f002 f84a 	bl	8004414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_add_Pin);
 8002380:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002384:	f002 f846 	bl	8004414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002394:	4a14      	ldr	r2, [pc, #80]	@ (80023e8 <_sbrk+0x5c>)
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <_sbrk+0x60>)
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a0:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a8:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <_sbrk+0x64>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	@ (80023f4 <_sbrk+0x68>)
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ae:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023bc:	f003 ff28 	bl	8006210 <__errno>
 80023c0:	4603      	mov	r3, r0
 80023c2:	220c      	movs	r2, #12
 80023c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	e009      	b.n	80023e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d2:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a05      	ldr	r2, [pc, #20]	@ (80023f0 <_sbrk+0x64>)
 80023dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20005000 	.word	0x20005000
 80023ec:	00000200 	.word	0x00000200
 80023f0:	2000021c 	.word	0x2000021c
 80023f4:	20000448 	.word	0x20000448

080023f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	@ 0x38
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002418:	f107 0320 	add.w	r3, r7, #32
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
 8002430:	615a      	str	r2, [r3, #20]
 8002432:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002434:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 8002436:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800243a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800243c:	4b2a      	ldr	r3, [pc, #168]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 800243e:	2200      	movs	r2, #0
 8002440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002442:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8002448:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 800244a:	22c7      	movs	r2, #199	@ 0xc7
 800244c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244e:	4b26      	ldr	r3, [pc, #152]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002454:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 8002456:	2280      	movs	r2, #128	@ 0x80
 8002458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800245a:	4823      	ldr	r0, [pc, #140]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 800245c:	f002 fd5a 	bl	8004f14 <HAL_TIM_Base_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002466:	f7ff fef1 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002470:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002474:	4619      	mov	r1, r3
 8002476:	481c      	ldr	r0, [pc, #112]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 8002478:	f003 f92c 	bl	80056d4 <HAL_TIM_ConfigClockSource>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002482:	f7ff fee3 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002486:	4818      	ldr	r0, [pc, #96]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 8002488:	f002 fe14 	bl	80050b4 <HAL_TIM_PWM_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002492:	f7ff fedb 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800249e:	f107 0320 	add.w	r3, r7, #32
 80024a2:	4619      	mov	r1, r3
 80024a4:	4810      	ldr	r0, [pc, #64]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 80024a6:	f003 fcb9 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80024b0:	f7ff fecc 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b4:	2360      	movs	r3, #96	@ 0x60
 80024b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	220c      	movs	r2, #12
 80024c8:	4619      	mov	r1, r3
 80024ca:	4807      	ldr	r0, [pc, #28]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 80024cc:	f003 f840 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80024d6:	f7ff feb9 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024da:	4803      	ldr	r0, [pc, #12]	@ (80024e8 <MX_TIM2_Init+0xe4>)
 80024dc:	f000 f8ee 	bl	80026bc <HAL_TIM_MspPostInit>

}
 80024e0:	bf00      	nop
 80024e2:	3738      	adds	r7, #56	@ 0x38
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000220 	.word	0x20000220

080024ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002500:	463b      	mov	r3, r7
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002508:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <MX_TIM3_Init+0x94>)
 800250a:	4a1e      	ldr	r2, [pc, #120]	@ (8002584 <MX_TIM3_Init+0x98>)
 800250c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800250e:	4b1c      	ldr	r3, [pc, #112]	@ (8002580 <MX_TIM3_Init+0x94>)
 8002510:	2207      	movs	r2, #7
 8002512:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b1a      	ldr	r3, [pc, #104]	@ (8002580 <MX_TIM3_Init+0x94>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800251a:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <MX_TIM3_Init+0x94>)
 800251c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002520:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <MX_TIM3_Init+0x94>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002528:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <MX_TIM3_Init+0x94>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800252e:	4814      	ldr	r0, [pc, #80]	@ (8002580 <MX_TIM3_Init+0x94>)
 8002530:	f002 fcf0 	bl	8004f14 <HAL_TIM_Base_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800253a:	f7ff fe87 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002542:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002544:	f107 0308 	add.w	r3, r7, #8
 8002548:	4619      	mov	r1, r3
 800254a:	480d      	ldr	r0, [pc, #52]	@ (8002580 <MX_TIM3_Init+0x94>)
 800254c:	f003 f8c2 	bl	80056d4 <HAL_TIM_ConfigClockSource>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002556:	f7ff fe79 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800255a:	2320      	movs	r3, #32
 800255c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002562:	463b      	mov	r3, r7
 8002564:	4619      	mov	r1, r3
 8002566:	4806      	ldr	r0, [pc, #24]	@ (8002580 <MX_TIM3_Init+0x94>)
 8002568:	f003 fc58 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002572:	f7ff fe6b 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000268 	.word	0x20000268
 8002584:	40000400 	.word	0x40000400

08002588 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259c:	463b      	mov	r3, r7
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <MX_TIM4_Init+0x94>)
 80025a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002620 <MX_TIM4_Init+0x98>)
 80025a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <MX_TIM4_Init+0x94>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <MX_TIM4_Init+0x94>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80025b6:	4b19      	ldr	r3, [pc, #100]	@ (800261c <MX_TIM4_Init+0x94>)
 80025b8:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80025bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025be:	4b17      	ldr	r3, [pc, #92]	@ (800261c <MX_TIM4_Init+0x94>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c4:	4b15      	ldr	r3, [pc, #84]	@ (800261c <MX_TIM4_Init+0x94>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ca:	4814      	ldr	r0, [pc, #80]	@ (800261c <MX_TIM4_Init+0x94>)
 80025cc:	f002 fca2 	bl	8004f14 <HAL_TIM_Base_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025d6:	f7ff fe39 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	4619      	mov	r1, r3
 80025e6:	480d      	ldr	r0, [pc, #52]	@ (800261c <MX_TIM4_Init+0x94>)
 80025e8:	f003 f874 	bl	80056d4 <HAL_TIM_ConfigClockSource>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80025f2:	f7ff fe2b 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025fe:	463b      	mov	r3, r7
 8002600:	4619      	mov	r1, r3
 8002602:	4806      	ldr	r0, [pc, #24]	@ (800261c <MX_TIM4_Init+0x94>)
 8002604:	f003 fc0a 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800260e:	f7ff fe1d 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200002b0 	.word	0x200002b0
 8002620:	40000800 	.word	0x40000800

08002624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002634:	d10c      	bne.n	8002650 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002636:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a1d      	ldr	r2, [pc, #116]	@ (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	61d3      	str	r3, [r2, #28]
 8002642:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800264e:	e02a      	b.n	80026a6 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <HAL_TIM_Base_MspInit+0x90>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d114      	bne.n	8002684 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a14      	ldr	r2, [pc, #80]	@ (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	201d      	movs	r0, #29
 8002678:	f001 fa9f 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800267c:	201d      	movs	r0, #29
 800267e:	f001 fab8 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
}
 8002682:	e010      	b.n	80026a6 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0b      	ldr	r2, [pc, #44]	@ (80026b8 <HAL_TIM_Base_MspInit+0x94>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10b      	bne.n	80026a6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a07      	ldr	r2, [pc, #28]	@ (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	61d3      	str	r3, [r2, #28]
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40000800 	.word	0x40000800

080026bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026da:	d117      	bne.n	800270c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <HAL_TIM_MspPostInit+0x58>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002714 <HAL_TIM_MspPostInit+0x58>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <HAL_TIM_MspPostInit+0x58>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOSFET_PWM_Pin;
 80026f4:	2308      	movs	r3, #8
 80026f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOSFET_PWM_GPIO_Port, &GPIO_InitStruct);
 8002700:	f107 0310 	add.w	r3, r7, #16
 8002704:	4619      	mov	r1, r3
 8002706:	4804      	ldr	r0, [pc, #16]	@ (8002718 <HAL_TIM_MspPostInit+0x5c>)
 8002708:	f001 fcb8 	bl	800407c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800270c:	bf00      	nop
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	40010800 	.word	0x40010800

0800271c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800271c:	f7ff fe6c 	bl	80023f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002720:	480b      	ldr	r0, [pc, #44]	@ (8002750 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002722:	490c      	ldr	r1, [pc, #48]	@ (8002754 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002724:	4a0c      	ldr	r2, [pc, #48]	@ (8002758 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a09      	ldr	r2, [pc, #36]	@ (800275c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002738:	4c09      	ldr	r4, [pc, #36]	@ (8002760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002746:	f003 fd69 	bl	800621c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274a:	f7fe fd79 	bl	8001240 <main>
  bx lr
 800274e:	4770      	bx	lr
  ldr r0, =_sdata
 8002750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002754:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002758:	08006c4c 	.word	0x08006c4c
  ldr r2, =_sbss
 800275c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002760:	20000448 	.word	0x20000448

08002764 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002764:	e7fe      	b.n	8002764 <CAN1_RX1_IRQHandler>
	...

08002768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_Init+0x28>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <HAL_Init+0x28>)
 8002772:	f043 0310 	orr.w	r3, r3, #16
 8002776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002778:	2003      	movs	r0, #3
 800277a:	f001 fa13 	bl	8003ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800277e:	200f      	movs	r0, #15
 8002780:	f000 f808 	bl	8002794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002784:	f7ff fd72 	bl	800226c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800279c:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <HAL_InitTick+0x54>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_InitTick+0x58>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 fa2b 	bl	8003c0e <HAL_SYSTICK_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e00e      	b.n	80027e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b0f      	cmp	r3, #15
 80027c6:	d80a      	bhi.n	80027de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c8:	2200      	movs	r2, #0
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f001 f9f3 	bl	8003bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d4:	4a06      	ldr	r2, [pc, #24]	@ (80027f0 <HAL_InitTick+0x5c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000000c 	.word	0x2000000c
 80027ec:	20000014 	.word	0x20000014
 80027f0:	20000010 	.word	0x20000010

080027f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_IncTick+0x1c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_IncTick+0x20>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a03      	ldr	r2, [pc, #12]	@ (8002814 <HAL_IncTick+0x20>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000014 	.word	0x20000014
 8002814:	200002f8 	.word	0x200002f8

08002818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b02      	ldr	r3, [pc, #8]	@ (8002828 <HAL_GetTick+0x10>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	200002f8 	.word	0x200002f8

0800282c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff fff0 	bl	8002818 <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d005      	beq.n	8002852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002846:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_Delay+0x44>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002852:	bf00      	nop
 8002854:	f7ff ffe0 	bl	8002818 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d8f7      	bhi.n	8002854 <HAL_Delay+0x28>
  {
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000014 	.word	0x20000014

08002874 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0be      	b.n	8002a14 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fb84 	bl	8000fc0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fc01 	bl	80030c0 <ADC_ConversionStop_Disable>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 8099 	bne.w	8002a02 <HAL_ADC_Init+0x18e>
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8095 	bne.w	8002a02 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028e0:	f023 0302 	bic.w	r3, r3, #2
 80028e4:	f043 0202 	orr.w	r2, r3, #2
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7b1b      	ldrb	r3, [r3, #12]
 80028fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	4313      	orrs	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800290c:	d003      	beq.n	8002916 <HAL_ADC_Init+0xa2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d102      	bne.n	800291c <HAL_ADC_Init+0xa8>
 8002916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800291a:	e000      	b.n	800291e <HAL_ADC_Init+0xaa>
 800291c:	2300      	movs	r3, #0
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7d1b      	ldrb	r3, [r3, #20]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d119      	bne.n	8002960 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7b1b      	ldrb	r3, [r3, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	3b01      	subs	r3, #1
 800293a:	035a      	lsls	r2, r3, #13
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	e00b      	b.n	8002960 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	f043 0201 	orr.w	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	4b28      	ldr	r3, [pc, #160]	@ (8002a1c <HAL_ADC_Init+0x1a8>)
 800297c:	4013      	ands	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	430b      	orrs	r3, r1
 8002986:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002990:	d003      	beq.n	800299a <HAL_ADC_Init+0x126>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d104      	bne.n	80029a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	3b01      	subs	r3, #1
 80029a0:	051b      	lsls	r3, r3, #20
 80029a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	4b18      	ldr	r3, [pc, #96]	@ (8002a20 <HAL_ADC_Init+0x1ac>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d10b      	bne.n	80029e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029de:	e018      	b.n	8002a12 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	f023 0312 	bic.w	r3, r3, #18
 80029e8:	f043 0210 	orr.w	r2, r3, #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a00:	e007      	b.n	8002a12 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	ffe1f7fd 	.word	0xffe1f7fd
 8002a20:	ff1f0efe 	.word	0xff1f0efe

08002a24 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a64      	ldr	r2, [pc, #400]	@ (8002bcc <HAL_ADC_Start_DMA+0x1a8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_ADC_Start_DMA+0x24>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a63      	ldr	r2, [pc, #396]	@ (8002bd0 <HAL_ADC_Start_DMA+0x1ac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d106      	bne.n	8002a56 <HAL_ADC_Start_DMA+0x32>
 8002a48:	4b60      	ldr	r3, [pc, #384]	@ (8002bcc <HAL_ADC_Start_DMA+0x1a8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 80b3 	bne.w	8002bbc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_Start_DMA+0x40>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0ae      	b.n	8002bc2 <HAL_ADC_Start_DMA+0x19e>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 facd 	bl	800300c <ADC_Enable>
 8002a72:	4603      	mov	r3, r0
 8002a74:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 809a 	bne.w	8002bb2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd0 <HAL_ADC_Start_DMA+0x1ac>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d105      	bne.n	8002aa8 <HAL_ADC_Start_DMA+0x84>
 8002a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002bcc <HAL_ADC_Start_DMA+0x1a8>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d115      	bne.n	8002ad4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d026      	beq.n	8002b10 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad2:	e01d      	b.n	8002b10 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a39      	ldr	r2, [pc, #228]	@ (8002bcc <HAL_ADC_Start_DMA+0x1a8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADC_Start_DMA+0xd0>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a38      	ldr	r2, [pc, #224]	@ (8002bd0 <HAL_ADC_Start_DMA+0x1ac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10d      	bne.n	8002b10 <HAL_ADC_Start_DMA+0xec>
 8002af4:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <HAL_ADC_Start_DMA+0x1a8>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b04:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b08:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	f023 0206 	bic.w	r2, r3, #6
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b28:	e002      	b.n	8002b30 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a25      	ldr	r2, [pc, #148]	@ (8002bd4 <HAL_ADC_Start_DMA+0x1b0>)
 8002b3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a24      	ldr	r2, [pc, #144]	@ (8002bd8 <HAL_ADC_Start_DMA+0x1b4>)
 8002b46:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a23      	ldr	r2, [pc, #140]	@ (8002bdc <HAL_ADC_Start_DMA+0x1b8>)
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0202 	mvn.w	r2, #2
 8002b58:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b68:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a18      	ldr	r0, [r3, #32]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	334c      	adds	r3, #76	@ 0x4c
 8002b74:	4619      	mov	r1, r3
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f001 f8af 	bl	8003cdc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002b88:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002b9c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002b9e:	e00f      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002bae:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002bb0:	e006      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002bba:	e001      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40012400 	.word	0x40012400
 8002bd0:	40012800 	.word	0x40012800
 8002bd4:	08003143 	.word	0x08003143
 8002bd8:	080031bf 	.word	0x080031bf
 8002bdc:	080031db 	.word	0x080031db

08002be0 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_Stop_DMA+0x1a>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e03a      	b.n	8002c70 <HAL_ADC_Stop_DMA+0x90>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa5c 	bl	80030c0 <ADC_ConversionStop_Disable>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d129      	bne.n	8002c66 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c20:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d11a      	bne.n	8002c66 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 f8b1 	bl	8003d9c <HAL_DMA_Abort>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c58:	e005      	b.n	8002c66 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d03e      	beq.n	8002d18 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d039      	beq.n	8002d18 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cc6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002cca:	d11d      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d119      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0220 	bic.w	r2, r2, #32
 8002ce2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff f9dd 	bl	80020c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f06f 0212 	mvn.w	r2, #18
 8002d16:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d04d      	beq.n	8002dbe <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d048      	beq.n	8002dbe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002d4e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002d52:	d012      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d125      	bne.n	8002dae <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d6c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d70:	d11d      	bne.n	8002dae <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d119      	bne.n	8002dae <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d88:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fc88 	bl	80036c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 020c 	mvn.w	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d012      	beq.n	8002dee <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f809 	bl	8002df6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0201 	mvn.w	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x20>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e0dc      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x1da>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b06      	cmp	r3, #6
 8002e4a:	d81c      	bhi.n	8002e86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b05      	subs	r3, #5
 8002e5e:	221f      	movs	r2, #31
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	4019      	ands	r1, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	3b05      	subs	r3, #5
 8002e78:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e84:	e03c      	b.n	8002f00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d81c      	bhi.n	8002ec8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b23      	subs	r3, #35	@ 0x23
 8002ea0:	221f      	movs	r2, #31
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	4019      	ands	r1, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b23      	subs	r3, #35	@ 0x23
 8002eba:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ec6:	e01b      	b.n	8002f00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b41      	subs	r3, #65	@ 0x41
 8002eda:	221f      	movs	r2, #31
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4019      	ands	r1, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3b41      	subs	r3, #65	@ 0x41
 8002ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d91c      	bls.n	8002f42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68d9      	ldr	r1, [r3, #12]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	3b1e      	subs	r3, #30
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4019      	ands	r1, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6898      	ldr	r0, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	3b1e      	subs	r3, #30
 8002f34:	fa00 f203 	lsl.w	r2, r0, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	e019      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6919      	ldr	r1, [r3, #16]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	2207      	movs	r2, #7
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	4019      	ands	r1, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6898      	ldr	r0, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d003      	beq.n	8002f86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f82:	2b11      	cmp	r3, #17
 8002f84:	d132      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d125      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d126      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002fac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d11a      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fb6:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <HAL_ADC_ConfigChannel+0x1e8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a13      	ldr	r2, [pc, #76]	@ (8003008 <HAL_ADC_ConfigChannel+0x1ec>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0c9a      	lsrs	r2, r3, #18
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fcc:	e002      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f9      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x1b2>
 8002fda:	e007      	b.n	8002fec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	40012400 	.word	0x40012400
 8003004:	2000000c 	.word	0x2000000c
 8003008:	431bde83 	.word	0x431bde83

0800300c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d040      	beq.n	80030ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800303a:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <ADC_Enable+0xac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1f      	ldr	r2, [pc, #124]	@ (80030bc <ADC_Enable+0xb0>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	0c9b      	lsrs	r3, r3, #18
 8003046:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003048:	e002      	b.n	8003050 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3b01      	subs	r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f9      	bne.n	800304a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003056:	f7ff fbdf 	bl	8002818 <HAL_GetTick>
 800305a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800305c:	e01f      	b.n	800309e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800305e:	f7ff fbdb 	bl	8002818 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d918      	bls.n	800309e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d011      	beq.n	800309e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	f043 0210 	orr.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e007      	b.n	80030ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d1d8      	bne.n	800305e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000000c 	.word	0x2000000c
 80030bc:	431bde83 	.word	0x431bde83

080030c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d12e      	bne.n	8003138 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030ea:	f7ff fb95 	bl	8002818 <HAL_GetTick>
 80030ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030f0:	e01b      	b.n	800312a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030f2:	f7ff fb91 	bl	8002818 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d914      	bls.n	800312a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10d      	bne.n	800312a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003112:	f043 0210 	orr.w	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e007      	b.n	800313a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d0dc      	beq.n	80030f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003158:	2b00      	cmp	r3, #0
 800315a:	d127      	bne.n	80031ac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003172:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003176:	d115      	bne.n	80031a4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800317c:	2b00      	cmp	r3, #0
 800317e:	d111      	bne.n	80031a4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7fe ff8f 	bl	80020c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80031aa:	e004      	b.n	80031b6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7fe feab 	bl	8001f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff fe01 	bl	8002e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_ADCEx_Calibration_Start+0x1e>
 800322a:	2302      	movs	r3, #2
 800322c:	e097      	b.n	800335e <HAL_ADCEx_Calibration_Start+0x14e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ff42 	bl	80030c0 <ADC_ConversionStop_Disable>
 800323c:	4603      	mov	r3, r0
 800323e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fee3 	bl	800300c <ADC_Enable>
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 8081 	bne.w	8003354 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003256:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800325a:	f023 0302 	bic.w	r3, r3, #2
 800325e:	f043 0202 	orr.w	r2, r3, #2
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003266:	4b40      	ldr	r3, [pc, #256]	@ (8003368 <HAL_ADCEx_Calibration_Start+0x158>)
 8003268:	681c      	ldr	r4, [r3, #0]
 800326a:	2002      	movs	r0, #2
 800326c:	f001 fd9c 	bl	8004da8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003270:	4603      	mov	r3, r0
 8003272:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003276:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003278:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800327a:	e002      	b.n	8003282 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3b01      	subs	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f9      	bne.n	800327c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0208 	orr.w	r2, r2, #8
 8003296:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003298:	f7ff fabe 	bl	8002818 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800329e:	e01b      	b.n	80032d8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80032a0:	f7ff faba 	bl	8002818 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b0a      	cmp	r3, #10
 80032ac:	d914      	bls.n	80032d8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	f023 0312 	bic.w	r3, r3, #18
 80032c4:	f043 0210 	orr.w	r2, r3, #16
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e042      	b.n	800335e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1dc      	bne.n	80032a0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0204 	orr.w	r2, r2, #4
 80032f4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80032f6:	f7ff fa8f 	bl	8002818 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80032fc:	e01b      	b.n	8003336 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80032fe:	f7ff fa8b 	bl	8002818 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b0a      	cmp	r3, #10
 800330a:	d914      	bls.n	8003336 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331e:	f023 0312 	bic.w	r3, r3, #18
 8003322:	f043 0210 	orr.w	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e013      	b.n	800335e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1dc      	bne.n	80032fe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	f023 0303 	bic.w	r3, r3, #3
 800334c:	f043 0201 	orr.w	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800335c:	7dfb      	ldrb	r3, [r7, #23]
}
 800335e:	4618      	mov	r0, r3
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	bf00      	nop
 8003368:	2000000c 	.word	0x2000000c

0800336c <HAL_ADCEx_InjectedStart>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_ADCEx_InjectedStart+0x1a>
 8003382:	2302      	movs	r3, #2
 8003384:	e070      	b.n	8003468 <HAL_ADCEx_InjectedStart+0xfc>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fe3c 	bl	800300c <ADC_Enable>
 8003394:	4603      	mov	r3, r0
 8003396:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d15f      	bne.n	800345e <HAL_ADCEx_InjectedStart+0xf2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2e      	ldr	r2, [pc, #184]	@ (8003470 <HAL_ADCEx_InjectedStart+0x104>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d105      	bne.n	80033c8 <HAL_ADCEx_InjectedStart+0x5c>
 80033bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003474 <HAL_ADCEx_InjectedStart+0x108>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_ADCEx_InjectedStart+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80033d4:	e005      	b.n	80033e2 <HAL_ADCEx_InjectedStart+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_ADCEx_InjectedStart+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0204 	mvn.w	r2, #4
 8003404:	601a      	str	r2, [r3, #0]
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
    /* slave, ADC is enabled only (conversion is not started). If ADC is      */
    /* master, ADC is enabled and conversion is started.                      */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d128      	bne.n	8003466 <HAL_ADCEx_InjectedStart+0xfa>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800341e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003422:	d113      	bne.n	800344c <HAL_ADCEx_InjectedStart+0xe0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003428:	4a11      	ldr	r2, [pc, #68]	@ (8003470 <HAL_ADCEx_InjectedStart+0x104>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d105      	bne.n	800343a <HAL_ADCEx_InjectedStart+0xce>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800342e:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <HAL_ADCEx_InjectedStart+0x108>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <HAL_ADCEx_InjectedStart+0xe0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 1202 	orr.w	r2, r2, #2129920	@ 0x208000
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	e00c      	b.n	8003466 <HAL_ADCEx_InjectedStart+0xfa>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	e003      	b.n	8003466 <HAL_ADCEx_InjectedStart+0xfa>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40012800 	.word	0x40012800
 8003474:	40012400 	.word	0x40012400

08003478 <HAL_ADCEx_InjectedPollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Get timeout */
  tickstart = HAL_GetTick();  
 800348a:	f7ff f9c5 	bl	8002818 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag JEOC is not set after each conversion, no timeout status can  */
  /*    be set.                                                               */
  if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d12a      	bne.n	80034f4 <HAL_ADCEx_InjectedPollForConversion+0x7c>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 800349e:	e021      	b.n	80034e4 <HAL_ADCEx_InjectedPollForConversion+0x6c>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a6:	d01d      	beq.n	80034e4 <HAL_ADCEx_InjectedPollForConversion+0x6c>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_ADCEx_InjectedPollForConversion+0x46>
 80034ae:	f7ff f9b3 	bl	8002818 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d212      	bcs.n	80034e4 <HAL_ADCEx_InjectedPollForConversion+0x6c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <HAL_ADCEx_InjectedPollForConversion+0x6c>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0b1      	b.n	8003648 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0d6      	beq.n	80034a0 <HAL_ADCEx_InjectedPollForConversion+0x28>
 80034f2:	e070      	b.n	80035d6 <HAL_ADCEx_InjectedPollForConversion+0x15e>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034f4:	4b56      	ldr	r3, [pc, #344]	@ (8003650 <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 80034f6:	681c      	ldr	r4, [r3, #0]
 80034f8:	2002      	movs	r0, #2
 80034fa:	f001 fc55 	bl	8004da8 <HAL_RCCEx_GetPeriphCLKFreq>
 80034fe:	4603      	mov	r3, r0
 8003500:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6919      	ldr	r1, [r3, #16]
 800350a:	4b52      	ldr	r3, [pc, #328]	@ (8003654 <HAL_ADCEx_InjectedPollForConversion+0x1dc>)
 800350c:	400b      	ands	r3, r1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d118      	bne.n	8003544 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68d9      	ldr	r1, [r3, #12]
 8003518:	4b4f      	ldr	r3, [pc, #316]	@ (8003658 <HAL_ADCEx_InjectedPollForConversion+0x1e0>)
 800351a:	400b      	ands	r3, r1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d111      	bne.n	8003544 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6919      	ldr	r1, [r3, #16]
 8003526:	4b4d      	ldr	r3, [pc, #308]	@ (800365c <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 8003528:	400b      	ands	r3, r1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d108      	bne.n	8003540 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68d9      	ldr	r1, [r3, #12]
 8003534:	4b4a      	ldr	r3, [pc, #296]	@ (8003660 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 8003536:	400b      	ands	r3, r1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 800353c:	2314      	movs	r3, #20
 800353e:	e020      	b.n	8003582 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8003540:	2329      	movs	r3, #41	@ 0x29
 8003542:	e01e      	b.n	8003582 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	4b44      	ldr	r3, [pc, #272]	@ (800365c <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 800354c:	400b      	ands	r3, r1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_ADCEx_InjectedPollForConversion+0xe8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68d9      	ldr	r1, [r3, #12]
 8003558:	4b41      	ldr	r3, [pc, #260]	@ (8003660 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 800355a:	400b      	ands	r3, r1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_ADCEx_InjectedPollForConversion+0x104>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6919      	ldr	r1, [r3, #16]
 8003566:	4b3f      	ldr	r3, [pc, #252]	@ (8003664 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 8003568:	400b      	ands	r3, r1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <HAL_ADCEx_InjectedPollForConversion+0x108>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68d9      	ldr	r1, [r3, #12]
 8003574:	4b3b      	ldr	r3, [pc, #236]	@ (8003664 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 8003576:	400b      	ands	r3, r1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADCEx_InjectedPollForConversion+0x108>
 800357c:	2354      	movs	r3, #84	@ 0x54
 800357e:	e000      	b.n	8003582 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8003580:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	617b      	str	r3, [r7, #20]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003588:	e021      	b.n	80035ce <HAL_ADCEx_InjectedPollForConversion+0x156>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d01a      	beq.n	80035c8 <HAL_ADCEx_InjectedPollForConversion+0x150>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_ADCEx_InjectedPollForConversion+0x130>
 8003598:	f7ff f93e 	bl	8002818 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d20f      	bcs.n	80035c8 <HAL_ADCEx_InjectedPollForConversion+0x150>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d90b      	bls.n	80035c8 <HAL_ADCEx_InjectedPollForConversion+0x150>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e03f      	b.n	8003648 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3301      	adds	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d8d9      	bhi.n	800358a <HAL_ADCEx_InjectedPollForConversion+0x112>
  }

  /* Clear injected group conversion flag */
  /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
  /* simultaneously.                                                          */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 020e 	mvn.w	r2, #14
 80035de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80035f6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80035fa:	d012      	beq.n	8003622 <HAL_ADCEx_InjectedPollForConversion+0x1aa>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11d      	bne.n	8003646 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003614:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003618:	d115      	bne.n	8003646 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
      (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7b1b      	ldrb	r3, [r3, #12]
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800361e:	2b00      	cmp	r3, #0
 8003620:	d111      	bne.n	8003646 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd90      	pop	{r4, r7, pc}
 8003650:	2000000c 	.word	0x2000000c
 8003654:	24924924 	.word	0x24924924
 8003658:	00924924 	.word	0x00924924
 800365c:	12492492 	.word	0x12492492
 8003660:	00492492 	.word	0x00492492
 8003664:	00249249 	.word	0x00249249

08003668 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d009      	beq.n	8003690 <HAL_ADCEx_InjectedGetValue+0x28>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d815      	bhi.n	80036ae <HAL_ADCEx_InjectedGetValue+0x46>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d00d      	beq.n	80036a4 <HAL_ADCEx_InjectedGetValue+0x3c>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d005      	beq.n	800369a <HAL_ADCEx_InjectedGetValue+0x32>
 800368e:	e00e      	b.n	80036ae <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003696:	60fb      	str	r3, [r7, #12]
      break;
 8003698:	e00e      	b.n	80036b8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a0:	60fb      	str	r3, [r7, #12]
      break;
 80036a2:	e009      	b.n	80036b8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	60fb      	str	r3, [r7, #12]
      break;
 80036ac:	e004      	b.n	80036b8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b4:	60fb      	str	r3, [r7, #12]
      break;
 80036b6:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
	...

080036d8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80036d8:	b490      	push	{r4, r7}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_ADCEx_InjectedConfigChannel+0x20>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e17d      	b.n	80039f4 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d119      	bne.n	800373c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10c      	bne.n	800372a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	0d9b      	lsrs	r3, r3, #22
 8003718:	059b      	lsls	r3, r3, #22
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	03d1      	lsls	r1, r2, #15
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	430b      	orrs	r3, r1
 8003726:	6393      	str	r3, [r2, #56]	@ 0x38
 8003728:	e04f      	b.n	80037ca <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e046      	b.n	80037ca <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	429a      	cmp	r2, r3
 8003746:	d82a      	bhi.n	800379e <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	1ad2      	subs	r2, r2, r3
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	330f      	adds	r3, #15
 8003760:	221f      	movs	r2, #31
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800376a:	43db      	mvns	r3, r3
 800376c:	4019      	ands	r1, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	3b01      	subs	r3, #1
 8003774:	0518      	lsls	r0, r3, #20
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681c      	ldr	r4, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	1ad2      	subs	r2, r2, r3
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	330f      	adds	r3, #15
 800378c:	fa04 f303 	lsl.w	r3, r4, r3
 8003790:	ea40 0203 	orr.w	r2, r0, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	639a      	str	r2, [r3, #56]	@ 0x38
 800379c:	e015      	b.n	80037ca <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	1ad2      	subs	r2, r2, r3
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	330f      	adds	r3, #15
 80037b6:	221f      	movs	r2, #31
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80037c0:	43da      	mvns	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	400a      	ands	r2, r1
 80037c8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d00c      	beq.n	80037f2 <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	6991      	ldr	r1, [r2, #24]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	7d5b      	ldrb	r3, [r3, #21]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d115      	bne.n	8003826 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003802:	d108      	bne.n	8003816 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	e007      	b.n	8003826 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	7d1b      	ldrb	r3, [r3, #20]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d114      	bne.n	8003858 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	7d5b      	ldrb	r3, [r3, #21]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d108      	bne.n	8003848 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	e007      	b.n	8003858 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b09      	cmp	r3, #9
 800385e:	d91c      	bls.n	800389a <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68d9      	ldr	r1, [r3, #12]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	3b1e      	subs	r3, #30
 8003872:	2207      	movs	r2, #7
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	4019      	ands	r1, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6898      	ldr	r0, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	3b1e      	subs	r3, #30
 800388c:	fa00 f203 	lsl.w	r2, r0, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	e019      	b.n	80038ce <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6919      	ldr	r1, [r3, #16]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	2207      	movs	r2, #7
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	4019      	ands	r1, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6898      	ldr	r0, [r3, #8]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	fa00 f203 	lsl.w	r2, r0, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d003      	beq.n	80038de <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80038da:	2b11      	cmp	r3, #17
 80038dc:	d107      	bne.n	80038ee <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80038ec:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d022      	beq.n	800393c <HAL_ADCEx_InjectedConfigChannel+0x264>
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d82e      	bhi.n	8003958 <HAL_ADCEx_InjectedConfigChannel+0x280>
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d002      	beq.n	8003904 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d00e      	beq.n	8003920 <HAL_ADCEx_InjectedConfigChannel+0x248>
 8003902:	e029      	b.n	8003958 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800390e:	f023 030f 	bic.w	r3, r3, #15
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	68d1      	ldr	r1, [r2, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	430b      	orrs	r3, r1
 800391c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800391e:	e029      	b.n	8003974 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800392a:	f023 030f 	bic.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	68d1      	ldr	r1, [r2, #12]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	430b      	orrs	r3, r1
 8003938:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800393a:	e01b      	b.n	8003974 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003946:	f023 030f 	bic.w	r3, r3, #15
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	68d1      	ldr	r1, [r2, #12]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	430b      	orrs	r3, r1
 8003954:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8003956:	e00d      	b.n	8003974 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003962:	f023 030f 	bic.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	68d1      	ldr	r1, [r2, #12]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	430b      	orrs	r3, r1
 8003970:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8003972:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b10      	cmp	r3, #16
 800397a:	d003      	beq.n	8003984 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003980:	2b11      	cmp	r3, #17
 8003982:	d132      	bne.n	80039ea <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1d      	ldr	r2, [pc, #116]	@ (8003a00 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d125      	bne.n	80039da <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d126      	bne.n	80039ea <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80039aa:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d11a      	bne.n	80039ea <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039b4:	4b13      	ldr	r3, [pc, #76]	@ (8003a04 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a13      	ldr	r2, [pc, #76]	@ (8003a08 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0c9a      	lsrs	r2, r3, #18
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039ca:	e002      	b.n	80039d2 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f9      	bne.n	80039cc <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 80039d8:	e007      	b.n	80039ea <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc90      	pop	{r4, r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40012400 	.word	0x40012400
 8003a04:	2000000c 	.word	0x2000000c
 8003a08:	431bde83 	.word	0x431bde83

08003a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <__NVIC_SetPriorityGrouping+0x44>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a3e:	4a04      	ldr	r2, [pc, #16]	@ (8003a50 <__NVIC_SetPriorityGrouping+0x44>)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	60d3      	str	r3, [r2, #12]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <__NVIC_GetPriorityGrouping+0x18>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	f003 0307 	and.w	r3, r3, #7
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	db0b      	blt.n	8003a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	f003 021f 	and.w	r2, r3, #31
 8003a88:	4906      	ldr	r1, [pc, #24]	@ (8003aa4 <__NVIC_EnableIRQ+0x34>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2001      	movs	r0, #1
 8003a92:	fa00 f202 	lsl.w	r2, r0, r2
 8003a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	e000e100 	.word	0xe000e100

08003aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	db0a      	blt.n	8003ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	490c      	ldr	r1, [pc, #48]	@ (8003af4 <__NVIC_SetPriority+0x4c>)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	440b      	add	r3, r1
 8003acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad0:	e00a      	b.n	8003ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4908      	ldr	r1, [pc, #32]	@ (8003af8 <__NVIC_SetPriority+0x50>)
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	3b04      	subs	r3, #4
 8003ae0:	0112      	lsls	r2, r2, #4
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	761a      	strb	r2, [r3, #24]
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	e000e100 	.word	0xe000e100
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b089      	sub	sp, #36	@ 0x24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f1c3 0307 	rsb	r3, r3, #7
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	bf28      	it	cs
 8003b1a:	2304      	movcs	r3, #4
 8003b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3304      	adds	r3, #4
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d902      	bls.n	8003b2c <NVIC_EncodePriority+0x30>
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3b03      	subs	r3, #3
 8003b2a:	e000      	b.n	8003b2e <NVIC_EncodePriority+0x32>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43da      	mvns	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	401a      	ands	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b44:	f04f 31ff 	mov.w	r1, #4294967295
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	43d9      	mvns	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b54:	4313      	orrs	r3, r2
         );
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3724      	adds	r7, #36	@ 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b70:	d301      	bcc.n	8003b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b72:	2301      	movs	r3, #1
 8003b74:	e00f      	b.n	8003b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <SysTick_Config+0x40>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b7e:	210f      	movs	r1, #15
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	f7ff ff90 	bl	8003aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b88:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <SysTick_Config+0x40>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b8e:	4b04      	ldr	r3, [pc, #16]	@ (8003ba0 <SysTick_Config+0x40>)
 8003b90:	2207      	movs	r2, #7
 8003b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000e010 	.word	0xe000e010

08003ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff2d 	bl	8003a0c <__NVIC_SetPriorityGrouping>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bcc:	f7ff ff42 	bl	8003a54 <__NVIC_GetPriorityGrouping>
 8003bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	6978      	ldr	r0, [r7, #20]
 8003bd8:	f7ff ff90 	bl	8003afc <NVIC_EncodePriority>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff5f 	bl	8003aa8 <__NVIC_SetPriority>
}
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff35 	bl	8003a70 <__NVIC_EnableIRQ>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff ffa2 	bl	8003b60 <SysTick_Config>
 8003c1c:	4603      	mov	r3, r0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e043      	b.n	8003cc6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	4b22      	ldr	r3, [pc, #136]	@ (8003cd0 <HAL_DMA_Init+0xa8>)
 8003c46:	4413      	add	r3, r2
 8003c48:	4a22      	ldr	r2, [pc, #136]	@ (8003cd4 <HAL_DMA_Init+0xac>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	009a      	lsls	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd8 <HAL_DMA_Init+0xb0>)
 8003c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c72:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003c76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	bffdfff8 	.word	0xbffdfff8
 8003cd4:	cccccccd 	.word	0xcccccccd
 8003cd8:	40020000 	.word	0x40020000

08003cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_DMA_Start_IT+0x20>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e04b      	b.n	8003d94 <HAL_DMA_Start_IT+0xb8>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d13a      	bne.n	8003d86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f973 	bl	8004020 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 020e 	orr.w	r2, r2, #14
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e00f      	b.n	8003d74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0204 	bic.w	r2, r2, #4
 8003d62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 020a 	orr.w	r2, r2, #10
 8003d72:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e005      	b.n	8003d92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d008      	beq.n	8003dc6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2204      	movs	r2, #4
 8003db8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e020      	b.n	8003e08 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 020e 	bic.w	r2, r2, #14
 8003dd4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dee:	2101      	movs	r1, #1
 8003df0:	fa01 f202 	lsl.w	r2, r1, r2
 8003df4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	2204      	movs	r2, #4
 8003e32:	409a      	lsls	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d04f      	beq.n	8003edc <HAL_DMA_IRQHandler+0xc8>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d04a      	beq.n	8003edc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d107      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a66      	ldr	r2, [pc, #408]	@ (8004004 <HAL_DMA_IRQHandler+0x1f0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d029      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xae>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a65      	ldr	r2, [pc, #404]	@ (8004008 <HAL_DMA_IRQHandler+0x1f4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d022      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xaa>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a63      	ldr	r2, [pc, #396]	@ (800400c <HAL_DMA_IRQHandler+0x1f8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01a      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0xa4>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a62      	ldr	r2, [pc, #392]	@ (8004010 <HAL_DMA_IRQHandler+0x1fc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d012      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x9e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a60      	ldr	r2, [pc, #384]	@ (8004014 <HAL_DMA_IRQHandler+0x200>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00a      	beq.n	8003eac <HAL_DMA_IRQHandler+0x98>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a5f      	ldr	r2, [pc, #380]	@ (8004018 <HAL_DMA_IRQHandler+0x204>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d102      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x92>
 8003ea0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ea4:	e00e      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xb0>
 8003ea6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003eaa:	e00b      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xb0>
 8003eac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003eb0:	e008      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xb0>
 8003eb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003eb6:	e005      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xb0>
 8003eb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ebc:	e002      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xb0>
 8003ebe:	2340      	movs	r3, #64	@ 0x40
 8003ec0:	e000      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xb0>
 8003ec2:	2304      	movs	r3, #4
 8003ec4:	4a55      	ldr	r2, [pc, #340]	@ (800401c <HAL_DMA_IRQHandler+0x208>)
 8003ec6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8094 	beq.w	8003ffa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003eda:	e08e      	b.n	8003ffa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d056      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x186>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d051      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 020a 	bic.w	r2, r2, #10
 8003f12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a38      	ldr	r2, [pc, #224]	@ (8004004 <HAL_DMA_IRQHandler+0x1f0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d029      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x166>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a37      	ldr	r2, [pc, #220]	@ (8004008 <HAL_DMA_IRQHandler+0x1f4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x162>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a35      	ldr	r2, [pc, #212]	@ (800400c <HAL_DMA_IRQHandler+0x1f8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01a      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x15c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a34      	ldr	r2, [pc, #208]	@ (8004010 <HAL_DMA_IRQHandler+0x1fc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d012      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x156>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a32      	ldr	r2, [pc, #200]	@ (8004014 <HAL_DMA_IRQHandler+0x200>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00a      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x150>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a31      	ldr	r2, [pc, #196]	@ (8004018 <HAL_DMA_IRQHandler+0x204>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d102      	bne.n	8003f5e <HAL_DMA_IRQHandler+0x14a>
 8003f58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f5c:	e00e      	b.n	8003f7c <HAL_DMA_IRQHandler+0x168>
 8003f5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f62:	e00b      	b.n	8003f7c <HAL_DMA_IRQHandler+0x168>
 8003f64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f68:	e008      	b.n	8003f7c <HAL_DMA_IRQHandler+0x168>
 8003f6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f6e:	e005      	b.n	8003f7c <HAL_DMA_IRQHandler+0x168>
 8003f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f74:	e002      	b.n	8003f7c <HAL_DMA_IRQHandler+0x168>
 8003f76:	2320      	movs	r3, #32
 8003f78:	e000      	b.n	8003f7c <HAL_DMA_IRQHandler+0x168>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	4a27      	ldr	r2, [pc, #156]	@ (800401c <HAL_DMA_IRQHandler+0x208>)
 8003f7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d034      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f98:	e02f      	b.n	8003ffa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d028      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x1e8>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d023      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 020e 	bic.w	r2, r2, #14
 8003fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	4798      	blx	r3
    }
  }
  return;
 8003ffa:	bf00      	nop
 8003ffc:	bf00      	nop
}
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40020008 	.word	0x40020008
 8004008:	4002001c 	.word	0x4002001c
 800400c:	40020030 	.word	0x40020030
 8004010:	40020044 	.word	0x40020044
 8004014:	40020058 	.word	0x40020058
 8004018:	4002006c 	.word	0x4002006c
 800401c:	40020000 	.word	0x40020000

08004020 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	2101      	movs	r1, #1
 8004038:	fa01 f202 	lsl.w	r2, r1, r2
 800403c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b10      	cmp	r3, #16
 800404c:	d108      	bne.n	8004060 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800405e:	e007      	b.n	8004070 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr
	...

0800407c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800407c:	b480      	push	{r7}
 800407e:	b08b      	sub	sp, #44	@ 0x2c
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800408e:	e169      	b.n	8004364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004090:	2201      	movs	r2, #1
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	f040 8158 	bne.w	800435e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4a9a      	ldr	r2, [pc, #616]	@ (800431c <HAL_GPIO_Init+0x2a0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d05e      	beq.n	8004176 <HAL_GPIO_Init+0xfa>
 80040b8:	4a98      	ldr	r2, [pc, #608]	@ (800431c <HAL_GPIO_Init+0x2a0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d875      	bhi.n	80041aa <HAL_GPIO_Init+0x12e>
 80040be:	4a98      	ldr	r2, [pc, #608]	@ (8004320 <HAL_GPIO_Init+0x2a4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d058      	beq.n	8004176 <HAL_GPIO_Init+0xfa>
 80040c4:	4a96      	ldr	r2, [pc, #600]	@ (8004320 <HAL_GPIO_Init+0x2a4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d86f      	bhi.n	80041aa <HAL_GPIO_Init+0x12e>
 80040ca:	4a96      	ldr	r2, [pc, #600]	@ (8004324 <HAL_GPIO_Init+0x2a8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d052      	beq.n	8004176 <HAL_GPIO_Init+0xfa>
 80040d0:	4a94      	ldr	r2, [pc, #592]	@ (8004324 <HAL_GPIO_Init+0x2a8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d869      	bhi.n	80041aa <HAL_GPIO_Init+0x12e>
 80040d6:	4a94      	ldr	r2, [pc, #592]	@ (8004328 <HAL_GPIO_Init+0x2ac>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d04c      	beq.n	8004176 <HAL_GPIO_Init+0xfa>
 80040dc:	4a92      	ldr	r2, [pc, #584]	@ (8004328 <HAL_GPIO_Init+0x2ac>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d863      	bhi.n	80041aa <HAL_GPIO_Init+0x12e>
 80040e2:	4a92      	ldr	r2, [pc, #584]	@ (800432c <HAL_GPIO_Init+0x2b0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d046      	beq.n	8004176 <HAL_GPIO_Init+0xfa>
 80040e8:	4a90      	ldr	r2, [pc, #576]	@ (800432c <HAL_GPIO_Init+0x2b0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d85d      	bhi.n	80041aa <HAL_GPIO_Init+0x12e>
 80040ee:	2b12      	cmp	r3, #18
 80040f0:	d82a      	bhi.n	8004148 <HAL_GPIO_Init+0xcc>
 80040f2:	2b12      	cmp	r3, #18
 80040f4:	d859      	bhi.n	80041aa <HAL_GPIO_Init+0x12e>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <HAL_GPIO_Init+0x80>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004177 	.word	0x08004177
 8004100:	08004151 	.word	0x08004151
 8004104:	08004163 	.word	0x08004163
 8004108:	080041a5 	.word	0x080041a5
 800410c:	080041ab 	.word	0x080041ab
 8004110:	080041ab 	.word	0x080041ab
 8004114:	080041ab 	.word	0x080041ab
 8004118:	080041ab 	.word	0x080041ab
 800411c:	080041ab 	.word	0x080041ab
 8004120:	080041ab 	.word	0x080041ab
 8004124:	080041ab 	.word	0x080041ab
 8004128:	080041ab 	.word	0x080041ab
 800412c:	080041ab 	.word	0x080041ab
 8004130:	080041ab 	.word	0x080041ab
 8004134:	080041ab 	.word	0x080041ab
 8004138:	080041ab 	.word	0x080041ab
 800413c:	080041ab 	.word	0x080041ab
 8004140:	08004159 	.word	0x08004159
 8004144:	0800416d 	.word	0x0800416d
 8004148:	4a79      	ldr	r2, [pc, #484]	@ (8004330 <HAL_GPIO_Init+0x2b4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800414e:	e02c      	b.n	80041aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	623b      	str	r3, [r7, #32]
          break;
 8004156:	e029      	b.n	80041ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	3304      	adds	r3, #4
 800415e:	623b      	str	r3, [r7, #32]
          break;
 8004160:	e024      	b.n	80041ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	3308      	adds	r3, #8
 8004168:	623b      	str	r3, [r7, #32]
          break;
 800416a:	e01f      	b.n	80041ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	330c      	adds	r3, #12
 8004172:	623b      	str	r3, [r7, #32]
          break;
 8004174:	e01a      	b.n	80041ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800417e:	2304      	movs	r3, #4
 8004180:	623b      	str	r3, [r7, #32]
          break;
 8004182:	e013      	b.n	80041ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800418c:	2308      	movs	r3, #8
 800418e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	611a      	str	r2, [r3, #16]
          break;
 8004196:	e009      	b.n	80041ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004198:	2308      	movs	r3, #8
 800419a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	615a      	str	r2, [r3, #20]
          break;
 80041a2:	e003      	b.n	80041ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041a4:	2300      	movs	r3, #0
 80041a6:	623b      	str	r3, [r7, #32]
          break;
 80041a8:	e000      	b.n	80041ac <HAL_GPIO_Init+0x130>
          break;
 80041aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2bff      	cmp	r3, #255	@ 0xff
 80041b0:	d801      	bhi.n	80041b6 <HAL_GPIO_Init+0x13a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	e001      	b.n	80041ba <HAL_GPIO_Init+0x13e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2bff      	cmp	r3, #255	@ 0xff
 80041c0:	d802      	bhi.n	80041c8 <HAL_GPIO_Init+0x14c>
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	e002      	b.n	80041ce <HAL_GPIO_Init+0x152>
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	3b08      	subs	r3, #8
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	210f      	movs	r1, #15
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	401a      	ands	r2, r3
 80041e0:	6a39      	ldr	r1, [r7, #32]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	431a      	orrs	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80b1 	beq.w	800435e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80041fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004334 <HAL_GPIO_Init+0x2b8>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	4a4c      	ldr	r2, [pc, #304]	@ (8004334 <HAL_GPIO_Init+0x2b8>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6193      	str	r3, [r2, #24]
 8004208:	4b4a      	ldr	r3, [pc, #296]	@ (8004334 <HAL_GPIO_Init+0x2b8>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004214:	4a48      	ldr	r2, [pc, #288]	@ (8004338 <HAL_GPIO_Init+0x2bc>)
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	3302      	adds	r3, #2
 800421c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004220:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	220f      	movs	r2, #15
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4013      	ands	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a40      	ldr	r2, [pc, #256]	@ (800433c <HAL_GPIO_Init+0x2c0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_GPIO_Init+0x1ec>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3f      	ldr	r2, [pc, #252]	@ (8004340 <HAL_GPIO_Init+0x2c4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00d      	beq.n	8004264 <HAL_GPIO_Init+0x1e8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3e      	ldr	r2, [pc, #248]	@ (8004344 <HAL_GPIO_Init+0x2c8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d007      	beq.n	8004260 <HAL_GPIO_Init+0x1e4>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3d      	ldr	r2, [pc, #244]	@ (8004348 <HAL_GPIO_Init+0x2cc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d101      	bne.n	800425c <HAL_GPIO_Init+0x1e0>
 8004258:	2303      	movs	r3, #3
 800425a:	e006      	b.n	800426a <HAL_GPIO_Init+0x1ee>
 800425c:	2304      	movs	r3, #4
 800425e:	e004      	b.n	800426a <HAL_GPIO_Init+0x1ee>
 8004260:	2302      	movs	r3, #2
 8004262:	e002      	b.n	800426a <HAL_GPIO_Init+0x1ee>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_GPIO_Init+0x1ee>
 8004268:	2300      	movs	r3, #0
 800426a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426c:	f002 0203 	and.w	r2, r2, #3
 8004270:	0092      	lsls	r2, r2, #2
 8004272:	4093      	lsls	r3, r2
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800427a:	492f      	ldr	r1, [pc, #188]	@ (8004338 <HAL_GPIO_Init+0x2bc>)
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	3302      	adds	r3, #2
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004294:	4b2d      	ldr	r3, [pc, #180]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	492c      	ldr	r1, [pc, #176]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]
 80042a0:	e006      	b.n	80042b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042a2:	4b2a      	ldr	r3, [pc, #168]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	4928      	ldr	r1, [pc, #160]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d006      	beq.n	80042ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80042bc:	4b23      	ldr	r3, [pc, #140]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	4922      	ldr	r1, [pc, #136]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60cb      	str	r3, [r1, #12]
 80042c8:	e006      	b.n	80042d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80042ca:	4b20      	ldr	r3, [pc, #128]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	491e      	ldr	r1, [pc, #120]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d006      	beq.n	80042f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80042e4:	4b19      	ldr	r3, [pc, #100]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	4918      	ldr	r1, [pc, #96]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
 80042f0:	e006      	b.n	8004300 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042f2:	4b16      	ldr	r3, [pc, #88]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	4914      	ldr	r1, [pc, #80]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d021      	beq.n	8004350 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800430c:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	490e      	ldr	r1, [pc, #56]	@ (800434c <HAL_GPIO_Init+0x2d0>)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
 8004318:	e021      	b.n	800435e <HAL_GPIO_Init+0x2e2>
 800431a:	bf00      	nop
 800431c:	10320000 	.word	0x10320000
 8004320:	10310000 	.word	0x10310000
 8004324:	10220000 	.word	0x10220000
 8004328:	10210000 	.word	0x10210000
 800432c:	10120000 	.word	0x10120000
 8004330:	10110000 	.word	0x10110000
 8004334:	40021000 	.word	0x40021000
 8004338:	40010000 	.word	0x40010000
 800433c:	40010800 	.word	0x40010800
 8004340:	40010c00 	.word	0x40010c00
 8004344:	40011000 	.word	0x40011000
 8004348:	40011400 	.word	0x40011400
 800434c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <HAL_GPIO_Init+0x304>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	43db      	mvns	r3, r3
 8004358:	4909      	ldr	r1, [pc, #36]	@ (8004380 <HAL_GPIO_Init+0x304>)
 800435a:	4013      	ands	r3, r2
 800435c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	3301      	adds	r3, #1
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	fa22 f303 	lsr.w	r3, r2, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	f47f ae8e 	bne.w	8004090 <HAL_GPIO_Init+0x14>
  }
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	372c      	adds	r7, #44	@ 0x2c
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr
 8004380:	40010400 	.word	0x40010400

08004384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	887b      	ldrh	r3, [r7, #2]
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
 80043a0:	e001      	b.n	80043a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr

080043b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	807b      	strh	r3, [r7, #2]
 80043be:	4613      	mov	r3, r2
 80043c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043c2:	787b      	ldrb	r3, [r7, #1]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c8:	887a      	ldrh	r2, [r7, #2]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043ce:	e003      	b.n	80043d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043d0:	887b      	ldrh	r3, [r7, #2]
 80043d2:	041a      	lsls	r2, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	611a      	str	r2, [r3, #16]
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043f4:	887a      	ldrh	r2, [r7, #2]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4013      	ands	r3, r2
 80043fa:	041a      	lsls	r2, r3, #16
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	43d9      	mvns	r1, r3
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	400b      	ands	r3, r1
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	611a      	str	r2, [r3, #16]
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800441e:	4b08      	ldr	r3, [pc, #32]	@ (8004440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800442a:	4a05      	ldr	r2, [pc, #20]	@ (8004440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fd fd58 	bl	8001ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40010400 	.word	0x40010400

08004444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e272      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8087 	beq.w	8004572 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004464:	4b92      	ldr	r3, [pc, #584]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b04      	cmp	r3, #4
 800446e:	d00c      	beq.n	800448a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004470:	4b8f      	ldr	r3, [pc, #572]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d112      	bne.n	80044a2 <HAL_RCC_OscConfig+0x5e>
 800447c:	4b8c      	ldr	r3, [pc, #560]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004488:	d10b      	bne.n	80044a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448a:	4b89      	ldr	r3, [pc, #548]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d06c      	beq.n	8004570 <HAL_RCC_OscConfig+0x12c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d168      	bne.n	8004570 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e24c      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_OscConfig+0x76>
 80044ac:	4b80      	ldr	r3, [pc, #512]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a7f      	ldr	r2, [pc, #508]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e02e      	b.n	8004518 <HAL_RCC_OscConfig+0xd4>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0x98>
 80044c2:	4b7b      	ldr	r3, [pc, #492]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a7a      	ldr	r2, [pc, #488]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b78      	ldr	r3, [pc, #480]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a77      	ldr	r2, [pc, #476]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e01d      	b.n	8004518 <HAL_RCC_OscConfig+0xd4>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0xbc>
 80044e6:	4b72      	ldr	r3, [pc, #456]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a71      	ldr	r2, [pc, #452]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b6f      	ldr	r3, [pc, #444]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a6e      	ldr	r2, [pc, #440]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e00b      	b.n	8004518 <HAL_RCC_OscConfig+0xd4>
 8004500:	4b6b      	ldr	r3, [pc, #428]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a6a      	ldr	r2, [pc, #424]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b68      	ldr	r3, [pc, #416]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a67      	ldr	r2, [pc, #412]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004516:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fe f97a 	bl	8002818 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fe f976 	bl	8002818 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	@ 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e200      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4b5d      	ldr	r3, [pc, #372]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0xe4>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fe f966 	bl	8002818 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fe f962 	bl	8002818 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e1ec      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004562:	4b53      	ldr	r3, [pc, #332]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x10c>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d063      	beq.n	8004646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800457e:	4b4c      	ldr	r3, [pc, #304]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00b      	beq.n	80045a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800458a:	4b49      	ldr	r3, [pc, #292]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b08      	cmp	r3, #8
 8004594:	d11c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x18c>
 8004596:	4b46      	ldr	r3, [pc, #280]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d116      	bne.n	80045d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a2:	4b43      	ldr	r3, [pc, #268]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_RCC_OscConfig+0x176>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e1c0      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ba:	4b3d      	ldr	r3, [pc, #244]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4939      	ldr	r1, [pc, #228]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ce:	e03a      	b.n	8004646 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d020      	beq.n	800461a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d8:	4b36      	ldr	r3, [pc, #216]	@ (80046b4 <HAL_RCC_OscConfig+0x270>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045de:	f7fe f91b 	bl	8002818 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e6:	f7fe f917 	bl	8002818 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e1a1      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f8:	4b2d      	ldr	r3, [pc, #180]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004604:	4b2a      	ldr	r3, [pc, #168]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4927      	ldr	r1, [pc, #156]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	600b      	str	r3, [r1, #0]
 8004618:	e015      	b.n	8004646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461a:	4b26      	ldr	r3, [pc, #152]	@ (80046b4 <HAL_RCC_OscConfig+0x270>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fe f8fa 	bl	8002818 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004628:	f7fe f8f6 	bl	8002818 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e180      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463a:	4b1d      	ldr	r3, [pc, #116]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d03a      	beq.n	80046c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d019      	beq.n	800468e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465a:	4b17      	ldr	r3, [pc, #92]	@ (80046b8 <HAL_RCC_OscConfig+0x274>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fe f8da 	bl	8002818 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004668:	f7fe f8d6 	bl	8002818 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e160      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467a:	4b0d      	ldr	r3, [pc, #52]	@ (80046b0 <HAL_RCC_OscConfig+0x26c>)
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004686:	2001      	movs	r0, #1
 8004688:	f000 faba 	bl	8004c00 <RCC_Delay>
 800468c:	e01c      	b.n	80046c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <HAL_RCC_OscConfig+0x274>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004694:	f7fe f8c0 	bl	8002818 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469a:	e00f      	b.n	80046bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7fe f8bc 	bl	8002818 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d908      	bls.n	80046bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e146      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	42420000 	.word	0x42420000
 80046b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046bc:	4b92      	ldr	r3, [pc, #584]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80046be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e9      	bne.n	800469c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80a6 	beq.w	8004822 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046da:	4b8b      	ldr	r3, [pc, #556]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10d      	bne.n	8004702 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	4b88      	ldr	r3, [pc, #544]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4a87      	ldr	r2, [pc, #540]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	61d3      	str	r3, [r2, #28]
 80046f2:	4b85      	ldr	r3, [pc, #532]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b82      	ldr	r3, [pc, #520]	@ (800490c <HAL_RCC_OscConfig+0x4c8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d118      	bne.n	8004740 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470e:	4b7f      	ldr	r3, [pc, #508]	@ (800490c <HAL_RCC_OscConfig+0x4c8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a7e      	ldr	r2, [pc, #504]	@ (800490c <HAL_RCC_OscConfig+0x4c8>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471a:	f7fe f87d 	bl	8002818 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fe f879 	bl	8002818 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b64      	cmp	r3, #100	@ 0x64
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e103      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004734:	4b75      	ldr	r3, [pc, #468]	@ (800490c <HAL_RCC_OscConfig+0x4c8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x312>
 8004748:	4b6f      	ldr	r3, [pc, #444]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	4a6e      	ldr	r2, [pc, #440]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6213      	str	r3, [r2, #32]
 8004754:	e02d      	b.n	80047b2 <HAL_RCC_OscConfig+0x36e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x334>
 800475e:	4b6a      	ldr	r3, [pc, #424]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	4a69      	ldr	r2, [pc, #420]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6213      	str	r3, [r2, #32]
 800476a:	4b67      	ldr	r3, [pc, #412]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	4a66      	ldr	r2, [pc, #408]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	6213      	str	r3, [r2, #32]
 8004776:	e01c      	b.n	80047b2 <HAL_RCC_OscConfig+0x36e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b05      	cmp	r3, #5
 800477e:	d10c      	bne.n	800479a <HAL_RCC_OscConfig+0x356>
 8004780:	4b61      	ldr	r3, [pc, #388]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	4a60      	ldr	r2, [pc, #384]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	6213      	str	r3, [r2, #32]
 800478c:	4b5e      	ldr	r3, [pc, #376]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	4a5d      	ldr	r2, [pc, #372]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6213      	str	r3, [r2, #32]
 8004798:	e00b      	b.n	80047b2 <HAL_RCC_OscConfig+0x36e>
 800479a:	4b5b      	ldr	r3, [pc, #364]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	4a5a      	ldr	r2, [pc, #360]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	6213      	str	r3, [r2, #32]
 80047a6:	4b58      	ldr	r3, [pc, #352]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	4a57      	ldr	r2, [pc, #348]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	f023 0304 	bic.w	r3, r3, #4
 80047b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d015      	beq.n	80047e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ba:	f7fe f82d 	bl	8002818 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fe f829 	bl	8002818 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e0b1      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ee      	beq.n	80047c2 <HAL_RCC_OscConfig+0x37e>
 80047e4:	e014      	b.n	8004810 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e6:	f7fe f817 	bl	8002818 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fe f813 	bl	8002818 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e09b      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004804:	4b40      	ldr	r3, [pc, #256]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1ee      	bne.n	80047ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d105      	bne.n	8004822 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004816:	4b3c      	ldr	r3, [pc, #240]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4a3b      	ldr	r2, [pc, #236]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 800481c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8087 	beq.w	800493a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800482c:	4b36      	ldr	r3, [pc, #216]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b08      	cmp	r3, #8
 8004836:	d061      	beq.n	80048fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d146      	bne.n	80048ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004840:	4b33      	ldr	r3, [pc, #204]	@ (8004910 <HAL_RCC_OscConfig+0x4cc>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7fd ffe7 	bl	8002818 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484e:	f7fd ffe3 	bl	8002818 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e06d      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004860:	4b29      	ldr	r3, [pc, #164]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004874:	d108      	bne.n	8004888 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004876:	4b24      	ldr	r3, [pc, #144]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	4921      	ldr	r1, [pc, #132]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004888:	4b1f      	ldr	r3, [pc, #124]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a19      	ldr	r1, [r3, #32]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	430b      	orrs	r3, r1
 800489a:	491b      	ldr	r1, [pc, #108]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <HAL_RCC_OscConfig+0x4cc>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a6:	f7fd ffb7 	bl	8002818 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ae:	f7fd ffb3 	bl	8002818 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e03d      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048c0:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x46a>
 80048cc:	e035      	b.n	800493a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ce:	4b10      	ldr	r3, [pc, #64]	@ (8004910 <HAL_RCC_OscConfig+0x4cc>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fd ffa0 	bl	8002818 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fd ff9c 	bl	8002818 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e026      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x498>
 80048fa:	e01e      	b.n	800493a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d107      	bne.n	8004914 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e019      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
 8004908:	40021000 	.word	0x40021000
 800490c:	40007000 	.word	0x40007000
 8004910:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004914:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <HAL_RCC_OscConfig+0x500>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	429a      	cmp	r2, r3
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d001      	beq.n	800493a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000

08004948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0d0      	b.n	8004afe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800495c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d910      	bls.n	800498c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b67      	ldr	r3, [pc, #412]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 0207 	bic.w	r2, r3, #7
 8004972:	4965      	ldr	r1, [pc, #404]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b63      	ldr	r3, [pc, #396]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0b8      	b.n	8004afe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d020      	beq.n	80049da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a4:	4b59      	ldr	r3, [pc, #356]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4a58      	ldr	r2, [pc, #352]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049bc:	4b53      	ldr	r3, [pc, #332]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4a52      	ldr	r2, [pc, #328]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c8:	4b50      	ldr	r3, [pc, #320]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	494d      	ldr	r1, [pc, #308]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d040      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	4b47      	ldr	r3, [pc, #284]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d115      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e07f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d107      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a06:	4b41      	ldr	r3, [pc, #260]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e073      	b.n	8004afe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a16:	4b3d      	ldr	r3, [pc, #244]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e06b      	b.n	8004afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a26:	4b39      	ldr	r3, [pc, #228]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f023 0203 	bic.w	r2, r3, #3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4936      	ldr	r1, [pc, #216]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a38:	f7fd feee 	bl	8002818 <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a40:	f7fd feea 	bl	8002818 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e053      	b.n	8004afe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a56:	4b2d      	ldr	r3, [pc, #180]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 020c 	and.w	r2, r3, #12
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d1eb      	bne.n	8004a40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a68:	4b27      	ldr	r3, [pc, #156]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d210      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b24      	ldr	r3, [pc, #144]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 0207 	bic.w	r2, r3, #7
 8004a7e:	4922      	ldr	r1, [pc, #136]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e032      	b.n	8004afe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4916      	ldr	r1, [pc, #88]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	490e      	ldr	r1, [pc, #56]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ad6:	f000 f821 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8004ada:	4602      	mov	r2, r0
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	490a      	ldr	r1, [pc, #40]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae8:	5ccb      	ldrb	r3, [r1, r3]
 8004aea:	fa22 f303 	lsr.w	r3, r2, r3
 8004aee:	4a09      	ldr	r2, [pc, #36]	@ (8004b14 <HAL_RCC_ClockConfig+0x1cc>)
 8004af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004af2:	4b09      	ldr	r3, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1d0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fd fe4c 	bl	8002794 <HAL_InitTick>

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40022000 	.word	0x40022000
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	08006bc8 	.word	0x08006bc8
 8004b14:	2000000c 	.word	0x2000000c
 8004b18:	20000010 	.word	0x20000010

08004b1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	2300      	movs	r3, #0
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b36:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d002      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x30>
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d003      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0x36>
 8004b4a:	e027      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b4c:	4b19      	ldr	r3, [pc, #100]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b4e:	613b      	str	r3, [r7, #16]
      break;
 8004b50:	e027      	b.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	0c9b      	lsrs	r3, r3, #18
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	4a17      	ldr	r2, [pc, #92]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b5c:	5cd3      	ldrb	r3, [r2, r3]
 8004b5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b6a:	4b11      	ldr	r3, [pc, #68]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	0c5b      	lsrs	r3, r3, #17
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	4a11      	ldr	r2, [pc, #68]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b76:	5cd3      	ldrb	r3, [r2, r3]
 8004b78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b7e:	fb03 f202 	mul.w	r2, r3, r2
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	e004      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b90:	fb02 f303 	mul.w	r3, r2, r3
 8004b94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	613b      	str	r3, [r7, #16]
      break;
 8004b9a:	e002      	b.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b9c:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b9e:	613b      	str	r3, [r7, #16]
      break;
 8004ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba2:	693b      	ldr	r3, [r7, #16]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	007a1200 	.word	0x007a1200
 8004bb8:	08006be0 	.word	0x08006be0
 8004bbc:	08006bf0 	.word	0x08006bf0
 8004bc0:	003d0900 	.word	0x003d0900

08004bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc8:	4b02      	ldr	r3, [pc, #8]	@ (8004bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	2000000c 	.word	0x2000000c

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bdc:	f7ff fff2 	bl	8004bc4 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	0adb      	lsrs	r3, r3, #11
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4903      	ldr	r1, [pc, #12]	@ (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	08006bd8 	.word	0x08006bd8

08004c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c08:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <RCC_Delay+0x34>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c38 <RCC_Delay+0x38>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	0a5b      	lsrs	r3, r3, #9
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c1c:	bf00      	nop
  }
  while (Delay --);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	60fa      	str	r2, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f9      	bne.n	8004c1c <RCC_Delay+0x1c>
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	2000000c 	.word	0x2000000c
 8004c38:	10624dd3 	.word	0x10624dd3

08004c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d07d      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	4b4c      	ldr	r3, [pc, #304]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	61d3      	str	r3, [r2, #28]
 8004c74:	4b49      	ldr	r3, [pc, #292]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	4b46      	ldr	r3, [pc, #280]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d118      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c90:	4b43      	ldr	r3, [pc, #268]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a42      	ldr	r2, [pc, #264]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9c:	f7fd fdbc 	bl	8002818 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fd fdb8 	bl	8002818 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	@ 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e06d      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc2:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d02e      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d027      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cea:	4b2e      	ldr	r3, [pc, #184]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cf6:	4a29      	ldr	r2, [pc, #164]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d014      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d06:	f7fd fd87 	bl	8002818 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fd fd83 	bl	8002818 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e036      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d24:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ee      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d30:	4b1a      	ldr	r3, [pc, #104]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4917      	ldr	r1, [pc, #92]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d48:	4b14      	ldr	r3, [pc, #80]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4a13      	ldr	r2, [pc, #76]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d60:	4b0e      	ldr	r3, [pc, #56]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	490b      	ldr	r1, [pc, #44]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d7e:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4904      	ldr	r1, [pc, #16]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40007000 	.word	0x40007000
 8004da4:	42420440 	.word	0x42420440

08004da8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	f200 808a 	bhi.w	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d045      	beq.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d075      	beq.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004dde:	e082      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004de0:	4b46      	ldr	r3, [pc, #280]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004de6:	4b45      	ldr	r3, [pc, #276]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d07b      	beq.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	0c9b      	lsrs	r3, r3, #18
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	4a41      	ldr	r2, [pc, #260]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004dfc:	5cd3      	ldrb	r3, [r2, r3]
 8004dfe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d015      	beq.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	0c5b      	lsrs	r3, r3, #17
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	4a3b      	ldr	r2, [pc, #236]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00d      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e24:	4a38      	ldr	r2, [pc, #224]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	e004      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4a34      	ldr	r2, [pc, #208]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e40:	4b2e      	ldr	r3, [pc, #184]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	61bb      	str	r3, [r7, #24]
      break;
 8004e52:	e04a      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	4a2d      	ldr	r2, [pc, #180]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	61bb      	str	r3, [r7, #24]
      break;
 8004e62:	e042      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004e64:	4b25      	ldr	r3, [pc, #148]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e74:	d108      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004e80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e01f      	b.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e92:	d109      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e94:	4b19      	ldr	r3, [pc, #100]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ea0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	e00f      	b.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eb2:	d11c      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004eb4:	4b11      	ldr	r3, [pc, #68]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d016      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004ec0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004ec4:	61bb      	str	r3, [r7, #24]
      break;
 8004ec6:	e012      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ec8:	e011      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004eca:	f7ff fe85 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	0b9b      	lsrs	r3, r3, #14
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	3301      	adds	r3, #1
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	61bb      	str	r3, [r7, #24]
      break;
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004eee:	bf00      	nop
    }
  }
  return (frequency);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
 8004f00:	08006bf4 	.word	0x08006bf4
 8004f04:	08006c04 	.word	0x08006c04
 8004f08:	007a1200 	.word	0x007a1200
 8004f0c:	003d0900 	.word	0x003d0900
 8004f10:	aaaaaaab 	.word	0xaaaaaaab

08004f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e041      	b.n	8004faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fd fb72 	bl	8002624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f000 fcb2 	bl	80058bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e03a      	b.n	8005042 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	@ (800504c <HAL_TIM_Base_Start_IT+0x98>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00e      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x58>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff6:	d009      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x58>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	@ (8005050 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x58>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a13      	ldr	r2, [pc, #76]	@ (8005054 <HAL_TIM_Base_Start_IT+0xa0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d111      	bne.n	8005030 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b06      	cmp	r3, #6
 800501c:	d010      	beq.n	8005040 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502e:	e007      	b.n	8005040 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800

08005058 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a1a      	ldr	r2, [r3, #32]
 8005076:	f241 1311 	movw	r3, #4369	@ 0x1111
 800507a:	4013      	ands	r3, r2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10f      	bne.n	80050a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6a1a      	ldr	r2, [r3, #32]
 8005086:	f240 4344 	movw	r3, #1092	@ 0x444
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d107      	bne.n	80050a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e041      	b.n	800514a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f839 	bl	8005152 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f000 fbe2 	bl	80058bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d109      	bne.n	8005188 <HAL_TIM_PWM_Start+0x24>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e022      	b.n	80051ce <HAL_TIM_PWM_Start+0x6a>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b04      	cmp	r3, #4
 800518c:	d109      	bne.n	80051a2 <HAL_TIM_PWM_Start+0x3e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	bf14      	ite	ne
 800519a:	2301      	movne	r3, #1
 800519c:	2300      	moveq	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	e015      	b.n	80051ce <HAL_TIM_PWM_Start+0x6a>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d109      	bne.n	80051bc <HAL_TIM_PWM_Start+0x58>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e008      	b.n	80051ce <HAL_TIM_PWM_Start+0x6a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e05e      	b.n	8005294 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Start+0x82>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e4:	e013      	b.n	800520e <HAL_TIM_PWM_Start+0xaa>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_PWM_Start+0x92>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f4:	e00b      	b.n	800520e <HAL_TIM_PWM_Start+0xaa>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_PWM_Start+0xa2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005204:	e003      	b.n	800520e <HAL_TIM_PWM_Start+0xaa>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2201      	movs	r2, #1
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fddc 	bl	8005dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1e      	ldr	r2, [pc, #120]	@ (800529c <HAL_TIM_PWM_Start+0x138>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d107      	bne.n	8005236 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005234:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a18      	ldr	r2, [pc, #96]	@ (800529c <HAL_TIM_PWM_Start+0x138>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIM_PWM_Start+0xfa>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005248:	d009      	beq.n	800525e <HAL_TIM_PWM_Start+0xfa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a14      	ldr	r2, [pc, #80]	@ (80052a0 <HAL_TIM_PWM_Start+0x13c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_PWM_Start+0xfa>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a12      	ldr	r2, [pc, #72]	@ (80052a4 <HAL_TIM_PWM_Start+0x140>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d111      	bne.n	8005282 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b06      	cmp	r3, #6
 800526e:	d010      	beq.n	8005292 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005280:	e007      	b.n	8005292 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800

080052a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fd8a 	bl	8005dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a29      	ldr	r2, [pc, #164]	@ (800536c <HAL_TIM_PWM_Stop+0xc4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d117      	bne.n	80052fa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10f      	bne.n	80052fa <HAL_TIM_PWM_Stop+0x52>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6a1a      	ldr	r2, [r3, #32]
 80052e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d107      	bne.n	80052fa <HAL_TIM_PWM_Stop+0x52>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6a1a      	ldr	r2, [r3, #32]
 8005300:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10f      	bne.n	800532a <HAL_TIM_PWM_Stop+0x82>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	f240 4344 	movw	r3, #1092	@ 0x444
 8005314:	4013      	ands	r3, r2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d107      	bne.n	800532a <HAL_TIM_PWM_Stop+0x82>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <HAL_TIM_PWM_Stop+0x92>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005338:	e013      	b.n	8005362 <HAL_TIM_PWM_Stop+0xba>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d104      	bne.n	800534a <HAL_TIM_PWM_Stop+0xa2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005348:	e00b      	b.n	8005362 <HAL_TIM_PWM_Stop+0xba>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b08      	cmp	r3, #8
 800534e:	d104      	bne.n	800535a <HAL_TIM_PWM_Stop+0xb2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005358:	e003      	b.n	8005362 <HAL_TIM_PWM_Stop+0xba>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40012c00 	.word	0x40012c00

08005370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d020      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01b      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0202 	mvn.w	r2, #2
 80053a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa63 	bl	8005886 <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa56 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fa65 	bl	8005898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d020      	beq.n	8005420 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01b      	beq.n	8005420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0204 	mvn.w	r2, #4
 80053f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa3d 	bl	8005886 <HAL_TIM_IC_CaptureCallback>
 800540c:	e005      	b.n	800541a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa30 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fa3f 	bl	8005898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d020      	beq.n	800546c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01b      	beq.n	800546c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0208 	mvn.w	r2, #8
 800543c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2204      	movs	r2, #4
 8005442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fa17 	bl	8005886 <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa0a 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fa19 	bl	8005898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b00      	cmp	r3, #0
 8005474:	d020      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01b      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0210 	mvn.w	r2, #16
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2208      	movs	r2, #8
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f9f1 	bl	8005886 <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9e4 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f9f3 	bl	8005898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0201 	mvn.w	r2, #1
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f9c3 	bl	8005862 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00c      	beq.n	8005500 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fcf5 	bl	8005eea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00c      	beq.n	8005524 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f9c3 	bl	80058aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00c      	beq.n	8005548 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0220 	mvn.w	r2, #32
 8005540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fcc8 	bl	8005ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800556a:	2302      	movs	r3, #2
 800556c:	e0ae      	b.n	80056cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b0c      	cmp	r3, #12
 800557a:	f200 809f 	bhi.w	80056bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800557e:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	080055b9 	.word	0x080055b9
 8005588:	080056bd 	.word	0x080056bd
 800558c:	080056bd 	.word	0x080056bd
 8005590:	080056bd 	.word	0x080056bd
 8005594:	080055f9 	.word	0x080055f9
 8005598:	080056bd 	.word	0x080056bd
 800559c:	080056bd 	.word	0x080056bd
 80055a0:	080056bd 	.word	0x080056bd
 80055a4:	0800563b 	.word	0x0800563b
 80055a8:	080056bd 	.word	0x080056bd
 80055ac:	080056bd 	.word	0x080056bd
 80055b0:	080056bd 	.word	0x080056bd
 80055b4:	0800567b 	.word	0x0800567b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f9ea 	bl	8005998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0208 	orr.w	r2, r2, #8
 80055d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0204 	bic.w	r2, r2, #4
 80055e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6999      	ldr	r1, [r3, #24]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	619a      	str	r2, [r3, #24]
      break;
 80055f6:	e064      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fa30 	bl	8005a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6999      	ldr	r1, [r3, #24]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	021a      	lsls	r2, r3, #8
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	619a      	str	r2, [r3, #24]
      break;
 8005638:	e043      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fa79 	bl	8005b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0208 	orr.w	r2, r2, #8
 8005654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0204 	bic.w	r2, r2, #4
 8005664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69d9      	ldr	r1, [r3, #28]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	61da      	str	r2, [r3, #28]
      break;
 8005678:	e023      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fac3 	bl	8005c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69d9      	ldr	r1, [r3, #28]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	021a      	lsls	r2, r3, #8
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	61da      	str	r2, [r3, #28]
      break;
 80056ba:	e002      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	75fb      	strb	r3, [r7, #23]
      break;
 80056c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e0b4      	b.n	800585a <HAL_TIM_ConfigClockSource+0x186>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800570e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005728:	d03e      	beq.n	80057a8 <HAL_TIM_ConfigClockSource+0xd4>
 800572a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800572e:	f200 8087 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005736:	f000 8086 	beq.w	8005846 <HAL_TIM_ConfigClockSource+0x172>
 800573a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800573e:	d87f      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b70      	cmp	r3, #112	@ 0x70
 8005742:	d01a      	beq.n	800577a <HAL_TIM_ConfigClockSource+0xa6>
 8005744:	2b70      	cmp	r3, #112	@ 0x70
 8005746:	d87b      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b60      	cmp	r3, #96	@ 0x60
 800574a:	d050      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x11a>
 800574c:	2b60      	cmp	r3, #96	@ 0x60
 800574e:	d877      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005750:	2b50      	cmp	r3, #80	@ 0x50
 8005752:	d03c      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0xfa>
 8005754:	2b50      	cmp	r3, #80	@ 0x50
 8005756:	d873      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005758:	2b40      	cmp	r3, #64	@ 0x40
 800575a:	d058      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x13a>
 800575c:	2b40      	cmp	r3, #64	@ 0x40
 800575e:	d86f      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	2b30      	cmp	r3, #48	@ 0x30
 8005762:	d064      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	2b30      	cmp	r3, #48	@ 0x30
 8005766:	d86b      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d060      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x15a>
 800576c:	2b20      	cmp	r3, #32
 800576e:	d867      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d05c      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x15a>
 8005774:	2b10      	cmp	r3, #16
 8005776:	d05a      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	e062      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800578a:	f000 fb04 	bl	8005d96 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800579c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	609a      	str	r2, [r3, #8]
      break;
 80057a6:	e04f      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057b8:	f000 faed 	bl	8005d96 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ca:	609a      	str	r2, [r3, #8]
      break;
 80057cc:	e03c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057da:	461a      	mov	r2, r3
 80057dc:	f000 fa64 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2150      	movs	r1, #80	@ 0x50
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fabb 	bl	8005d62 <TIM_ITRx_SetConfig>
      break;
 80057ec:	e02c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057fa:	461a      	mov	r2, r3
 80057fc:	f000 fa82 	bl	8005d04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2160      	movs	r1, #96	@ 0x60
 8005806:	4618      	mov	r0, r3
 8005808:	f000 faab 	bl	8005d62 <TIM_ITRx_SetConfig>
      break;
 800580c:	e01c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581a:	461a      	mov	r2, r3
 800581c:	f000 fa44 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2140      	movs	r1, #64	@ 0x40
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fa9b 	bl	8005d62 <TIM_ITRx_SetConfig>
      break;
 800582c:	e00c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f000 fa92 	bl	8005d62 <TIM_ITRx_SetConfig>
      break;
 800583e:	e003      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	73fb      	strb	r3, [r7, #15]
      break;
 8005844:	e000      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr

08005886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr

080058bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a2f      	ldr	r2, [pc, #188]	@ (800598c <TIM_Base_SetConfig+0xd0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_Base_SetConfig+0x30>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0x30>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a2c      	ldr	r2, [pc, #176]	@ (8005990 <TIM_Base_SetConfig+0xd4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0x30>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005994 <TIM_Base_SetConfig+0xd8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d108      	bne.n	80058fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a22      	ldr	r2, [pc, #136]	@ (800598c <TIM_Base_SetConfig+0xd0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_Base_SetConfig+0x62>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0x62>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a1f      	ldr	r2, [pc, #124]	@ (8005990 <TIM_Base_SetConfig+0xd4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0x62>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <TIM_Base_SetConfig+0xd8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a0d      	ldr	r2, [pc, #52]	@ (800598c <TIM_Base_SetConfig+0xd0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d103      	bne.n	8005964 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f023 0201 	bic.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	611a      	str	r2, [r3, #16]
  }
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800

08005998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f023 0201 	bic.w	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0303 	bic.w	r3, r3, #3
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f023 0302 	bic.w	r3, r3, #2
 80059e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005a60 <TIM_OC1_SetConfig+0xc8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d10c      	bne.n	8005a0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0308 	bic.w	r3, r3, #8
 80059fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a13      	ldr	r2, [pc, #76]	@ (8005a60 <TIM_OC1_SetConfig+0xc8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d111      	bne.n	8005a3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	621a      	str	r2, [r3, #32]
}
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40012c00 	.word	0x40012c00

08005a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f023 0210 	bic.w	r2, r3, #16
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f023 0320 	bic.w	r3, r3, #32
 8005aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a1d      	ldr	r2, [pc, #116]	@ (8005b34 <TIM_OC2_SetConfig+0xd0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d10d      	bne.n	8005ae0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a14      	ldr	r2, [pc, #80]	@ (8005b34 <TIM_OC2_SetConfig+0xd0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d113      	bne.n	8005b10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr
 8005b34:	40012c00 	.word	0x40012c00

08005b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1d      	ldr	r2, [pc, #116]	@ (8005c08 <TIM_OC3_SetConfig+0xd0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d10d      	bne.n	8005bb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a14      	ldr	r2, [pc, #80]	@ (8005c08 <TIM_OC3_SetConfig+0xd0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d113      	bne.n	8005be2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40012c00 	.word	0x40012c00

08005c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	031b      	lsls	r3, r3, #12
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a0f      	ldr	r2, [pc, #60]	@ (8005ca4 <TIM_OC4_SetConfig+0x98>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d109      	bne.n	8005c80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	019b      	lsls	r3, r3, #6
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr
 8005ca4:	40012c00 	.word	0x40012c00

08005ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 030a 	bic.w	r3, r3, #10
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f023 0210 	bic.w	r2, r3, #16
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	031b      	lsls	r3, r3, #12
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	621a      	str	r2, [r3, #32]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr

08005d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f043 0307 	orr.w	r3, r3, #7
 8005d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	609a      	str	r2, [r3, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr

08005d96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005db0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	021a      	lsls	r2, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	609a      	str	r2, [r3, #8]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2201      	movs	r2, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	43db      	mvns	r3, r3
 8005df6:	401a      	ands	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e046      	b.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a16      	ldr	r2, [pc, #88]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e80:	d009      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a12      	ldr	r2, [pc, #72]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a10      	ldr	r2, [pc, #64]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d10c      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800

08005ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <SEND_4_BIT>:
 */

#include "LCD_16x2_PARALLEL.h"

void SEND_4_BIT(char data, uint8_t rsPin)//rs=0 yra instruction register o HIGH(1) data register
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	460a      	mov	r2, r1
 8005f06:	71fb      	strb	r3, [r7, #7]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rsPin);
 8005f0c:	79bb      	ldrb	r3, [r7, #6]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f14:	4823      	ldr	r0, [pc, #140]	@ (8005fa4 <SEND_4_BIT+0xa8>)
 8005f16:	f7fe fa4c 	bl	80043b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f20:	4820      	ldr	r0, [pc, #128]	@ (8005fa4 <SEND_4_BIT+0xa8>)
 8005f22:	f7fe fa46 	bl	80043b2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data>>0)&0x1);
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	2120      	movs	r1, #32
 8005f32:	481d      	ldr	r0, [pc, #116]	@ (8005fa8 <SEND_4_BIT+0xac>)
 8005f34:	f7fe fa3d 	bl	80043b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data>>1)&0x1);
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	2140      	movs	r1, #64	@ 0x40
 8005f48:	4817      	ldr	r0, [pc, #92]	@ (8005fa8 <SEND_4_BIT+0xac>)
 8005f4a:	f7fe fa32 	bl	80043b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data>>2)&0x1);
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	089b      	lsrs	r3, r3, #2
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2180      	movs	r1, #128	@ 0x80
 8005f5e:	4812      	ldr	r0, [pc, #72]	@ (8005fa8 <SEND_4_BIT+0xac>)
 8005f60:	f7fe fa27 	bl	80043b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data>>3)&0x1);
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	08db      	lsrs	r3, r3, #3
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f76:	480c      	ldr	r0, [pc, #48]	@ (8005fa8 <SEND_4_BIT+0xac>)
 8005f78:	f7fe fa1b 	bl	80043b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f82:	4808      	ldr	r0, [pc, #32]	@ (8005fa4 <SEND_4_BIT+0xa8>)
 8005f84:	f7fe fa15 	bl	80043b2 <HAL_GPIO_WritePin>
	DELAY_US(500); // Allow LCD to latch
 8005f88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005f8c:	f7fb fcce 	bl	800192c <DELAY_US>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8005f90:	2200      	movs	r2, #0
 8005f92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f96:	4803      	ldr	r0, [pc, #12]	@ (8005fa4 <SEND_4_BIT+0xa8>)
 8005f98:	f7fe fa0b 	bl	80043b2 <HAL_GPIO_WritePin>

}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40010800 	.word	0x40010800
 8005fa8:	40010c00 	.word	0x40010c00

08005fac <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(char komanda)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	091b      	lsrs	r3, r3, #4
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	4b13      	ldr	r3, [pc, #76]	@ (800600c <LCD_SEND_COMMAND+0x60>)
 8005fbe:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8005fc0:	4b12      	ldr	r3, [pc, #72]	@ (800600c <LCD_SEND_COMMAND+0x60>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff ff98 	bl	8005efc <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <LCD_SEND_COMMAND+0x60>)
 8005fd6:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <LCD_SEND_COMMAND+0x60>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff ff8c 	bl	8005efc <SEND_4_BIT>
	if (komanda == 0x01 || komanda == 0x02) {
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d002      	beq.n	8005ff0 <LCD_SEND_COMMAND+0x44>
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d103      	bne.n	8005ff8 <LCD_SEND_COMMAND+0x4c>
		HAL_Delay(2); // These are extra slow
 8005ff0:	2002      	movs	r0, #2
 8005ff2:	f7fc fc1b 	bl	800282c <HAL_Delay>
 8005ff6:	e004      	b.n	8006002 <LCD_SEND_COMMAND+0x56>
	} else {
		DELAY_US(300); // All other commands
 8005ff8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005ffc:	f7fb fc96 	bl	800192c <DELAY_US>
	}
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	200002fc 	.word	0x200002fc

08006010 <LCD_SEND_DATA>:
void LCD_SEND_DATA(char komanda)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	b2da      	uxtb	r2, r3
 8006020:	4b0b      	ldr	r3, [pc, #44]	@ (8006050 <LCD_SEND_DATA+0x40>)
 8006022:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8006024:	4b0a      	ldr	r3, [pc, #40]	@ (8006050 <LCD_SEND_DATA+0x40>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2101      	movs	r1, #1
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff ff66 	bl	8005efc <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	b2da      	uxtb	r2, r3
 8006038:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <LCD_SEND_DATA+0x40>)
 800603a:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 800603c:	4b04      	ldr	r3, [pc, #16]	@ (8006050 <LCD_SEND_DATA+0x40>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2101      	movs	r1, #1
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff ff5a 	bl	8005efc <SEND_4_BIT>
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	200002fd 	.word	0x200002fd

08006054 <LCD_CLEAR>:

void LCD_CLEAR()
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_DISPLAY_CLEAR);
 8006058:	2001      	movs	r0, #1
 800605a:	f7ff ffa7 	bl	8005fac <LCD_SEND_COMMAND>
}
 800605e:	bf00      	nop
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <LCD_Init>:
	}
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
}

void LCD_Init()
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin,GPIO_PIN_RESET);
 8006068:	2200      	movs	r2, #0
 800606a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800606e:	4827      	ldr	r0, [pc, #156]	@ (800610c <LCD_Init+0xa8>)
 8006070:	f7fe f99f 	bl	80043b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin,GPIO_PIN_RESET);
 8006074:	2200      	movs	r2, #0
 8006076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800607a:	4824      	ldr	r0, [pc, #144]	@ (800610c <LCD_Init+0xa8>)
 800607c:	f7fe f999 	bl	80043b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8006080:	2200      	movs	r2, #0
 8006082:	2120      	movs	r1, #32
 8006084:	4822      	ldr	r0, [pc, #136]	@ (8006110 <LCD_Init+0xac>)
 8006086:	f7fe f994 	bl	80043b2 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 800608a:	2200      	movs	r2, #0
 800608c:	2140      	movs	r1, #64	@ 0x40
 800608e:	4820      	ldr	r0, [pc, #128]	@ (8006110 <LCD_Init+0xac>)
 8006090:	f7fe f98f 	bl	80043b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8006094:	2200      	movs	r2, #0
 8006096:	2180      	movs	r1, #128	@ 0x80
 8006098:	481d      	ldr	r0, [pc, #116]	@ (8006110 <LCD_Init+0xac>)
 800609a:	f7fe f98a 	bl	80043b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 800609e:	2200      	movs	r2, #0
 80060a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80060a4:	481a      	ldr	r0, [pc, #104]	@ (8006110 <LCD_Init+0xac>)
 80060a6:	f7fe f984 	bl	80043b2 <HAL_GPIO_WritePin>

    HAL_Delay(200); // Wait >40ms after power-on
 80060aa:	20c8      	movs	r0, #200	@ 0xc8
 80060ac:	f7fc fbbe 	bl	800282c <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 80060b0:	2100      	movs	r1, #0
 80060b2:	2003      	movs	r0, #3
 80060b4:	f7ff ff22 	bl	8005efc <SEND_4_BIT>
    HAL_Delay(2);
 80060b8:	2002      	movs	r0, #2
 80060ba:	f7fc fbb7 	bl	800282c <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 80060be:	2100      	movs	r1, #0
 80060c0:	2003      	movs	r0, #3
 80060c2:	f7ff ff1b 	bl	8005efc <SEND_4_BIT>
    HAL_Delay(2);
 80060c6:	2002      	movs	r0, #2
 80060c8:	f7fc fbb0 	bl	800282c <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 80060cc:	2100      	movs	r1, #0
 80060ce:	2003      	movs	r0, #3
 80060d0:	f7ff ff14 	bl	8005efc <SEND_4_BIT>
    HAL_Delay(2);
 80060d4:	2002      	movs	r0, #2
 80060d6:	f7fc fba9 	bl	800282c <HAL_Delay>
    SEND_4_BIT(0x2, LCD_RS_INSTRUCTION);
 80060da:	2100      	movs	r1, #0
 80060dc:	2002      	movs	r0, #2
 80060de:	f7ff ff0d 	bl	8005efc <SEND_4_BIT>
    HAL_Delay(10);
 80060e2:	200a      	movs	r0, #10
 80060e4:	f7fc fba2 	bl	800282c <HAL_Delay>

    //4 bit interface started
    LCD_SEND_COMMAND(0x28);  // Function Set: 4-bit, 2 lines, 5x8 dots
 80060e8:	2028      	movs	r0, #40	@ 0x28
 80060ea:	f7ff ff5f 	bl	8005fac <LCD_SEND_COMMAND>
	// From now on: full commands (2 x 4-bit transfers)
    LCD_SEND_COMMAND(0x08);  // Display OFF (D=0, C=0, B=0)
 80060ee:	2008      	movs	r0, #8
 80060f0:	f7ff ff5c 	bl	8005fac <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x01);  // Clear Display
 80060f4:	2001      	movs	r0, #1
 80060f6:	f7ff ff59 	bl	8005fac <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x06);  // Entry Mode Set: Increment, No shift
 80060fa:	2006      	movs	r0, #6
 80060fc:	f7ff ff56 	bl	8005fac <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x0C);  // Display ON, Cursor OFF, Blink OFF
 8006100:	200c      	movs	r0, #12
 8006102:	f7ff ff53 	bl	8005fac <LCD_SEND_COMMAND>
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40010800 	.word	0x40010800
 8006110:	40010c00 	.word	0x40010c00

08006114 <LCD_SEND_STR>:

void LCD_SEND_STR(const char data[], uint8_t place, uint8_t level)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
 8006120:	4613      	mov	r3, r2
 8006122:	70bb      	strb	r3, [r7, #2]
	/*
	 * @brief Offset from left side and level 0 - top and 1 - bottom
	 */
	if(level==1)
 8006124:	78bb      	ldrb	r3, [r7, #2]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d106      	bne.n	8006138 <LCD_SEND_STR+0x24>
	{
		LCD_SEND_COMMAND(0xC0+place);
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	3b40      	subs	r3, #64	@ 0x40
 800612e:	b2db      	uxtb	r3, r3
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff ff3b 	bl	8005fac <LCD_SEND_COMMAND>
 8006136:	e005      	b.n	8006144 <LCD_SEND_STR+0x30>
	}
	else LCD_SEND_COMMAND(0x80+place);
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	3b80      	subs	r3, #128	@ 0x80
 800613c:	b2db      	uxtb	r3, r3
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff ff34 	bl	8005fac <LCD_SEND_COMMAND>
	//kai N=high 2 line tai 1 line 0-4F o 2 0-27h   40-67h
	// KAI level 0 tai pirmas kai 1 tai antras levelis
	static uint8_t x;
	x = 0;
 8006144:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <LCD_SEND_STR+0x70>)
 8006146:	2200      	movs	r2, #0
 8006148:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 800614a:	e00e      	b.n	800616a <LCD_SEND_STR+0x56>
	{
		LCD_SEND_DATA(data[x]);
 800614c:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <LCD_SEND_STR+0x70>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff ff59 	bl	8006010 <LCD_SEND_DATA>
		x++;
 800615e:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <LCD_SEND_STR+0x70>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	3301      	adds	r3, #1
 8006164:	b2da      	uxtb	r2, r3
 8006166:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <LCD_SEND_STR+0x70>)
 8006168:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <LCD_SEND_STR+0x70>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e8      	bne.n	800614c <LCD_SEND_STR+0x38>
	}
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	200002fe 	.word	0x200002fe

08006188 <siprintf>:
 8006188:	b40e      	push	{r1, r2, r3}
 800618a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800618e:	b510      	push	{r4, lr}
 8006190:	2400      	movs	r4, #0
 8006192:	b09d      	sub	sp, #116	@ 0x74
 8006194:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006196:	9002      	str	r0, [sp, #8]
 8006198:	9006      	str	r0, [sp, #24]
 800619a:	9107      	str	r1, [sp, #28]
 800619c:	9104      	str	r1, [sp, #16]
 800619e:	4809      	ldr	r0, [pc, #36]	@ (80061c4 <siprintf+0x3c>)
 80061a0:	4909      	ldr	r1, [pc, #36]	@ (80061c8 <siprintf+0x40>)
 80061a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a6:	9105      	str	r1, [sp, #20]
 80061a8:	6800      	ldr	r0, [r0, #0]
 80061aa:	a902      	add	r1, sp, #8
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061b0:	f000 f9ac 	bl	800650c <_svfiprintf_r>
 80061b4:	9b02      	ldr	r3, [sp, #8]
 80061b6:	701c      	strb	r4, [r3, #0]
 80061b8:	b01d      	add	sp, #116	@ 0x74
 80061ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061be:	b003      	add	sp, #12
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20000018 	.word	0x20000018
 80061c8:	ffff0208 	.word	0xffff0208

080061cc <memmove>:
 80061cc:	4288      	cmp	r0, r1
 80061ce:	b510      	push	{r4, lr}
 80061d0:	eb01 0402 	add.w	r4, r1, r2
 80061d4:	d902      	bls.n	80061dc <memmove+0x10>
 80061d6:	4284      	cmp	r4, r0
 80061d8:	4623      	mov	r3, r4
 80061da:	d807      	bhi.n	80061ec <memmove+0x20>
 80061dc:	1e43      	subs	r3, r0, #1
 80061de:	42a1      	cmp	r1, r4
 80061e0:	d008      	beq.n	80061f4 <memmove+0x28>
 80061e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ea:	e7f8      	b.n	80061de <memmove+0x12>
 80061ec:	4601      	mov	r1, r0
 80061ee:	4402      	add	r2, r0
 80061f0:	428a      	cmp	r2, r1
 80061f2:	d100      	bne.n	80061f6 <memmove+0x2a>
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061fe:	e7f7      	b.n	80061f0 <memmove+0x24>

08006200 <memset>:
 8006200:	4603      	mov	r3, r0
 8006202:	4402      	add	r2, r0
 8006204:	4293      	cmp	r3, r2
 8006206:	d100      	bne.n	800620a <memset+0xa>
 8006208:	4770      	bx	lr
 800620a:	f803 1b01 	strb.w	r1, [r3], #1
 800620e:	e7f9      	b.n	8006204 <memset+0x4>

08006210 <__errno>:
 8006210:	4b01      	ldr	r3, [pc, #4]	@ (8006218 <__errno+0x8>)
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000018 	.word	0x20000018

0800621c <__libc_init_array>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	2600      	movs	r6, #0
 8006220:	4d0c      	ldr	r5, [pc, #48]	@ (8006254 <__libc_init_array+0x38>)
 8006222:	4c0d      	ldr	r4, [pc, #52]	@ (8006258 <__libc_init_array+0x3c>)
 8006224:	1b64      	subs	r4, r4, r5
 8006226:	10a4      	asrs	r4, r4, #2
 8006228:	42a6      	cmp	r6, r4
 800622a:	d109      	bne.n	8006240 <__libc_init_array+0x24>
 800622c:	f000 fc5c 	bl	8006ae8 <_init>
 8006230:	2600      	movs	r6, #0
 8006232:	4d0a      	ldr	r5, [pc, #40]	@ (800625c <__libc_init_array+0x40>)
 8006234:	4c0a      	ldr	r4, [pc, #40]	@ (8006260 <__libc_init_array+0x44>)
 8006236:	1b64      	subs	r4, r4, r5
 8006238:	10a4      	asrs	r4, r4, #2
 800623a:	42a6      	cmp	r6, r4
 800623c:	d105      	bne.n	800624a <__libc_init_array+0x2e>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	f855 3b04 	ldr.w	r3, [r5], #4
 8006244:	4798      	blx	r3
 8006246:	3601      	adds	r6, #1
 8006248:	e7ee      	b.n	8006228 <__libc_init_array+0xc>
 800624a:	f855 3b04 	ldr.w	r3, [r5], #4
 800624e:	4798      	blx	r3
 8006250:	3601      	adds	r6, #1
 8006252:	e7f2      	b.n	800623a <__libc_init_array+0x1e>
 8006254:	08006c44 	.word	0x08006c44
 8006258:	08006c44 	.word	0x08006c44
 800625c:	08006c44 	.word	0x08006c44
 8006260:	08006c48 	.word	0x08006c48

08006264 <__retarget_lock_acquire_recursive>:
 8006264:	4770      	bx	lr

08006266 <__retarget_lock_release_recursive>:
 8006266:	4770      	bx	lr

08006268 <_free_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4605      	mov	r5, r0
 800626c:	2900      	cmp	r1, #0
 800626e:	d040      	beq.n	80062f2 <_free_r+0x8a>
 8006270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006274:	1f0c      	subs	r4, r1, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfb8      	it	lt
 800627a:	18e4      	addlt	r4, r4, r3
 800627c:	f000 f8de 	bl	800643c <__malloc_lock>
 8006280:	4a1c      	ldr	r2, [pc, #112]	@ (80062f4 <_free_r+0x8c>)
 8006282:	6813      	ldr	r3, [r2, #0]
 8006284:	b933      	cbnz	r3, 8006294 <_free_r+0x2c>
 8006286:	6063      	str	r3, [r4, #4]
 8006288:	6014      	str	r4, [r2, #0]
 800628a:	4628      	mov	r0, r5
 800628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006290:	f000 b8da 	b.w	8006448 <__malloc_unlock>
 8006294:	42a3      	cmp	r3, r4
 8006296:	d908      	bls.n	80062aa <_free_r+0x42>
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	1821      	adds	r1, r4, r0
 800629c:	428b      	cmp	r3, r1
 800629e:	bf01      	itttt	eq
 80062a0:	6819      	ldreq	r1, [r3, #0]
 80062a2:	685b      	ldreq	r3, [r3, #4]
 80062a4:	1809      	addeq	r1, r1, r0
 80062a6:	6021      	streq	r1, [r4, #0]
 80062a8:	e7ed      	b.n	8006286 <_free_r+0x1e>
 80062aa:	461a      	mov	r2, r3
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	b10b      	cbz	r3, 80062b4 <_free_r+0x4c>
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d9fa      	bls.n	80062aa <_free_r+0x42>
 80062b4:	6811      	ldr	r1, [r2, #0]
 80062b6:	1850      	adds	r0, r2, r1
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d10b      	bne.n	80062d4 <_free_r+0x6c>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	4401      	add	r1, r0
 80062c0:	1850      	adds	r0, r2, r1
 80062c2:	4283      	cmp	r3, r0
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	d1e0      	bne.n	800628a <_free_r+0x22>
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	4408      	add	r0, r1
 80062ce:	6010      	str	r0, [r2, #0]
 80062d0:	6053      	str	r3, [r2, #4]
 80062d2:	e7da      	b.n	800628a <_free_r+0x22>
 80062d4:	d902      	bls.n	80062dc <_free_r+0x74>
 80062d6:	230c      	movs	r3, #12
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	e7d6      	b.n	800628a <_free_r+0x22>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	1821      	adds	r1, r4, r0
 80062e0:	428b      	cmp	r3, r1
 80062e2:	bf01      	itttt	eq
 80062e4:	6819      	ldreq	r1, [r3, #0]
 80062e6:	685b      	ldreq	r3, [r3, #4]
 80062e8:	1809      	addeq	r1, r1, r0
 80062ea:	6021      	streq	r1, [r4, #0]
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	6054      	str	r4, [r2, #4]
 80062f0:	e7cb      	b.n	800628a <_free_r+0x22>
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	20000444 	.word	0x20000444

080062f8 <sbrk_aligned>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006338 <sbrk_aligned+0x40>)
 80062fc:	460c      	mov	r4, r1
 80062fe:	6831      	ldr	r1, [r6, #0]
 8006300:	4605      	mov	r5, r0
 8006302:	b911      	cbnz	r1, 800630a <sbrk_aligned+0x12>
 8006304:	f000 fb8e 	bl	8006a24 <_sbrk_r>
 8006308:	6030      	str	r0, [r6, #0]
 800630a:	4621      	mov	r1, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f000 fb89 	bl	8006a24 <_sbrk_r>
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	d103      	bne.n	800631e <sbrk_aligned+0x26>
 8006316:	f04f 34ff 	mov.w	r4, #4294967295
 800631a:	4620      	mov	r0, r4
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	1cc4      	adds	r4, r0, #3
 8006320:	f024 0403 	bic.w	r4, r4, #3
 8006324:	42a0      	cmp	r0, r4
 8006326:	d0f8      	beq.n	800631a <sbrk_aligned+0x22>
 8006328:	1a21      	subs	r1, r4, r0
 800632a:	4628      	mov	r0, r5
 800632c:	f000 fb7a 	bl	8006a24 <_sbrk_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d1f2      	bne.n	800631a <sbrk_aligned+0x22>
 8006334:	e7ef      	b.n	8006316 <sbrk_aligned+0x1e>
 8006336:	bf00      	nop
 8006338:	20000440 	.word	0x20000440

0800633c <_malloc_r>:
 800633c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006340:	1ccd      	adds	r5, r1, #3
 8006342:	f025 0503 	bic.w	r5, r5, #3
 8006346:	3508      	adds	r5, #8
 8006348:	2d0c      	cmp	r5, #12
 800634a:	bf38      	it	cc
 800634c:	250c      	movcc	r5, #12
 800634e:	2d00      	cmp	r5, #0
 8006350:	4606      	mov	r6, r0
 8006352:	db01      	blt.n	8006358 <_malloc_r+0x1c>
 8006354:	42a9      	cmp	r1, r5
 8006356:	d904      	bls.n	8006362 <_malloc_r+0x26>
 8006358:	230c      	movs	r3, #12
 800635a:	6033      	str	r3, [r6, #0]
 800635c:	2000      	movs	r0, #0
 800635e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006362:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006438 <_malloc_r+0xfc>
 8006366:	f000 f869 	bl	800643c <__malloc_lock>
 800636a:	f8d8 3000 	ldr.w	r3, [r8]
 800636e:	461c      	mov	r4, r3
 8006370:	bb44      	cbnz	r4, 80063c4 <_malloc_r+0x88>
 8006372:	4629      	mov	r1, r5
 8006374:	4630      	mov	r0, r6
 8006376:	f7ff ffbf 	bl	80062f8 <sbrk_aligned>
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	4604      	mov	r4, r0
 800637e:	d158      	bne.n	8006432 <_malloc_r+0xf6>
 8006380:	f8d8 4000 	ldr.w	r4, [r8]
 8006384:	4627      	mov	r7, r4
 8006386:	2f00      	cmp	r7, #0
 8006388:	d143      	bne.n	8006412 <_malloc_r+0xd6>
 800638a:	2c00      	cmp	r4, #0
 800638c:	d04b      	beq.n	8006426 <_malloc_r+0xea>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	4639      	mov	r1, r7
 8006392:	4630      	mov	r0, r6
 8006394:	eb04 0903 	add.w	r9, r4, r3
 8006398:	f000 fb44 	bl	8006a24 <_sbrk_r>
 800639c:	4581      	cmp	r9, r0
 800639e:	d142      	bne.n	8006426 <_malloc_r+0xea>
 80063a0:	6821      	ldr	r1, [r4, #0]
 80063a2:	4630      	mov	r0, r6
 80063a4:	1a6d      	subs	r5, r5, r1
 80063a6:	4629      	mov	r1, r5
 80063a8:	f7ff ffa6 	bl	80062f8 <sbrk_aligned>
 80063ac:	3001      	adds	r0, #1
 80063ae:	d03a      	beq.n	8006426 <_malloc_r+0xea>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	442b      	add	r3, r5
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	bb62      	cbnz	r2, 8006418 <_malloc_r+0xdc>
 80063be:	f8c8 7000 	str.w	r7, [r8]
 80063c2:	e00f      	b.n	80063e4 <_malloc_r+0xa8>
 80063c4:	6822      	ldr	r2, [r4, #0]
 80063c6:	1b52      	subs	r2, r2, r5
 80063c8:	d420      	bmi.n	800640c <_malloc_r+0xd0>
 80063ca:	2a0b      	cmp	r2, #11
 80063cc:	d917      	bls.n	80063fe <_malloc_r+0xc2>
 80063ce:	1961      	adds	r1, r4, r5
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	6025      	str	r5, [r4, #0]
 80063d4:	bf18      	it	ne
 80063d6:	6059      	strne	r1, [r3, #4]
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	bf08      	it	eq
 80063dc:	f8c8 1000 	streq.w	r1, [r8]
 80063e0:	5162      	str	r2, [r4, r5]
 80063e2:	604b      	str	r3, [r1, #4]
 80063e4:	4630      	mov	r0, r6
 80063e6:	f000 f82f 	bl	8006448 <__malloc_unlock>
 80063ea:	f104 000b 	add.w	r0, r4, #11
 80063ee:	1d23      	adds	r3, r4, #4
 80063f0:	f020 0007 	bic.w	r0, r0, #7
 80063f4:	1ac2      	subs	r2, r0, r3
 80063f6:	bf1c      	itt	ne
 80063f8:	1a1b      	subne	r3, r3, r0
 80063fa:	50a3      	strne	r3, [r4, r2]
 80063fc:	e7af      	b.n	800635e <_malloc_r+0x22>
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	42a3      	cmp	r3, r4
 8006402:	bf0c      	ite	eq
 8006404:	f8c8 2000 	streq.w	r2, [r8]
 8006408:	605a      	strne	r2, [r3, #4]
 800640a:	e7eb      	b.n	80063e4 <_malloc_r+0xa8>
 800640c:	4623      	mov	r3, r4
 800640e:	6864      	ldr	r4, [r4, #4]
 8006410:	e7ae      	b.n	8006370 <_malloc_r+0x34>
 8006412:	463c      	mov	r4, r7
 8006414:	687f      	ldr	r7, [r7, #4]
 8006416:	e7b6      	b.n	8006386 <_malloc_r+0x4a>
 8006418:	461a      	mov	r2, r3
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	42a3      	cmp	r3, r4
 800641e:	d1fb      	bne.n	8006418 <_malloc_r+0xdc>
 8006420:	2300      	movs	r3, #0
 8006422:	6053      	str	r3, [r2, #4]
 8006424:	e7de      	b.n	80063e4 <_malloc_r+0xa8>
 8006426:	230c      	movs	r3, #12
 8006428:	4630      	mov	r0, r6
 800642a:	6033      	str	r3, [r6, #0]
 800642c:	f000 f80c 	bl	8006448 <__malloc_unlock>
 8006430:	e794      	b.n	800635c <_malloc_r+0x20>
 8006432:	6005      	str	r5, [r0, #0]
 8006434:	e7d6      	b.n	80063e4 <_malloc_r+0xa8>
 8006436:	bf00      	nop
 8006438:	20000444 	.word	0x20000444

0800643c <__malloc_lock>:
 800643c:	4801      	ldr	r0, [pc, #4]	@ (8006444 <__malloc_lock+0x8>)
 800643e:	f7ff bf11 	b.w	8006264 <__retarget_lock_acquire_recursive>
 8006442:	bf00      	nop
 8006444:	2000043c 	.word	0x2000043c

08006448 <__malloc_unlock>:
 8006448:	4801      	ldr	r0, [pc, #4]	@ (8006450 <__malloc_unlock+0x8>)
 800644a:	f7ff bf0c 	b.w	8006266 <__retarget_lock_release_recursive>
 800644e:	bf00      	nop
 8006450:	2000043c 	.word	0x2000043c

08006454 <__ssputs_r>:
 8006454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006458:	461f      	mov	r7, r3
 800645a:	688e      	ldr	r6, [r1, #8]
 800645c:	4682      	mov	sl, r0
 800645e:	42be      	cmp	r6, r7
 8006460:	460c      	mov	r4, r1
 8006462:	4690      	mov	r8, r2
 8006464:	680b      	ldr	r3, [r1, #0]
 8006466:	d82d      	bhi.n	80064c4 <__ssputs_r+0x70>
 8006468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800646c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006470:	d026      	beq.n	80064c0 <__ssputs_r+0x6c>
 8006472:	6965      	ldr	r5, [r4, #20]
 8006474:	6909      	ldr	r1, [r1, #16]
 8006476:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800647a:	eba3 0901 	sub.w	r9, r3, r1
 800647e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006482:	1c7b      	adds	r3, r7, #1
 8006484:	444b      	add	r3, r9
 8006486:	106d      	asrs	r5, r5, #1
 8006488:	429d      	cmp	r5, r3
 800648a:	bf38      	it	cc
 800648c:	461d      	movcc	r5, r3
 800648e:	0553      	lsls	r3, r2, #21
 8006490:	d527      	bpl.n	80064e2 <__ssputs_r+0x8e>
 8006492:	4629      	mov	r1, r5
 8006494:	f7ff ff52 	bl	800633c <_malloc_r>
 8006498:	4606      	mov	r6, r0
 800649a:	b360      	cbz	r0, 80064f6 <__ssputs_r+0xa2>
 800649c:	464a      	mov	r2, r9
 800649e:	6921      	ldr	r1, [r4, #16]
 80064a0:	f000 fade 	bl	8006a60 <memcpy>
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ae:	81a3      	strh	r3, [r4, #12]
 80064b0:	6126      	str	r6, [r4, #16]
 80064b2:	444e      	add	r6, r9
 80064b4:	6026      	str	r6, [r4, #0]
 80064b6:	463e      	mov	r6, r7
 80064b8:	6165      	str	r5, [r4, #20]
 80064ba:	eba5 0509 	sub.w	r5, r5, r9
 80064be:	60a5      	str	r5, [r4, #8]
 80064c0:	42be      	cmp	r6, r7
 80064c2:	d900      	bls.n	80064c6 <__ssputs_r+0x72>
 80064c4:	463e      	mov	r6, r7
 80064c6:	4632      	mov	r2, r6
 80064c8:	4641      	mov	r1, r8
 80064ca:	6820      	ldr	r0, [r4, #0]
 80064cc:	f7ff fe7e 	bl	80061cc <memmove>
 80064d0:	2000      	movs	r0, #0
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	1b9b      	subs	r3, r3, r6
 80064d6:	60a3      	str	r3, [r4, #8]
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	4433      	add	r3, r6
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e2:	462a      	mov	r2, r5
 80064e4:	f000 faca 	bl	8006a7c <_realloc_r>
 80064e8:	4606      	mov	r6, r0
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d1e0      	bne.n	80064b0 <__ssputs_r+0x5c>
 80064ee:	4650      	mov	r0, sl
 80064f0:	6921      	ldr	r1, [r4, #16]
 80064f2:	f7ff feb9 	bl	8006268 <_free_r>
 80064f6:	230c      	movs	r3, #12
 80064f8:	f8ca 3000 	str.w	r3, [sl]
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	e7e9      	b.n	80064de <__ssputs_r+0x8a>
	...

0800650c <_svfiprintf_r>:
 800650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006510:	4698      	mov	r8, r3
 8006512:	898b      	ldrh	r3, [r1, #12]
 8006514:	4607      	mov	r7, r0
 8006516:	061b      	lsls	r3, r3, #24
 8006518:	460d      	mov	r5, r1
 800651a:	4614      	mov	r4, r2
 800651c:	b09d      	sub	sp, #116	@ 0x74
 800651e:	d510      	bpl.n	8006542 <_svfiprintf_r+0x36>
 8006520:	690b      	ldr	r3, [r1, #16]
 8006522:	b973      	cbnz	r3, 8006542 <_svfiprintf_r+0x36>
 8006524:	2140      	movs	r1, #64	@ 0x40
 8006526:	f7ff ff09 	bl	800633c <_malloc_r>
 800652a:	6028      	str	r0, [r5, #0]
 800652c:	6128      	str	r0, [r5, #16]
 800652e:	b930      	cbnz	r0, 800653e <_svfiprintf_r+0x32>
 8006530:	230c      	movs	r3, #12
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	b01d      	add	sp, #116	@ 0x74
 800653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653e:	2340      	movs	r3, #64	@ 0x40
 8006540:	616b      	str	r3, [r5, #20]
 8006542:	2300      	movs	r3, #0
 8006544:	9309      	str	r3, [sp, #36]	@ 0x24
 8006546:	2320      	movs	r3, #32
 8006548:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800654c:	2330      	movs	r3, #48	@ 0x30
 800654e:	f04f 0901 	mov.w	r9, #1
 8006552:	f8cd 800c 	str.w	r8, [sp, #12]
 8006556:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80066f0 <_svfiprintf_r+0x1e4>
 800655a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800655e:	4623      	mov	r3, r4
 8006560:	469a      	mov	sl, r3
 8006562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006566:	b10a      	cbz	r2, 800656c <_svfiprintf_r+0x60>
 8006568:	2a25      	cmp	r2, #37	@ 0x25
 800656a:	d1f9      	bne.n	8006560 <_svfiprintf_r+0x54>
 800656c:	ebba 0b04 	subs.w	fp, sl, r4
 8006570:	d00b      	beq.n	800658a <_svfiprintf_r+0x7e>
 8006572:	465b      	mov	r3, fp
 8006574:	4622      	mov	r2, r4
 8006576:	4629      	mov	r1, r5
 8006578:	4638      	mov	r0, r7
 800657a:	f7ff ff6b 	bl	8006454 <__ssputs_r>
 800657e:	3001      	adds	r0, #1
 8006580:	f000 80a7 	beq.w	80066d2 <_svfiprintf_r+0x1c6>
 8006584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006586:	445a      	add	r2, fp
 8006588:	9209      	str	r2, [sp, #36]	@ 0x24
 800658a:	f89a 3000 	ldrb.w	r3, [sl]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 809f 	beq.w	80066d2 <_svfiprintf_r+0x1c6>
 8006594:	2300      	movs	r3, #0
 8006596:	f04f 32ff 	mov.w	r2, #4294967295
 800659a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800659e:	f10a 0a01 	add.w	sl, sl, #1
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	9307      	str	r3, [sp, #28]
 80065a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80065ac:	4654      	mov	r4, sl
 80065ae:	2205      	movs	r2, #5
 80065b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b4:	484e      	ldr	r0, [pc, #312]	@ (80066f0 <_svfiprintf_r+0x1e4>)
 80065b6:	f000 fa45 	bl	8006a44 <memchr>
 80065ba:	9a04      	ldr	r2, [sp, #16]
 80065bc:	b9d8      	cbnz	r0, 80065f6 <_svfiprintf_r+0xea>
 80065be:	06d0      	lsls	r0, r2, #27
 80065c0:	bf44      	itt	mi
 80065c2:	2320      	movmi	r3, #32
 80065c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065c8:	0711      	lsls	r1, r2, #28
 80065ca:	bf44      	itt	mi
 80065cc:	232b      	movmi	r3, #43	@ 0x2b
 80065ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065d2:	f89a 3000 	ldrb.w	r3, [sl]
 80065d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80065d8:	d015      	beq.n	8006606 <_svfiprintf_r+0xfa>
 80065da:	4654      	mov	r4, sl
 80065dc:	2000      	movs	r0, #0
 80065de:	f04f 0c0a 	mov.w	ip, #10
 80065e2:	9a07      	ldr	r2, [sp, #28]
 80065e4:	4621      	mov	r1, r4
 80065e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ea:	3b30      	subs	r3, #48	@ 0x30
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d94b      	bls.n	8006688 <_svfiprintf_r+0x17c>
 80065f0:	b1b0      	cbz	r0, 8006620 <_svfiprintf_r+0x114>
 80065f2:	9207      	str	r2, [sp, #28]
 80065f4:	e014      	b.n	8006620 <_svfiprintf_r+0x114>
 80065f6:	eba0 0308 	sub.w	r3, r0, r8
 80065fa:	fa09 f303 	lsl.w	r3, r9, r3
 80065fe:	4313      	orrs	r3, r2
 8006600:	46a2      	mov	sl, r4
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	e7d2      	b.n	80065ac <_svfiprintf_r+0xa0>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	1d19      	adds	r1, r3, #4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	9103      	str	r1, [sp, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	bfbb      	ittet	lt
 8006612:	425b      	neglt	r3, r3
 8006614:	f042 0202 	orrlt.w	r2, r2, #2
 8006618:	9307      	strge	r3, [sp, #28]
 800661a:	9307      	strlt	r3, [sp, #28]
 800661c:	bfb8      	it	lt
 800661e:	9204      	strlt	r2, [sp, #16]
 8006620:	7823      	ldrb	r3, [r4, #0]
 8006622:	2b2e      	cmp	r3, #46	@ 0x2e
 8006624:	d10a      	bne.n	800663c <_svfiprintf_r+0x130>
 8006626:	7863      	ldrb	r3, [r4, #1]
 8006628:	2b2a      	cmp	r3, #42	@ 0x2a
 800662a:	d132      	bne.n	8006692 <_svfiprintf_r+0x186>
 800662c:	9b03      	ldr	r3, [sp, #12]
 800662e:	3402      	adds	r4, #2
 8006630:	1d1a      	adds	r2, r3, #4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	9203      	str	r2, [sp, #12]
 8006636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800663a:	9305      	str	r3, [sp, #20]
 800663c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80066f4 <_svfiprintf_r+0x1e8>
 8006640:	2203      	movs	r2, #3
 8006642:	4650      	mov	r0, sl
 8006644:	7821      	ldrb	r1, [r4, #0]
 8006646:	f000 f9fd 	bl	8006a44 <memchr>
 800664a:	b138      	cbz	r0, 800665c <_svfiprintf_r+0x150>
 800664c:	2240      	movs	r2, #64	@ 0x40
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	eba0 000a 	sub.w	r0, r0, sl
 8006654:	4082      	lsls	r2, r0
 8006656:	4313      	orrs	r3, r2
 8006658:	3401      	adds	r4, #1
 800665a:	9304      	str	r3, [sp, #16]
 800665c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006660:	2206      	movs	r2, #6
 8006662:	4825      	ldr	r0, [pc, #148]	@ (80066f8 <_svfiprintf_r+0x1ec>)
 8006664:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006668:	f000 f9ec 	bl	8006a44 <memchr>
 800666c:	2800      	cmp	r0, #0
 800666e:	d036      	beq.n	80066de <_svfiprintf_r+0x1d2>
 8006670:	4b22      	ldr	r3, [pc, #136]	@ (80066fc <_svfiprintf_r+0x1f0>)
 8006672:	bb1b      	cbnz	r3, 80066bc <_svfiprintf_r+0x1b0>
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	3307      	adds	r3, #7
 8006678:	f023 0307 	bic.w	r3, r3, #7
 800667c:	3308      	adds	r3, #8
 800667e:	9303      	str	r3, [sp, #12]
 8006680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006682:	4433      	add	r3, r6
 8006684:	9309      	str	r3, [sp, #36]	@ 0x24
 8006686:	e76a      	b.n	800655e <_svfiprintf_r+0x52>
 8006688:	460c      	mov	r4, r1
 800668a:	2001      	movs	r0, #1
 800668c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006690:	e7a8      	b.n	80065e4 <_svfiprintf_r+0xd8>
 8006692:	2300      	movs	r3, #0
 8006694:	f04f 0c0a 	mov.w	ip, #10
 8006698:	4619      	mov	r1, r3
 800669a:	3401      	adds	r4, #1
 800669c:	9305      	str	r3, [sp, #20]
 800669e:	4620      	mov	r0, r4
 80066a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066a4:	3a30      	subs	r2, #48	@ 0x30
 80066a6:	2a09      	cmp	r2, #9
 80066a8:	d903      	bls.n	80066b2 <_svfiprintf_r+0x1a6>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0c6      	beq.n	800663c <_svfiprintf_r+0x130>
 80066ae:	9105      	str	r1, [sp, #20]
 80066b0:	e7c4      	b.n	800663c <_svfiprintf_r+0x130>
 80066b2:	4604      	mov	r4, r0
 80066b4:	2301      	movs	r3, #1
 80066b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ba:	e7f0      	b.n	800669e <_svfiprintf_r+0x192>
 80066bc:	ab03      	add	r3, sp, #12
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	462a      	mov	r2, r5
 80066c2:	4638      	mov	r0, r7
 80066c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006700 <_svfiprintf_r+0x1f4>)
 80066c6:	a904      	add	r1, sp, #16
 80066c8:	f3af 8000 	nop.w
 80066cc:	1c42      	adds	r2, r0, #1
 80066ce:	4606      	mov	r6, r0
 80066d0:	d1d6      	bne.n	8006680 <_svfiprintf_r+0x174>
 80066d2:	89ab      	ldrh	r3, [r5, #12]
 80066d4:	065b      	lsls	r3, r3, #25
 80066d6:	f53f af2d 	bmi.w	8006534 <_svfiprintf_r+0x28>
 80066da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066dc:	e72c      	b.n	8006538 <_svfiprintf_r+0x2c>
 80066de:	ab03      	add	r3, sp, #12
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	462a      	mov	r2, r5
 80066e4:	4638      	mov	r0, r7
 80066e6:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <_svfiprintf_r+0x1f4>)
 80066e8:	a904      	add	r1, sp, #16
 80066ea:	f000 f87d 	bl	80067e8 <_printf_i>
 80066ee:	e7ed      	b.n	80066cc <_svfiprintf_r+0x1c0>
 80066f0:	08006c06 	.word	0x08006c06
 80066f4:	08006c0c 	.word	0x08006c0c
 80066f8:	08006c10 	.word	0x08006c10
 80066fc:	00000000 	.word	0x00000000
 8006700:	08006455 	.word	0x08006455

08006704 <_printf_common>:
 8006704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006708:	4616      	mov	r6, r2
 800670a:	4698      	mov	r8, r3
 800670c:	688a      	ldr	r2, [r1, #8]
 800670e:	690b      	ldr	r3, [r1, #16]
 8006710:	4607      	mov	r7, r0
 8006712:	4293      	cmp	r3, r2
 8006714:	bfb8      	it	lt
 8006716:	4613      	movlt	r3, r2
 8006718:	6033      	str	r3, [r6, #0]
 800671a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800671e:	460c      	mov	r4, r1
 8006720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006724:	b10a      	cbz	r2, 800672a <_printf_common+0x26>
 8006726:	3301      	adds	r3, #1
 8006728:	6033      	str	r3, [r6, #0]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	0699      	lsls	r1, r3, #26
 800672e:	bf42      	ittt	mi
 8006730:	6833      	ldrmi	r3, [r6, #0]
 8006732:	3302      	addmi	r3, #2
 8006734:	6033      	strmi	r3, [r6, #0]
 8006736:	6825      	ldr	r5, [r4, #0]
 8006738:	f015 0506 	ands.w	r5, r5, #6
 800673c:	d106      	bne.n	800674c <_printf_common+0x48>
 800673e:	f104 0a19 	add.w	sl, r4, #25
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	6832      	ldr	r2, [r6, #0]
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	42ab      	cmp	r3, r5
 800674a:	dc2b      	bgt.n	80067a4 <_printf_common+0xa0>
 800674c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006750:	6822      	ldr	r2, [r4, #0]
 8006752:	3b00      	subs	r3, #0
 8006754:	bf18      	it	ne
 8006756:	2301      	movne	r3, #1
 8006758:	0692      	lsls	r2, r2, #26
 800675a:	d430      	bmi.n	80067be <_printf_common+0xba>
 800675c:	4641      	mov	r1, r8
 800675e:	4638      	mov	r0, r7
 8006760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006764:	47c8      	blx	r9
 8006766:	3001      	adds	r0, #1
 8006768:	d023      	beq.n	80067b2 <_printf_common+0xae>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	6922      	ldr	r2, [r4, #16]
 800676e:	f003 0306 	and.w	r3, r3, #6
 8006772:	2b04      	cmp	r3, #4
 8006774:	bf14      	ite	ne
 8006776:	2500      	movne	r5, #0
 8006778:	6833      	ldreq	r3, [r6, #0]
 800677a:	f04f 0600 	mov.w	r6, #0
 800677e:	bf08      	it	eq
 8006780:	68e5      	ldreq	r5, [r4, #12]
 8006782:	f104 041a 	add.w	r4, r4, #26
 8006786:	bf08      	it	eq
 8006788:	1aed      	subeq	r5, r5, r3
 800678a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800678e:	bf08      	it	eq
 8006790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006794:	4293      	cmp	r3, r2
 8006796:	bfc4      	itt	gt
 8006798:	1a9b      	subgt	r3, r3, r2
 800679a:	18ed      	addgt	r5, r5, r3
 800679c:	42b5      	cmp	r5, r6
 800679e:	d11a      	bne.n	80067d6 <_printf_common+0xd2>
 80067a0:	2000      	movs	r0, #0
 80067a2:	e008      	b.n	80067b6 <_printf_common+0xb2>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4652      	mov	r2, sl
 80067a8:	4641      	mov	r1, r8
 80067aa:	4638      	mov	r0, r7
 80067ac:	47c8      	blx	r9
 80067ae:	3001      	adds	r0, #1
 80067b0:	d103      	bne.n	80067ba <_printf_common+0xb6>
 80067b2:	f04f 30ff 	mov.w	r0, #4294967295
 80067b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ba:	3501      	adds	r5, #1
 80067bc:	e7c1      	b.n	8006742 <_printf_common+0x3e>
 80067be:	2030      	movs	r0, #48	@ 0x30
 80067c0:	18e1      	adds	r1, r4, r3
 80067c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067cc:	4422      	add	r2, r4
 80067ce:	3302      	adds	r3, #2
 80067d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067d4:	e7c2      	b.n	800675c <_printf_common+0x58>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4622      	mov	r2, r4
 80067da:	4641      	mov	r1, r8
 80067dc:	4638      	mov	r0, r7
 80067de:	47c8      	blx	r9
 80067e0:	3001      	adds	r0, #1
 80067e2:	d0e6      	beq.n	80067b2 <_printf_common+0xae>
 80067e4:	3601      	adds	r6, #1
 80067e6:	e7d9      	b.n	800679c <_printf_common+0x98>

080067e8 <_printf_i>:
 80067e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067ec:	7e0f      	ldrb	r7, [r1, #24]
 80067ee:	4691      	mov	r9, r2
 80067f0:	2f78      	cmp	r7, #120	@ 0x78
 80067f2:	4680      	mov	r8, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	469a      	mov	sl, r3
 80067f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067fe:	d807      	bhi.n	8006810 <_printf_i+0x28>
 8006800:	2f62      	cmp	r7, #98	@ 0x62
 8006802:	d80a      	bhi.n	800681a <_printf_i+0x32>
 8006804:	2f00      	cmp	r7, #0
 8006806:	f000 80d1 	beq.w	80069ac <_printf_i+0x1c4>
 800680a:	2f58      	cmp	r7, #88	@ 0x58
 800680c:	f000 80b8 	beq.w	8006980 <_printf_i+0x198>
 8006810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006818:	e03a      	b.n	8006890 <_printf_i+0xa8>
 800681a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800681e:	2b15      	cmp	r3, #21
 8006820:	d8f6      	bhi.n	8006810 <_printf_i+0x28>
 8006822:	a101      	add	r1, pc, #4	@ (adr r1, 8006828 <_printf_i+0x40>)
 8006824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006828:	08006881 	.word	0x08006881
 800682c:	08006895 	.word	0x08006895
 8006830:	08006811 	.word	0x08006811
 8006834:	08006811 	.word	0x08006811
 8006838:	08006811 	.word	0x08006811
 800683c:	08006811 	.word	0x08006811
 8006840:	08006895 	.word	0x08006895
 8006844:	08006811 	.word	0x08006811
 8006848:	08006811 	.word	0x08006811
 800684c:	08006811 	.word	0x08006811
 8006850:	08006811 	.word	0x08006811
 8006854:	08006993 	.word	0x08006993
 8006858:	080068bf 	.word	0x080068bf
 800685c:	0800694d 	.word	0x0800694d
 8006860:	08006811 	.word	0x08006811
 8006864:	08006811 	.word	0x08006811
 8006868:	080069b5 	.word	0x080069b5
 800686c:	08006811 	.word	0x08006811
 8006870:	080068bf 	.word	0x080068bf
 8006874:	08006811 	.word	0x08006811
 8006878:	08006811 	.word	0x08006811
 800687c:	08006955 	.word	0x08006955
 8006880:	6833      	ldr	r3, [r6, #0]
 8006882:	1d1a      	adds	r2, r3, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6032      	str	r2, [r6, #0]
 8006888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800688c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006890:	2301      	movs	r3, #1
 8006892:	e09c      	b.n	80069ce <_printf_i+0x1e6>
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	6820      	ldr	r0, [r4, #0]
 8006898:	1d19      	adds	r1, r3, #4
 800689a:	6031      	str	r1, [r6, #0]
 800689c:	0606      	lsls	r6, r0, #24
 800689e:	d501      	bpl.n	80068a4 <_printf_i+0xbc>
 80068a0:	681d      	ldr	r5, [r3, #0]
 80068a2:	e003      	b.n	80068ac <_printf_i+0xc4>
 80068a4:	0645      	lsls	r5, r0, #25
 80068a6:	d5fb      	bpl.n	80068a0 <_printf_i+0xb8>
 80068a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068ac:	2d00      	cmp	r5, #0
 80068ae:	da03      	bge.n	80068b8 <_printf_i+0xd0>
 80068b0:	232d      	movs	r3, #45	@ 0x2d
 80068b2:	426d      	negs	r5, r5
 80068b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068b8:	230a      	movs	r3, #10
 80068ba:	4858      	ldr	r0, [pc, #352]	@ (8006a1c <_printf_i+0x234>)
 80068bc:	e011      	b.n	80068e2 <_printf_i+0xfa>
 80068be:	6821      	ldr	r1, [r4, #0]
 80068c0:	6833      	ldr	r3, [r6, #0]
 80068c2:	0608      	lsls	r0, r1, #24
 80068c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80068c8:	d402      	bmi.n	80068d0 <_printf_i+0xe8>
 80068ca:	0649      	lsls	r1, r1, #25
 80068cc:	bf48      	it	mi
 80068ce:	b2ad      	uxthmi	r5, r5
 80068d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	bf14      	ite	ne
 80068d6:	230a      	movne	r3, #10
 80068d8:	2308      	moveq	r3, #8
 80068da:	4850      	ldr	r0, [pc, #320]	@ (8006a1c <_printf_i+0x234>)
 80068dc:	2100      	movs	r1, #0
 80068de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068e2:	6866      	ldr	r6, [r4, #4]
 80068e4:	2e00      	cmp	r6, #0
 80068e6:	60a6      	str	r6, [r4, #8]
 80068e8:	db05      	blt.n	80068f6 <_printf_i+0x10e>
 80068ea:	6821      	ldr	r1, [r4, #0]
 80068ec:	432e      	orrs	r6, r5
 80068ee:	f021 0104 	bic.w	r1, r1, #4
 80068f2:	6021      	str	r1, [r4, #0]
 80068f4:	d04b      	beq.n	800698e <_printf_i+0x1a6>
 80068f6:	4616      	mov	r6, r2
 80068f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80068fc:	fb03 5711 	mls	r7, r3, r1, r5
 8006900:	5dc7      	ldrb	r7, [r0, r7]
 8006902:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006906:	462f      	mov	r7, r5
 8006908:	42bb      	cmp	r3, r7
 800690a:	460d      	mov	r5, r1
 800690c:	d9f4      	bls.n	80068f8 <_printf_i+0x110>
 800690e:	2b08      	cmp	r3, #8
 8006910:	d10b      	bne.n	800692a <_printf_i+0x142>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	07df      	lsls	r7, r3, #31
 8006916:	d508      	bpl.n	800692a <_printf_i+0x142>
 8006918:	6923      	ldr	r3, [r4, #16]
 800691a:	6861      	ldr	r1, [r4, #4]
 800691c:	4299      	cmp	r1, r3
 800691e:	bfde      	ittt	le
 8006920:	2330      	movle	r3, #48	@ 0x30
 8006922:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006926:	f106 36ff 	addle.w	r6, r6, #4294967295
 800692a:	1b92      	subs	r2, r2, r6
 800692c:	6122      	str	r2, [r4, #16]
 800692e:	464b      	mov	r3, r9
 8006930:	4621      	mov	r1, r4
 8006932:	4640      	mov	r0, r8
 8006934:	f8cd a000 	str.w	sl, [sp]
 8006938:	aa03      	add	r2, sp, #12
 800693a:	f7ff fee3 	bl	8006704 <_printf_common>
 800693e:	3001      	adds	r0, #1
 8006940:	d14a      	bne.n	80069d8 <_printf_i+0x1f0>
 8006942:	f04f 30ff 	mov.w	r0, #4294967295
 8006946:	b004      	add	sp, #16
 8006948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	f043 0320 	orr.w	r3, r3, #32
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	2778      	movs	r7, #120	@ 0x78
 8006956:	4832      	ldr	r0, [pc, #200]	@ (8006a20 <_printf_i+0x238>)
 8006958:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	6831      	ldr	r1, [r6, #0]
 8006960:	061f      	lsls	r7, r3, #24
 8006962:	f851 5b04 	ldr.w	r5, [r1], #4
 8006966:	d402      	bmi.n	800696e <_printf_i+0x186>
 8006968:	065f      	lsls	r7, r3, #25
 800696a:	bf48      	it	mi
 800696c:	b2ad      	uxthmi	r5, r5
 800696e:	6031      	str	r1, [r6, #0]
 8006970:	07d9      	lsls	r1, r3, #31
 8006972:	bf44      	itt	mi
 8006974:	f043 0320 	orrmi.w	r3, r3, #32
 8006978:	6023      	strmi	r3, [r4, #0]
 800697a:	b11d      	cbz	r5, 8006984 <_printf_i+0x19c>
 800697c:	2310      	movs	r3, #16
 800697e:	e7ad      	b.n	80068dc <_printf_i+0xf4>
 8006980:	4826      	ldr	r0, [pc, #152]	@ (8006a1c <_printf_i+0x234>)
 8006982:	e7e9      	b.n	8006958 <_printf_i+0x170>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	f023 0320 	bic.w	r3, r3, #32
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	e7f6      	b.n	800697c <_printf_i+0x194>
 800698e:	4616      	mov	r6, r2
 8006990:	e7bd      	b.n	800690e <_printf_i+0x126>
 8006992:	6833      	ldr	r3, [r6, #0]
 8006994:	6825      	ldr	r5, [r4, #0]
 8006996:	1d18      	adds	r0, r3, #4
 8006998:	6961      	ldr	r1, [r4, #20]
 800699a:	6030      	str	r0, [r6, #0]
 800699c:	062e      	lsls	r6, r5, #24
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	d501      	bpl.n	80069a6 <_printf_i+0x1be>
 80069a2:	6019      	str	r1, [r3, #0]
 80069a4:	e002      	b.n	80069ac <_printf_i+0x1c4>
 80069a6:	0668      	lsls	r0, r5, #25
 80069a8:	d5fb      	bpl.n	80069a2 <_printf_i+0x1ba>
 80069aa:	8019      	strh	r1, [r3, #0]
 80069ac:	2300      	movs	r3, #0
 80069ae:	4616      	mov	r6, r2
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	e7bc      	b.n	800692e <_printf_i+0x146>
 80069b4:	6833      	ldr	r3, [r6, #0]
 80069b6:	2100      	movs	r1, #0
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	6032      	str	r2, [r6, #0]
 80069bc:	681e      	ldr	r6, [r3, #0]
 80069be:	6862      	ldr	r2, [r4, #4]
 80069c0:	4630      	mov	r0, r6
 80069c2:	f000 f83f 	bl	8006a44 <memchr>
 80069c6:	b108      	cbz	r0, 80069cc <_printf_i+0x1e4>
 80069c8:	1b80      	subs	r0, r0, r6
 80069ca:	6060      	str	r0, [r4, #4]
 80069cc:	6863      	ldr	r3, [r4, #4]
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	2300      	movs	r3, #0
 80069d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069d6:	e7aa      	b.n	800692e <_printf_i+0x146>
 80069d8:	4632      	mov	r2, r6
 80069da:	4649      	mov	r1, r9
 80069dc:	4640      	mov	r0, r8
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	47d0      	blx	sl
 80069e2:	3001      	adds	r0, #1
 80069e4:	d0ad      	beq.n	8006942 <_printf_i+0x15a>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	079b      	lsls	r3, r3, #30
 80069ea:	d413      	bmi.n	8006a14 <_printf_i+0x22c>
 80069ec:	68e0      	ldr	r0, [r4, #12]
 80069ee:	9b03      	ldr	r3, [sp, #12]
 80069f0:	4298      	cmp	r0, r3
 80069f2:	bfb8      	it	lt
 80069f4:	4618      	movlt	r0, r3
 80069f6:	e7a6      	b.n	8006946 <_printf_i+0x15e>
 80069f8:	2301      	movs	r3, #1
 80069fa:	4632      	mov	r2, r6
 80069fc:	4649      	mov	r1, r9
 80069fe:	4640      	mov	r0, r8
 8006a00:	47d0      	blx	sl
 8006a02:	3001      	adds	r0, #1
 8006a04:	d09d      	beq.n	8006942 <_printf_i+0x15a>
 8006a06:	3501      	adds	r5, #1
 8006a08:	68e3      	ldr	r3, [r4, #12]
 8006a0a:	9903      	ldr	r1, [sp, #12]
 8006a0c:	1a5b      	subs	r3, r3, r1
 8006a0e:	42ab      	cmp	r3, r5
 8006a10:	dcf2      	bgt.n	80069f8 <_printf_i+0x210>
 8006a12:	e7eb      	b.n	80069ec <_printf_i+0x204>
 8006a14:	2500      	movs	r5, #0
 8006a16:	f104 0619 	add.w	r6, r4, #25
 8006a1a:	e7f5      	b.n	8006a08 <_printf_i+0x220>
 8006a1c:	08006c17 	.word	0x08006c17
 8006a20:	08006c28 	.word	0x08006c28

08006a24 <_sbrk_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	2300      	movs	r3, #0
 8006a28:	4d05      	ldr	r5, [pc, #20]	@ (8006a40 <_sbrk_r+0x1c>)
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	f7fb fcac 	bl	800238c <_sbrk>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_sbrk_r+0x1a>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_sbrk_r+0x1a>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	20000438 	.word	0x20000438

08006a44 <memchr>:
 8006a44:	4603      	mov	r3, r0
 8006a46:	b510      	push	{r4, lr}
 8006a48:	b2c9      	uxtb	r1, r1
 8006a4a:	4402      	add	r2, r0
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	d101      	bne.n	8006a56 <memchr+0x12>
 8006a52:	2000      	movs	r0, #0
 8006a54:	e003      	b.n	8006a5e <memchr+0x1a>
 8006a56:	7804      	ldrb	r4, [r0, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	428c      	cmp	r4, r1
 8006a5c:	d1f6      	bne.n	8006a4c <memchr+0x8>
 8006a5e:	bd10      	pop	{r4, pc}

08006a60 <memcpy>:
 8006a60:	440a      	add	r2, r1
 8006a62:	4291      	cmp	r1, r2
 8006a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a68:	d100      	bne.n	8006a6c <memcpy+0xc>
 8006a6a:	4770      	bx	lr
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a72:	4291      	cmp	r1, r2
 8006a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a78:	d1f9      	bne.n	8006a6e <memcpy+0xe>
 8006a7a:	bd10      	pop	{r4, pc}

08006a7c <_realloc_r>:
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	4607      	mov	r7, r0
 8006a82:	4614      	mov	r4, r2
 8006a84:	460d      	mov	r5, r1
 8006a86:	b921      	cbnz	r1, 8006a92 <_realloc_r+0x16>
 8006a88:	4611      	mov	r1, r2
 8006a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8e:	f7ff bc55 	b.w	800633c <_malloc_r>
 8006a92:	b92a      	cbnz	r2, 8006aa0 <_realloc_r+0x24>
 8006a94:	f7ff fbe8 	bl	8006268 <_free_r>
 8006a98:	4625      	mov	r5, r4
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa0:	f000 f81a 	bl	8006ad8 <_malloc_usable_size_r>
 8006aa4:	4284      	cmp	r4, r0
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	d802      	bhi.n	8006ab0 <_realloc_r+0x34>
 8006aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006aae:	d8f4      	bhi.n	8006a9a <_realloc_r+0x1e>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	f7ff fc42 	bl	800633c <_malloc_r>
 8006ab8:	4680      	mov	r8, r0
 8006aba:	b908      	cbnz	r0, 8006ac0 <_realloc_r+0x44>
 8006abc:	4645      	mov	r5, r8
 8006abe:	e7ec      	b.n	8006a9a <_realloc_r+0x1e>
 8006ac0:	42b4      	cmp	r4, r6
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	bf28      	it	cs
 8006ac8:	4632      	movcs	r2, r6
 8006aca:	f7ff ffc9 	bl	8006a60 <memcpy>
 8006ace:	4629      	mov	r1, r5
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f7ff fbc9 	bl	8006268 <_free_r>
 8006ad6:	e7f1      	b.n	8006abc <_realloc_r+0x40>

08006ad8 <_malloc_usable_size_r>:
 8006ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006adc:	1f18      	subs	r0, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfbc      	itt	lt
 8006ae2:	580b      	ldrlt	r3, [r1, r0]
 8006ae4:	18c0      	addlt	r0, r0, r3
 8006ae6:	4770      	bx	lr

08006ae8 <_init>:
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	bf00      	nop
 8006aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aee:	bc08      	pop	{r3}
 8006af0:	469e      	mov	lr, r3
 8006af2:	4770      	bx	lr

08006af4 <_fini>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	bf00      	nop
 8006af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afa:	bc08      	pop	{r3}
 8006afc:	469e      	mov	lr, r3
 8006afe:	4770      	bx	lr
