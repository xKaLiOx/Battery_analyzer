
Battery_analyzer_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006b04  08006b04  00007b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c40  08006c40  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c40  08006c40  00007c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c48  08006c48  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c4c  08006c4c  00007c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006c50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000068  08006cb8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  20000448  08006cb8  00008448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c46d  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002742  00000000  00000000  000144fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00016c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c0  00000000  00000000  00017900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c90  00000000  00000000  000182c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010411  00000000  00000000  00030f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de43  00000000  00000000  00041361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf1a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  000cf1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d2bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006aec 	.word	0x08006aec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006aec 	.word	0x08006aec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	@ 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	@ 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	@ 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__aeabi_f2uiz>:
 8000e98:	0042      	lsls	r2, r0, #1
 8000e9a:	d20e      	bcs.n	8000eba <__aeabi_f2uiz+0x22>
 8000e9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ea0:	d30b      	bcc.n	8000eba <__aeabi_f2uiz+0x22>
 8000ea2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ea6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eaa:	d409      	bmi.n	8000ec0 <__aeabi_f2uiz+0x28>
 8000eac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000eb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb8:	4770      	bx	lr
 8000eba:	f04f 0000 	mov.w	r0, #0
 8000ebe:	4770      	bx	lr
 8000ec0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ec4:	d101      	bne.n	8000eca <__aeabi_f2uiz+0x32>
 8000ec6:	0242      	lsls	r2, r0, #9
 8000ec8:	d102      	bne.n	8000ed0 <__aeabi_f2uiz+0x38>
 8000eca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ece:	4770      	bx	lr
 8000ed0:	f04f 0000 	mov.w	r0, #0
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000efc:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000efe:	4a2f      	ldr	r2, [pc, #188]	@ (8000fbc <MX_ADC1_Init+0xe4>)
 8000f00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f10:	4b29      	ldr	r3, [pc, #164]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2a:	4823      	ldr	r0, [pc, #140]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f2c:	f001 fca4 	bl	8002878 <HAL_ADC_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8000f36:	f001 f98b 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000f42:	2303      	movs	r3, #3
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481a      	ldr	r0, [pc, #104]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f4e:	f001 ff67 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8000f58:	f001 f97a 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4813      	ldr	r0, [pc, #76]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f6c:	f001 ff58 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8000f76:	f001 f96b 	bl	8002250 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 8000f7a:	2311      	movs	r3, #17
 8000f7c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000f86:	2306      	movs	r3, #6
 8000f88:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f8a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000f8e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_ADC1_Init+0xe0>)
 8000fa2:	f002 fb9b 	bl	80036dc <HAL_ADCEx_InjectedConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000fac:	f001 f950 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	@ 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000084 	.word	0x20000084
 8000fbc:	40012400 	.word	0x40012400

08000fc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2c      	ldr	r2, [pc, #176]	@ (800108c <HAL_ADC_MspInit+0xcc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d151      	bne.n	8001084 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a24      	ldr	r2, [pc, #144]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <HAL_ADC_MspInit+0xd0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001010:	2303      	movs	r3, #3
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001014:	2303      	movs	r3, #3
 8001016:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	481d      	ldr	r0, [pc, #116]	@ (8001094 <HAL_ADC_MspInit+0xd4>)
 8001020:	f003 f82e 	bl	8004080 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001026:	4a1d      	ldr	r2, [pc, #116]	@ (800109c <HAL_ADC_MspInit+0xdc>)
 8001028:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103c:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800103e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001042:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800104a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800104e:	2220      	movs	r2, #32
 8001050:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001058:	480f      	ldr	r0, [pc, #60]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800105a:	f002 fde7 	bl	8003c2c <HAL_DMA_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001064:	f001 f8f4 	bl	8002250 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 800106c:	621a      	str	r2, [r3, #32]
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <HAL_ADC_MspInit+0xd8>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	2012      	movs	r0, #18
 800107a:	f002 fda0 	bl	8003bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800107e:	2012      	movs	r0, #18
 8001080:	f002 fdb9 	bl	8003bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40012400 	.word	0x40012400
 8001090:	40021000 	.word	0x40021000
 8001094:	40010800 	.word	0x40010800
 8001098:	200000b4 	.word	0x200000b4
 800109c:	40020008 	.word	0x40020008

080010a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_DMA_Init+0x38>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <MX_DMA_Init+0x38>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_DMA_Init+0x38>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200b      	movs	r0, #11
 80010c4:	f002 fd7b 	bl	8003bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010c8:	200b      	movs	r0, #11
 80010ca:	f002 fd94 	bl	8003bf6 <HAL_NVIC_EnableIRQ>

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f0:	4b4e      	ldr	r3, [pc, #312]	@ (800122c <MX_GPIO_Init+0x150>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	@ (800122c <MX_GPIO_Init+0x150>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <MX_GPIO_Init+0x150>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001108:	4b48      	ldr	r3, [pc, #288]	@ (800122c <MX_GPIO_Init+0x150>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a47      	ldr	r2, [pc, #284]	@ (800122c <MX_GPIO_Init+0x150>)
 800110e:	f043 0320 	orr.w	r3, r3, #32
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b45      	ldr	r3, [pc, #276]	@ (800122c <MX_GPIO_Init+0x150>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b42      	ldr	r3, [pc, #264]	@ (800122c <MX_GPIO_Init+0x150>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a41      	ldr	r2, [pc, #260]	@ (800122c <MX_GPIO_Init+0x150>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <MX_GPIO_Init+0x150>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b3c      	ldr	r3, [pc, #240]	@ (800122c <MX_GPIO_Init+0x150>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a3b      	ldr	r2, [pc, #236]	@ (800122c <MX_GPIO_Init+0x150>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b39      	ldr	r3, [pc, #228]	@ (800122c <MX_GPIO_Init+0x150>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED_Pin|CHARGING_STATE_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001156:	4836      	ldr	r0, [pc, #216]	@ (8001230 <MX_GPIO_Init+0x154>)
 8001158:	f003 f92d 	bl	80043b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISCHARGE_STOP_Pin|RS_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f640 6104 	movw	r1, #3588	@ 0xe04
 8001162:	4834      	ldr	r0, [pc, #208]	@ (8001234 <MX_GPIO_Init+0x158>)
 8001164:	f003 f927 	bl	80043b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800116e:	4832      	ldr	r0, [pc, #200]	@ (8001238 <MX_GPIO_Init+0x15c>)
 8001170:	f003 f921 	bl	80043b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_LED_Pin CHARGING_STATE_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|CHARGING_STATE_Pin;
 8001174:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2302      	movs	r3, #2
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4619      	mov	r1, r3
 800118c:	4828      	ldr	r0, [pc, #160]	@ (8001230 <MX_GPIO_Init+0x154>)
 800118e:	f002 ff77 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISCHARGE_STOP_Pin */
  GPIO_InitStruct.Pin = DISCHARGE_STOP_Pin;
 8001192:	2304      	movs	r3, #4
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2302      	movs	r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCHARGE_STOP_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	4822      	ldr	r0, [pc, #136]	@ (8001234 <MX_GPIO_Init+0x158>)
 80011aa:	f002 ff69 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_mode_Pin Button_sub_Pin Button_add_Pin */
  GPIO_InitStruct.Pin = Button_mode_Pin|Button_sub_Pin|Button_add_Pin;
 80011ae:	f640 4302 	movw	r3, #3074	@ 0xc02
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b4:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_GPIO_Init+0x160>)
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	481d      	ldr	r0, [pc, #116]	@ (8001238 <MX_GPIO_Init+0x15c>)
 80011c4:	f002 ff5c 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 80011c8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	4814      	ldr	r0, [pc, #80]	@ (8001234 <MX_GPIO_Init+0x158>)
 80011e2:	f002 ff4d 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80011e6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	480e      	ldr	r0, [pc, #56]	@ (8001238 <MX_GPIO_Init+0x15c>)
 8001200:	f002 ff3e 	bl	8004080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2007      	movs	r0, #7
 800120a:	f002 fcd8 	bl	8003bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800120e:	2007      	movs	r0, #7
 8001210:	f002 fcf1 	bl	8003bf6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2028      	movs	r0, #40	@ 0x28
 800121a:	f002 fcd0 	bl	8003bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800121e:	2028      	movs	r0, #40	@ 0x28
 8001220:	f002 fce9 	bl	8003bf6 <HAL_NVIC_EnableIRQ>

}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	40011000 	.word	0x40011000
 8001234:	40010800 	.word	0x40010800
 8001238:	40010c00 	.word	0x40010c00
 800123c:	10110000 	.word	0x10110000

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f001 fa91 	bl	800276c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124a:	f000 fb23 	bl	8001894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124e:	f7ff ff45 	bl	80010dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001252:	f7ff ff25 	bl	80010a0 <MX_DMA_Init>
  MX_TIM4_Init();
 8001256:	f001 f999 	bl	800258c <MX_TIM4_Init>
  MX_TIM3_Init();
 800125a:	f001 f949 	bl	80024f0 <MX_TIM3_Init>
  MX_ADC1_Init();
 800125e:	f7ff fe3b 	bl	8000ed8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001262:	f001 f8d1 	bl	8002408 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_SET);// OP AMP inv input to turn off discharge
 8001266:	2201      	movs	r2, #1
 8001268:	2104      	movs	r1, #4
 800126a:	48b1      	ldr	r0, [pc, #708]	@ (8001530 <main+0x2f0>)
 800126c:	f003 f8a3 	bl	80043b6 <HAL_GPIO_WritePin>


	if(HAL_ADCEx_Calibration_Start(&hadc1) !=HAL_OK)
 8001270:	48b0      	ldr	r0, [pc, #704]	@ (8001534 <main+0x2f4>)
 8001272:	f001 ffcf 	bl	8003214 <HAL_ADCEx_Calibration_Start>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <main+0x4c>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001282:	48ad      	ldr	r0, [pc, #692]	@ (8001538 <main+0x2f8>)
 8001284:	f003 f897 	bl	80043b6 <HAL_GPIO_WritePin>
		Error_Handler();
 8001288:	f000 ffe2 	bl	8002250 <Error_Handler>
	}
	if(HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK)//TIM2 for DELAY_US
 800128c:	48ab      	ldr	r0, [pc, #684]	@ (800153c <main+0x2fc>)
 800128e:	f003 fe93 	bl	8004fb8 <HAL_TIM_Base_Start_IT>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <main+0x68>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	48a6      	ldr	r0, [pc, #664]	@ (8001538 <main+0x2f8>)
 80012a0:	f003 f889 	bl	80043b6 <HAL_GPIO_WritePin>
		Error_Handler();
 80012a4:	f000 ffd4 	bl	8002250 <Error_Handler>
	}

	HAL_Delay(500);// wait for DC point
 80012a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ac:	f001 fac0 	bl	8002830 <HAL_Delay>

	//Read internal reference for VDDA
	HAL_ADCEx_InjectedStart(&hadc1);
 80012b0:	48a0      	ldr	r0, [pc, #640]	@ (8001534 <main+0x2f4>)
 80012b2:	f002 f85d 	bl	8003370 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedPollForConversion(&hadc1, 500);
 80012b6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80012ba:	489e      	ldr	r0, [pc, #632]	@ (8001534 <main+0x2f4>)
 80012bc:	f002 f8de 	bl	800347c <HAL_ADCEx_InjectedPollForConversion>
	uint16_t Vadc = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80012c0:	2101      	movs	r1, #1
 80012c2:	489c      	ldr	r0, [pc, #624]	@ (8001534 <main+0x2f4>)
 80012c4:	f002 f9d2 	bl	800366c <HAL_ADCEx_InjectedGetValue>
 80012c8:	4603      	mov	r3, r0
 80012ca:	81fb      	strh	r3, [r7, #14]
	Vdda = 1.0*ADC_steps/Vadc*Vrefint;
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f898 	bl	8000404 <__aeabi_i2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	4998      	ldr	r1, [pc, #608]	@ (8001540 <main+0x300>)
 80012de:	f7ff fa25 	bl	800072c <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80012ee:	4b95      	ldr	r3, [pc, #596]	@ (8001544 <main+0x304>)
 80012f0:	f7ff f8f2 	bl	80004d8 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fb1e 	bl	800093c <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	4a91      	ldr	r2, [pc, #580]	@ (8001548 <main+0x308>)
 8001304:	6013      	str	r3, [r2, #0]

	/*
	 * @brief Init in 4 bit LCD 16x2
	 */
	LCD_Init();
 8001306:	f004 feaf 	bl	8006068 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(updateScreenRequest)//only perform LCD switch states on gpio change
 800130a:	4b90      	ldr	r3, [pc, #576]	@ (800154c <main+0x30c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <main+0xd8>
		{
			updateScreen();
 8001314:	f000 fb3a 	bl	800198c <updateScreen>
		}

		switch(STATE_MCU_CURRENT)
 8001318:	4b8d      	ldr	r3, [pc, #564]	@ (8001550 <main+0x310>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	3b01      	subs	r3, #1
 8001320:	2b03      	cmp	r3, #3
 8001322:	f200 8178 	bhi.w	8001616 <main+0x3d6>
 8001326:	a201      	add	r2, pc, #4	@ (adr r2, 800132c <main+0xec>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	08001617 	.word	0x08001617
 8001330:	0800133d 	.word	0x0800133d
 8001334:	08001617 	.word	0x08001617
 8001338:	08001589 	.word	0x08001589
			break;
		}
		case  DISCHARGE:
		{
			//ONCE TO DO
			if(STATE_MCU_CURRENT != STATE_MCU_PREVIOUS)
 800133c:	4b84      	ldr	r3, [pc, #528]	@ (8001550 <main+0x310>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b84      	ldr	r3, [pc, #528]	@ (8001554 <main+0x314>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	429a      	cmp	r2, r3
 800134a:	d049      	beq.n	80013e0 <main+0x1a0>
			{
				DischargeDisplayData.capacity_mah = 0;
 800134c:	4b82      	ldr	r3, [pc, #520]	@ (8001558 <main+0x318>)
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	609a      	str	r2, [r3, #8]

				if(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK)//TIM3 for SAMPLING
 8001354:	4881      	ldr	r0, [pc, #516]	@ (800155c <main+0x31c>)
 8001356:	f003 fe2f 	bl	8004fb8 <HAL_TIM_Base_Start_IT>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <main+0x130>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001366:	4874      	ldr	r0, [pc, #464]	@ (8001538 <main+0x2f8>)
 8001368:	f003 f825 	bl	80043b6 <HAL_GPIO_WritePin>
					Error_Handler();
 800136c:	f000 ff70 	bl	8002250 <Error_Handler>
				}
				if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_DMA_SIZE)!=HAL_OK)//ADC SAMPLING DMA
 8001370:	2264      	movs	r2, #100	@ 0x64
 8001372:	497b      	ldr	r1, [pc, #492]	@ (8001560 <main+0x320>)
 8001374:	486f      	ldr	r0, [pc, #444]	@ (8001534 <main+0x2f4>)
 8001376:	f001 fb57 	bl	8002a28 <HAL_ADC_Start_DMA>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <main+0x150>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001386:	486c      	ldr	r0, [pc, #432]	@ (8001538 <main+0x2f8>)
 8001388:	f003 f815 	bl	80043b6 <HAL_GPIO_WritePin>
					Error_Handler();
 800138c:	f000 ff60 	bl	8002250 <Error_Handler>
				}
				if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4)!=HAL_OK)//TIM2 for MOSFET PWM
 8001390:	210c      	movs	r1, #12
 8001392:	4874      	ldr	r0, [pc, #464]	@ (8001564 <main+0x324>)
 8001394:	f003 fee8 	bl	8005168 <HAL_TIM_PWM_Start>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <main+0x16e>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a4:	4864      	ldr	r0, [pc, #400]	@ (8001538 <main+0x2f8>)
 80013a6:	f003 f806 	bl	80043b6 <HAL_GPIO_WritePin>
					Error_Handler();
 80013aa:	f000 ff51 	bl	8002250 <Error_Handler>
				}
				STATE_MCU_PREVIOUS = STATE_MCU_CURRENT;
 80013ae:	4b68      	ldr	r3, [pc, #416]	@ (8001550 <main+0x310>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b67      	ldr	r3, [pc, #412]	@ (8001554 <main+0x314>)
 80013b6:	701a      	strb	r2, [r3, #0]
				DischargeDisplayData.start_time = uwTick;
 80013b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001568 <main+0x328>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a66      	ldr	r2, [pc, #408]	@ (8001558 <main+0x318>)
 80013be:	60d3      	str	r3, [r2, #12]
				HAL_GPIO_WritePin(CHARGING_STATE_GPIO_Port, CHARGING_STATE_Pin,GPIO_PIN_RESET); // indication for charging
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013c6:	485c      	ldr	r0, [pc, #368]	@ (8001538 <main+0x2f8>)
 80013c8:	f002 fff5 	bl	80043b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2104      	movs	r1, #4
 80013d0:	4857      	ldr	r0, [pc, #348]	@ (8001530 <main+0x2f0>)
 80013d2:	f002 fff0 	bl	80043b6 <HAL_GPIO_WritePin>
				last_tick = uwTick;
 80013d6:	4b64      	ldr	r3, [pc, #400]	@ (8001568 <main+0x328>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a64      	ldr	r2, [pc, #400]	@ (800156c <main+0x32c>)
 80013dc:	6013      	str	r3, [r2, #0]
				break;
 80013de:	e11f      	b.n	8001620 <main+0x3e0>
			}



			//PERIODIC UPDATE
			if(uwTick - last_tick > 500)// 0.5s refresh rate
 80013e0:	4b61      	ldr	r3, [pc, #388]	@ (8001568 <main+0x328>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b61      	ldr	r3, [pc, #388]	@ (800156c <main+0x32c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013ee:	f240 8114 	bls.w	800161a <main+0x3da>
			{
				updateScreenRequest=1;
 80013f2:	4b56      	ldr	r3, [pc, #344]	@ (800154c <main+0x30c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
				uint32_t local_temp_volt;
				uint32_t local_temp_curr;
				uint16_t local_temp_count;

				__disable_irq();
				local_temp_volt = ADC_VOLTAGE_ACCUM;
 80013fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001570 <main+0x330>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60bb      	str	r3, [r7, #8]
				local_temp_curr = ADC_CURRENT_ACCUM;
 8001402:	4b5c      	ldr	r3, [pc, #368]	@ (8001574 <main+0x334>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	607b      	str	r3, [r7, #4]
				local_temp_count = ADC_READING_COUNTER;
 8001408:	4b5b      	ldr	r3, [pc, #364]	@ (8001578 <main+0x338>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	807b      	strh	r3, [r7, #2]

				ADC_READING_COUNTER=0;
 800140e:	4b5a      	ldr	r3, [pc, #360]	@ (8001578 <main+0x338>)
 8001410:	2200      	movs	r2, #0
 8001412:	801a      	strh	r2, [r3, #0]
				ADC_CURRENT_ACCUM=0;
 8001414:	4b57      	ldr	r3, [pc, #348]	@ (8001574 <main+0x334>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
				ADC_VOLTAGE_ACCUM=0;
 800141a:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <main+0x330>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001420:	b662      	cpsie	i
}
 8001422:	bf00      	nop
				__enable_irq();

				DischargeDisplayData.voltage = Vdda*local_temp_volt/local_temp_count/ADC_steps*R_divider_multiplier;//convert from ADC to Voltage NOT CORRECT
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff fb8f 	bl	8000b48 <__aeabi_ui2f>
 800142a:	4602      	mov	r2, r0
 800142c:	4b46      	ldr	r3, [pc, #280]	@ (8001548 <main+0x308>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f7ff fbe0 	bl	8000bf8 <__aeabi_fmul>
 8001438:	4603      	mov	r3, r0
 800143a:	461c      	mov	r4, r3
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fb86 	bl	8000b50 <__aeabi_i2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff fc89 	bl	8000d60 <__aeabi_fdiv>
 800144e:	4603      	mov	r3, r0
 8001450:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc83 	bl	8000d60 <__aeabi_fdiv>
 800145a:	4603      	mov	r3, r0
 800145c:	4947      	ldr	r1, [pc, #284]	@ (800157c <main+0x33c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc7e 	bl	8000d60 <__aeabi_fdiv>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <main+0x318>)
 800146a:	601a      	str	r2, [r3, #0]
				DischargeDisplayData.current_ma = Vdda*local_temp_curr/local_temp_count/R_load/ADC_steps*1000;//curr is voltage(XD)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fb6b 	bl	8000b48 <__aeabi_ui2f>
 8001472:	4602      	mov	r2, r0
 8001474:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <main+0x308>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f7ff fbbc 	bl	8000bf8 <__aeabi_fmul>
 8001480:	4603      	mov	r3, r0
 8001482:	461c      	mov	r4, r3
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb62 	bl	8000b50 <__aeabi_i2f>
 800148c:	4603      	mov	r3, r0
 800148e:	4619      	mov	r1, r3
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff fc65 	bl	8000d60 <__aeabi_fdiv>
 8001496:	4603      	mov	r3, r0
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ffc5 	bl	8000428 <__aeabi_f2d>
 800149e:	a322      	add	r3, pc, #136	@ (adr r3, 8001528 <main+0x2e8>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f942 	bl	800072c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <main+0x300>)
 80014b6:	f7ff f939 	bl	800072c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <main+0x340>)
 80014c8:	f7ff f806 	bl	80004d8 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fa32 	bl	800093c <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a1f      	ldr	r2, [pc, #124]	@ (8001558 <main+0x318>)
 80014dc:	6053      	str	r3, [r2, #4]

				last_tick = uwTick;
 80014de:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <main+0x328>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a22      	ldr	r2, [pc, #136]	@ (800156c <main+0x32c>)
 80014e4:	6013      	str	r3, [r2, #0]

				if(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin)==GPIO_PIN_SET)
 80014e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014ea:	4826      	ldr	r0, [pc, #152]	@ (8001584 <main+0x344>)
 80014ec:	f002 ff4c 	bl	8004388 <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d106      	bne.n	8001504 <main+0x2c4>
				{
					TIM2->CCR4 += 10;
 80014f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001500:	330a      	adds	r3, #10
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
				}

				if(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin)==GPIO_PIN_SET)
 8001504:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001508:	481e      	ldr	r0, [pc, #120]	@ (8001584 <main+0x344>)
 800150a:	f002 ff3d 	bl	8004388 <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	2b01      	cmp	r3, #1
 8001512:	f040 8082 	bne.w	800161a <main+0x3da>
				{
					TIM2->CCR4 -= 10;
 8001516:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001520:	3b0a      	subs	r3, #10
 8001522:	6413      	str	r3, [r2, #64]	@ 0x40
				}
			}
			break;
 8001524:	e079      	b.n	800161a <main+0x3da>
 8001526:	bf00      	nop
 8001528:	c28f5c29 	.word	0xc28f5c29
 800152c:	3fcc28f5 	.word	0x3fcc28f5
 8001530:	40010800 	.word	0x40010800
 8001534:	20000084 	.word	0x20000084
 8001538:	40011000 	.word	0x40011000
 800153c:	200002b0 	.word	0x200002b0
 8001540:	40b00000 	.word	0x40b00000
 8001544:	3ff33333 	.word	0x3ff33333
 8001548:	20000000 	.word	0x20000000
 800154c:	20000004 	.word	0x20000004
 8001550:	200000f8 	.word	0x200000f8
 8001554:	200000f9 	.word	0x200000f9
 8001558:	200001f8 	.word	0x200001f8
 800155c:	20000268 	.word	0x20000268
 8001560:	2000011c 	.word	0x2000011c
 8001564:	20000220 	.word	0x20000220
 8001568:	200002f8 	.word	0x200002f8
 800156c:	20000208 	.word	0x20000208
 8001570:	200001ec 	.word	0x200001ec
 8001574:	200001f0 	.word	0x200001f0
 8001578:	200001f4 	.word	0x200001f4
 800157c:	3e3da12f 	.word	0x3e3da12f
 8001580:	408f4000 	.word	0x408f4000
 8001584:	40010c00 	.word	0x40010c00
		}
		case  FINISH:
		{
			if(STATE_MCU_CURRENT != STATE_MCU_PREVIOUS)
 8001588:	4b99      	ldr	r3, [pc, #612]	@ (80017f0 <main+0x5b0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b99      	ldr	r3, [pc, #612]	@ (80017f4 <main+0x5b4>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	429a      	cmp	r2, r3
 8001596:	d042      	beq.n	800161e <main+0x3de>
			{
				if(HAL_TIM_Base_Stop_IT(&htim3)!=HAL_OK)//TIM3 for SAMPLING
 8001598:	4897      	ldr	r0, [pc, #604]	@ (80017f8 <main+0x5b8>)
 800159a:	f003 fd5f 	bl	800505c <HAL_TIM_Base_Stop_IT>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <main+0x374>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015aa:	4894      	ldr	r0, [pc, #592]	@ (80017fc <main+0x5bc>)
 80015ac:	f002 ff03 	bl	80043b6 <HAL_GPIO_WritePin>
					Error_Handler();
 80015b0:	f000 fe4e 	bl	8002250 <Error_Handler>
				}
				if(HAL_ADC_Stop_DMA(&hadc1)!=HAL_OK)//ADC SAMPLING DMA
 80015b4:	4892      	ldr	r0, [pc, #584]	@ (8001800 <main+0x5c0>)
 80015b6:	f001 fb15 	bl	8002be4 <HAL_ADC_Stop_DMA>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <main+0x390>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015c6:	488d      	ldr	r0, [pc, #564]	@ (80017fc <main+0x5bc>)
 80015c8:	f002 fef5 	bl	80043b6 <HAL_GPIO_WritePin>
					Error_Handler();
 80015cc:	f000 fe40 	bl	8002250 <Error_Handler>
				}
				if(HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4)!=HAL_OK)//TIM2 for MOSFET PWM
 80015d0:	210c      	movs	r1, #12
 80015d2:	488c      	ldr	r0, [pc, #560]	@ (8001804 <main+0x5c4>)
 80015d4:	f003 fe6a 	bl	80052ac <HAL_TIM_PWM_Stop>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <main+0x3ae>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e4:	4885      	ldr	r0, [pc, #532]	@ (80017fc <main+0x5bc>)
 80015e6:	f002 fee6 	bl	80043b6 <HAL_GPIO_WritePin>
					Error_Handler();
 80015ea:	f000 fe31 	bl	8002250 <Error_Handler>
				}
				STATE_MCU_PREVIOUS = STATE_MCU_CURRENT; //IMPLEMENTED IN BUTTON THE START
 80015ee:	4b80      	ldr	r3, [pc, #512]	@ (80017f0 <main+0x5b0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b7f      	ldr	r3, [pc, #508]	@ (80017f4 <main+0x5b4>)
 80015f6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(CHARGING_STATE_GPIO_Port, CHARGING_STATE_Pin,GPIO_PIN_SET); // indication for charging
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015fe:	487f      	ldr	r0, [pc, #508]	@ (80017fc <main+0x5bc>)
 8001600:	f002 fed9 	bl	80043b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2104      	movs	r1, #4
 8001608:	487f      	ldr	r0, [pc, #508]	@ (8001808 <main+0x5c8>)
 800160a:	f002 fed4 	bl	80043b6 <HAL_GPIO_WritePin>
				updateScreenRequest = 1;
 800160e:	4b7f      	ldr	r3, [pc, #508]	@ (800180c <main+0x5cc>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
				break;
 8001614:	e004      	b.n	8001620 <main+0x3e0>
			break;
		}
		default:
		{

			break;
 8001616:	bf00      	nop
 8001618:	e002      	b.n	8001620 <main+0x3e0>
			break;
 800161a:	bf00      	nop
 800161c:	e000      	b.n	8001620 <main+0x3e0>
			break;
 800161e:	bf00      	nop
		}
		}

		if(button_activity)
 8001620:	4b7b      	ldr	r3, [pc, #492]	@ (8001810 <main+0x5d0>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	f43f ae6f 	beq.w	800130a <main+0xca>
		{
			if(HAL_GPIO_ReadPin(Button_mode_GPIO_Port, Button_mode_Pin) == GPIO_PIN_SET)
 800162c:	2102      	movs	r1, #2
 800162e:	4879      	ldr	r0, [pc, #484]	@ (8001814 <main+0x5d4>)
 8001630:	f002 feaa 	bl	8004388 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d141      	bne.n	80016be <main+0x47e>
			{
				if(STATE_MCU_CURRENT == SETUP)
 800163a:	4b6d      	ldr	r3, [pc, #436]	@ (80017f0 <main+0x5b0>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d126      	bne.n	8001692 <main+0x452>
				{
					SETUP_CONFIGURATION = 	(SETUP_CONFIGURATION+1)%SETUP_PARAM_COUNT;
 8001644:	4b74      	ldr	r3, [pc, #464]	@ (8001818 <main+0x5d8>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	3301      	adds	r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	bfb8      	it	lt
 8001654:	425b      	neglt	r3, r3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b6f      	ldr	r3, [pc, #444]	@ (8001818 <main+0x5d8>)
 800165a:	701a      	strb	r2, [r3, #0]
					while(HAL_GPIO_ReadPin(Button_mode_GPIO_Port, Button_mode_Pin) == GPIO_PIN_SET)
 800165c:	e012      	b.n	8001684 <main+0x444>
					{
						if(uwTick-last_button_time > BUTTON_LONG_PRESS)
 800165e:	4b6f      	ldr	r3, [pc, #444]	@ (800181c <main+0x5dc>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b6f      	ldr	r3, [pc, #444]	@ (8001820 <main+0x5e0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800166c:	d90a      	bls.n	8001684 <main+0x444>
						{
							STATE_MCU_CURRENT = DISCHARGE;
 800166e:	4b60      	ldr	r3, [pc, #384]	@ (80017f0 <main+0x5b0>)
 8001670:	2202      	movs	r2, #2
 8001672:	701a      	strb	r2, [r3, #0]
							STATE_MCU_PREVIOUS = SETUP;
 8001674:	4b5f      	ldr	r3, [pc, #380]	@ (80017f4 <main+0x5b4>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
							last_button_time = uwTick;
 800167a:	4b68      	ldr	r3, [pc, #416]	@ (800181c <main+0x5dc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a68      	ldr	r2, [pc, #416]	@ (8001820 <main+0x5e0>)
 8001680:	6013      	str	r3, [r2, #0]
							break;//stop the loop, since its in different state now
 8001682:	e006      	b.n	8001692 <main+0x452>
					while(HAL_GPIO_ReadPin(Button_mode_GPIO_Port, Button_mode_Pin) == GPIO_PIN_SET)
 8001684:	2102      	movs	r1, #2
 8001686:	4863      	ldr	r0, [pc, #396]	@ (8001814 <main+0x5d4>)
 8001688:	f002 fe7e 	bl	8004388 <HAL_GPIO_ReadPin>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d0e5      	beq.n	800165e <main+0x41e>
						}
					}
				}

				if (STATE_MCU_CURRENT == DISCHARGE)
 8001692:	4b57      	ldr	r3, [pc, #348]	@ (80017f0 <main+0x5b0>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d103      	bne.n	80016a4 <main+0x464>
				{
						HAL_GPIO_TogglePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin);
 800169c:	2104      	movs	r1, #4
 800169e:	485a      	ldr	r0, [pc, #360]	@ (8001808 <main+0x5c8>)
 80016a0:	f002 fea1 	bl	80043e6 <HAL_GPIO_TogglePin>
				}
				if(STATE_MCU_CURRENT == FINISH)
 80016a4:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <main+0x5b0>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	f040 80dc 	bne.w	8001868 <main+0x628>
				{
					//reset for setup to start over
					STATE_MCU_CURRENT = SETUP;
 80016b0:	4b4f      	ldr	r3, [pc, #316]	@ (80017f0 <main+0x5b0>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
					STATE_MCU_PREVIOUS = FINISH;
 80016b6:	4b4f      	ldr	r3, [pc, #316]	@ (80017f4 <main+0x5b4>)
 80016b8:	2204      	movs	r2, #4
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e0d4      	b.n	8001868 <main+0x628>
				}
			}

			else if(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin) == GPIO_PIN_SET)
 80016be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016c2:	4854      	ldr	r0, [pc, #336]	@ (8001814 <main+0x5d4>)
 80016c4:	f002 fe60 	bl	8004388 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d153      	bne.n	8001776 <main+0x536>
			{
				if(STATE_MCU_CURRENT == SETUP)
 80016ce:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <main+0x5b0>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	f040 80c7 	bne.w	8001868 <main+0x628>
				{
					if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 80016da:	4b4f      	ldr	r3, [pc, #316]	@ (8001818 <main+0x5d8>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d107      	bne.n	80016f4 <main+0x4b4>
					{
						Cutoff_voltage += 100;// 100 mV step
 80016e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001824 <main+0x5e4>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3364      	adds	r3, #100	@ 0x64
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001824 <main+0x5e4>)
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e033      	b.n	800175c <main+0x51c>
					}
					else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 80016f4:	4b48      	ldr	r3, [pc, #288]	@ (8001818 <main+0x5d8>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d12e      	bne.n	800175c <main+0x51c>
					{
						Discharge_current+=10;// 10 mA step
 80016fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001828 <main+0x5e8>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	330a      	adds	r3, #10
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <main+0x5e8>)
 800170a:	801a      	strh	r2, [r3, #0]
					}
					while(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin) == GPIO_PIN_SET)
 800170c:	e026      	b.n	800175c <main+0x51c>
					{
						if(uwTick-last_button_time > BUTTON_LONG_PRESS)
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <main+0x5dc>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b43      	ldr	r3, [pc, #268]	@ (8001820 <main+0x5e0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800171c:	d91e      	bls.n	800175c <main+0x51c>
						{
							if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 800171e:	4b3e      	ldr	r3, [pc, #248]	@ (8001818 <main+0x5d8>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <main+0x4f8>
							{
								Cutoff_voltage += 100;// 100 mV step
 8001728:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <main+0x5e4>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	3364      	adds	r3, #100	@ 0x64
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b3c      	ldr	r3, [pc, #240]	@ (8001824 <main+0x5e4>)
 8001734:	801a      	strh	r2, [r3, #0]
 8001736:	e00b      	b.n	8001750 <main+0x510>
							}
							else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 8001738:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <main+0x5d8>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <main+0x510>
							{
								Discharge_current+=10;// 10 mA step
 8001742:	4b39      	ldr	r3, [pc, #228]	@ (8001828 <main+0x5e8>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	330a      	adds	r3, #10
 800174a:	b29a      	uxth	r2, r3
 800174c:	4b36      	ldr	r3, [pc, #216]	@ (8001828 <main+0x5e8>)
 800174e:	801a      	strh	r2, [r3, #0]
							}
							DELAY_US(10000);
 8001750:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001754:	f000 f8ee 	bl	8001934 <DELAY_US>
							updateScreen();//periodically update because of the auto increment
 8001758:	f000 f918 	bl	800198c <updateScreen>
					while(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin) == GPIO_PIN_SET)
 800175c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001760:	482c      	ldr	r0, [pc, #176]	@ (8001814 <main+0x5d4>)
 8001762:	f002 fe11 	bl	8004388 <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	d0d0      	beq.n	800170e <main+0x4ce>
						}
					}
					last_button_time = uwTick;
 800176c:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <main+0x5dc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2b      	ldr	r2, [pc, #172]	@ (8001820 <main+0x5e0>)
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e078      	b.n	8001868 <main+0x628>
				}
			}

			else if(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin) == GPIO_PIN_SET)
 8001776:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800177a:	4826      	ldr	r0, [pc, #152]	@ (8001814 <main+0x5d4>)
 800177c:	f002 fe04 	bl	8004388 <HAL_GPIO_ReadPin>
 8001780:	4603      	mov	r3, r0
 8001782:	2b01      	cmp	r3, #1
 8001784:	d170      	bne.n	8001868 <main+0x628>
			{
				if(STATE_MCU_CURRENT == SETUP)
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <main+0x5b0>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d16b      	bne.n	8001868 <main+0x628>
				{
					if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <main+0x5d8>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d107      	bne.n	80017aa <main+0x56a>
					{
						Cutoff_voltage -= 100;// 100 mV step
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <main+0x5e4>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b64      	subs	r3, #100	@ 0x64
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <main+0x5e4>)
 80017a6:	801a      	strh	r2, [r3, #0]
 80017a8:	e052      	b.n	8001850 <main+0x610>
					}
					else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <main+0x5d8>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d14d      	bne.n	8001850 <main+0x610>
					{
						Discharge_current-=10;// 10 mA step
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <main+0x5e8>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b0a      	subs	r3, #10
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <main+0x5e8>)
 80017c0:	801a      	strh	r2, [r3, #0]
					}
					while(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin) == GPIO_PIN_SET)
 80017c2:	e045      	b.n	8001850 <main+0x610>
					{
						if(uwTick-last_button_time > BUTTON_LONG_PRESS)
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <main+0x5dc>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <main+0x5e0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017d2:	d93d      	bls.n	8001850 <main+0x610>
						{
							if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <main+0x5d8>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d126      	bne.n	800182c <main+0x5ec>
							{
								Cutoff_voltage -= 100;// 100 mV step
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <main+0x5e4>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	3b64      	subs	r3, #100	@ 0x64
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <main+0x5e4>)
 80017ea:	801a      	strh	r2, [r3, #0]
 80017ec:	e02a      	b.n	8001844 <main+0x604>
 80017ee:	bf00      	nop
 80017f0:	200000f8 	.word	0x200000f8
 80017f4:	200000f9 	.word	0x200000f9
 80017f8:	20000268 	.word	0x20000268
 80017fc:	40011000 	.word	0x40011000
 8001800:	20000084 	.word	0x20000084
 8001804:	20000220 	.word	0x20000220
 8001808:	40010800 	.word	0x40010800
 800180c:	20000004 	.word	0x20000004
 8001810:	200001e4 	.word	0x200001e4
 8001814:	40010c00 	.word	0x40010c00
 8001818:	200000fa 	.word	0x200000fa
 800181c:	200002f8 	.word	0x200002f8
 8001820:	200001e8 	.word	0x200001e8
 8001824:	20000008 	.word	0x20000008
 8001828:	20000006 	.word	0x20000006
							}
							else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 800182c:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <main+0x638>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <main+0x604>
							{
								Discharge_current-=10;// 10 mA step
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <main+0x63c>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b0a      	subs	r3, #10
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <main+0x63c>)
 8001842:	801a      	strh	r2, [r3, #0]
							}
							DELAY_US(10000);
 8001844:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001848:	f000 f874 	bl	8001934 <DELAY_US>
							updateScreen();//periodically update because of the auto increment
 800184c:	f000 f89e 	bl	800198c <updateScreen>
					while(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin) == GPIO_PIN_SET)
 8001850:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001854:	480a      	ldr	r0, [pc, #40]	@ (8001880 <main+0x640>)
 8001856:	f002 fd97 	bl	8004388 <HAL_GPIO_ReadPin>
 800185a:	4603      	mov	r3, r0
 800185c:	2b01      	cmp	r3, #1
 800185e:	d0b1      	beq.n	80017c4 <main+0x584>
						}
					}
					last_button_time = uwTick;
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <main+0x644>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <main+0x648>)
 8001866:	6013      	str	r3, [r2, #0]
				}
			}
			button_activity = 0;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <main+0x64c>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
			updateScreenRequest = 1;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <main+0x650>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
		if(updateScreenRequest)//only perform LCD switch states on gpio change
 8001874:	e549      	b.n	800130a <main+0xca>
 8001876:	bf00      	nop
 8001878:	200000fa 	.word	0x200000fa
 800187c:	20000006 	.word	0x20000006
 8001880:	40010c00 	.word	0x40010c00
 8001884:	200002f8 	.word	0x200002f8
 8001888:	200001e8 	.word	0x200001e8
 800188c:	200001e4 	.word	0x200001e4
 8001890:	20000004 	.word	0x20000004

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b094      	sub	sp, #80	@ 0x50
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800189e:	2228      	movs	r2, #40	@ 0x28
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fcae 	bl	8006204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fdb6 	bl	8004448 <HAL_RCC_OscConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0x52>
  {
    Error_Handler();
 80018e2:	f000 fcb5 	bl	8002250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e6:	230f      	movs	r3, #15
 80018e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f003 f823 	bl	800494c <HAL_RCC_ClockConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800190c:	f000 fca0 	bl	8002250 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001910:	2302      	movs	r3, #2
 8001912:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f990 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001926:	f000 fc93 	bl	8002250 <Error_Handler>
  }
}
 800192a:	bf00      	nop
 800192c:	3750      	adds	r7, #80	@ 0x50
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <DELAY_US>:

/* USER CODE BEGIN 4 */
void DELAY_US(uint16_t TIME_US)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
	uint32_t old_timer_value = TIM4->CNT;
 800193e:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <DELAY_US+0x54>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	60fb      	str	r3, [r7, #12]
	uint32_t target_time = (old_timer_value + TIME_US) % (TIM4->ARR + 1);
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	4a0f      	ldr	r2, [pc, #60]	@ (8001988 <DELAY_US+0x54>)
 800194c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800194e:	3201      	adds	r2, #1
 8001950:	fbb3 f1f2 	udiv	r1, r3, r2
 8001954:	fb01 f202 	mul.w	r2, r1, r2
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	60bb      	str	r3, [r7, #8]

	if (target_time < old_timer_value)  // Handle timer overflow
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d205      	bcs.n	8001970 <DELAY_US+0x3c>
	{
		while (TIM4->CNT >= old_timer_value);  // Wait for overflow
 8001964:	bf00      	nop
 8001966:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <DELAY_US+0x54>)
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d9fa      	bls.n	8001966 <DELAY_US+0x32>
	}
	while (TIM4->CNT < target_time);  // Wait until target time is reached
 8001970:	bf00      	nop
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <DELAY_US+0x54>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8fa      	bhi.n	8001972 <DELAY_US+0x3e>
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40000800 	.word	0x40000800

0800198c <updateScreen>:
void updateScreen()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
	static uint32_t elapsed_time;
	updateScreenRequest = 0;
 8001992:	4bb1      	ldr	r3, [pc, #708]	@ (8001c58 <updateScreen+0x2cc>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
	switch(STATE_MCU_CURRENT)
 8001998:	4bb0      	ldr	r3, [pc, #704]	@ (8001c5c <updateScreen+0x2d0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b04      	cmp	r3, #4
 80019a0:	f200 8154 	bhi.w	8001c4c <updateScreen+0x2c0>
 80019a4:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <updateScreen+0x20>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	080019c1 	.word	0x080019c1
 80019b0:	080019fd 	.word	0x080019fd
 80019b4:	08001aad 	.word	0x08001aad
 80019b8:	08001c4d 	.word	0x08001c4d
 80019bc:	08001bfd 	.word	0x08001bfd
	{
	case  START:
	{
		LCD_Init();
 80019c0:	f004 fb52 	bl	8006068 <LCD_Init>

		sprintf(LCD_buffer,"Battery analyzer");
 80019c4:	49a6      	ldr	r1, [pc, #664]	@ (8001c60 <updateScreen+0x2d4>)
 80019c6:	48a7      	ldr	r0, [pc, #668]	@ (8001c64 <updateScreen+0x2d8>)
 80019c8:	f004 fbe0 	bl	800618c <siprintf>
		formatCharToLCD(LCD_buffer,0,0,ALIGN_LEFT);
 80019cc:	2301      	movs	r3, #1
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	48a4      	ldr	r0, [pc, #656]	@ (8001c64 <updateScreen+0x2d8>)
 80019d4:	f000 f97e 	bl	8001cd4 <formatCharToLCD>

		sprintf(LCD_buffer,"BatVinux");
 80019d8:	49a3      	ldr	r1, [pc, #652]	@ (8001c68 <updateScreen+0x2dc>)
 80019da:	48a2      	ldr	r0, [pc, #648]	@ (8001c64 <updateScreen+0x2d8>)
 80019dc:	f004 fbd6 	bl	800618c <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 80019e0:	2303      	movs	r3, #3
 80019e2:	2201      	movs	r2, #1
 80019e4:	2100      	movs	r1, #0
 80019e6:	489f      	ldr	r0, [pc, #636]	@ (8001c64 <updateScreen+0x2d8>)
 80019e8:	f000 f974 	bl	8001cd4 <formatCharToLCD>

		HAL_Delay(1000);
 80019ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f0:	f000 ff1e 	bl	8002830 <HAL_Delay>
		STATE_MCU_CURRENT = SETUP;
 80019f4:	4b99      	ldr	r3, [pc, #612]	@ (8001c5c <updateScreen+0x2d0>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
		break;
 80019fa:	e128      	b.n	8001c4e <updateScreen+0x2c2>
	}
	case  SETUP:
	{
		switch(SETUP_CONFIGURATION)
 80019fc:	4b9b      	ldr	r3, [pc, #620]	@ (8001c6c <updateScreen+0x2e0>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <updateScreen+0x80>
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d019      	beq.n	8001a3e <updateScreen+0xb2>
 8001a0a:	e04b      	b.n	8001aa4 <updateScreen+0x118>
		{
		case(SETUP_PARAM_DISCHARGE_CURRENT):
		{
			sprintf(LCD_buffer,"Current, mA");
 8001a0c:	4998      	ldr	r1, [pc, #608]	@ (8001c70 <updateScreen+0x2e4>)
 8001a0e:	4895      	ldr	r0, [pc, #596]	@ (8001c64 <updateScreen+0x2d8>)
 8001a10:	f004 fbbc 	bl	800618c <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001a14:	2303      	movs	r3, #3
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4892      	ldr	r0, [pc, #584]	@ (8001c64 <updateScreen+0x2d8>)
 8001a1c:	f000 f95a 	bl	8001cd4 <formatCharToLCD>

			sprintf(LCD_buffer,"%d",Discharge_current);
 8001a20:	4b94      	ldr	r3, [pc, #592]	@ (8001c74 <updateScreen+0x2e8>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	4993      	ldr	r1, [pc, #588]	@ (8001c78 <updateScreen+0x2ec>)
 8001a2a:	488e      	ldr	r0, [pc, #568]	@ (8001c64 <updateScreen+0x2d8>)
 8001a2c:	f004 fbae 	bl	800618c <siprintf>
			formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 8001a30:	2303      	movs	r3, #3
 8001a32:	2201      	movs	r2, #1
 8001a34:	2100      	movs	r1, #0
 8001a36:	488b      	ldr	r0, [pc, #556]	@ (8001c64 <updateScreen+0x2d8>)
 8001a38:	f000 f94c 	bl	8001cd4 <formatCharToLCD>
			break;
 8001a3c:	e035      	b.n	8001aaa <updateScreen+0x11e>
		}
		case(SETUP_PARAM_CUTOFF_VOLTAGE):
		{
			sprintf(LCD_buffer,"Cutoff voltage");
 8001a3e:	498f      	ldr	r1, [pc, #572]	@ (8001c7c <updateScreen+0x2f0>)
 8001a40:	4888      	ldr	r0, [pc, #544]	@ (8001c64 <updateScreen+0x2d8>)
 8001a42:	f004 fba3 	bl	800618c <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001a46:	2303      	movs	r3, #3
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4885      	ldr	r0, [pc, #532]	@ (8001c64 <updateScreen+0x2d8>)
 8001a4e:	f000 f941 	bl	8001cd4 <formatCharToLCD>

			//no float support (+10 kB flash)
			uint8_t temp1 = Cutoff_voltage/1000;
 8001a52:	4b8b      	ldr	r3, [pc, #556]	@ (8001c80 <updateScreen+0x2f4>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4a8a      	ldr	r2, [pc, #552]	@ (8001c84 <updateScreen+0x2f8>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	727b      	strb	r3, [r7, #9]
			uint8_t temp2 = (Cutoff_voltage/100)%10;
 8001a64:	4b86      	ldr	r3, [pc, #536]	@ (8001c80 <updateScreen+0x2f4>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4a87      	ldr	r2, [pc, #540]	@ (8001c88 <updateScreen+0x2fc>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b85      	ldr	r3, [pc, #532]	@ (8001c8c <updateScreen+0x300>)
 8001a76:	fba3 1302 	umull	r1, r3, r3, r2
 8001a7a:	08d9      	lsrs	r1, r3, #3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	723b      	strb	r3, [r7, #8]
			sprintf(LCD_buffer,"%u.%u V",temp1,temp2);
 8001a8a:	7a7a      	ldrb	r2, [r7, #9]
 8001a8c:	7a3b      	ldrb	r3, [r7, #8]
 8001a8e:	4980      	ldr	r1, [pc, #512]	@ (8001c90 <updateScreen+0x304>)
 8001a90:	4874      	ldr	r0, [pc, #464]	@ (8001c64 <updateScreen+0x2d8>)
 8001a92:	f004 fb7b 	bl	800618c <siprintf>
			formatCharToLCD(LCD_buffer,1,1,ALIGN_CENTER);
 8001a96:	2303      	movs	r3, #3
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4871      	ldr	r0, [pc, #452]	@ (8001c64 <updateScreen+0x2d8>)
 8001a9e:	f000 f919 	bl	8001cd4 <formatCharToLCD>
			break;
 8001aa2:	e002      	b.n	8001aaa <updateScreen+0x11e>
		}
		default:
			LCD_CLEAR();
 8001aa4:	f004 fad8 	bl	8006058 <LCD_CLEAR>
			break;
 8001aa8:	bf00      	nop
		}
		break;
 8001aaa:	e0d0      	b.n	8001c4e <updateScreen+0x2c2>
	}
	case  DISCHARGE:
	{
		if(STATE_MCU_CURRENT != STATE_MCU_PREVIOUS)
 8001aac:	4b6b      	ldr	r3, [pc, #428]	@ (8001c5c <updateScreen+0x2d0>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b78      	ldr	r3, [pc, #480]	@ (8001c94 <updateScreen+0x308>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d018      	beq.n	8001aee <updateScreen+0x162>
		{
			sprintf(LCD_buffer,"Starting");
 8001abc:	4976      	ldr	r1, [pc, #472]	@ (8001c98 <updateScreen+0x30c>)
 8001abe:	4869      	ldr	r0, [pc, #420]	@ (8001c64 <updateScreen+0x2d8>)
 8001ac0:	f004 fb64 	bl	800618c <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4866      	ldr	r0, [pc, #408]	@ (8001c64 <updateScreen+0x2d8>)
 8001acc:	f000 f902 	bl	8001cd4 <formatCharToLCD>

			sprintf(LCD_buffer,"the discharge...");
 8001ad0:	4972      	ldr	r1, [pc, #456]	@ (8001c9c <updateScreen+0x310>)
 8001ad2:	4864      	ldr	r0, [pc, #400]	@ (8001c64 <updateScreen+0x2d8>)
 8001ad4:	f004 fb5a 	bl	800618c <siprintf>
			formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 8001ad8:	2303      	movs	r3, #3
 8001ada:	2201      	movs	r2, #1
 8001adc:	2100      	movs	r1, #0
 8001ade:	4861      	ldr	r0, [pc, #388]	@ (8001c64 <updateScreen+0x2d8>)
 8001ae0:	f000 f8f8 	bl	8001cd4 <formatCharToLCD>

			HAL_Delay(2000);
 8001ae4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ae8:	f000 fea2 	bl	8002830 <HAL_Delay>
			break;
 8001aec:	e0af      	b.n	8001c4e <updateScreen+0x2c2>
		}
		if(OverCurrent_indication != 1)
 8001aee:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca0 <updateScreen+0x314>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d069      	beq.n	8001bcc <updateScreen+0x240>
		{
		//Printing the reading values
		uint16_t temp = (uint16_t)(((10*DischargeDisplayData.voltage)+0.5))%10;
 8001af8:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca4 <updateScreen+0x318>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	496a      	ldr	r1, [pc, #424]	@ (8001ca8 <updateScreen+0x31c>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f87a 	bl	8000bf8 <__aeabi_fmul>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fc8e 	bl	8000428 <__aeabi_f2d>
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <updateScreen+0x320>)
 8001b12:	f7fe fb2b 	bl	800016c <__adddf3>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7fe feed 	bl	80008fc <__aeabi_d2uiz>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b59      	ldr	r3, [pc, #356]	@ (8001c8c <updateScreen+0x300>)
 8001b28:	fba3 1302 	umull	r1, r3, r3, r2
 8001b2c:	08d9      	lsrs	r1, r3, #3
 8001b2e:	460b      	mov	r3, r1
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	817b      	strh	r3, [r7, #10]
		char buff[8];
		sprintf(buff,"%u.%u",(uint16_t)DischargeDisplayData.voltage,temp);
 8001b3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca4 <updateScreen+0x318>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f9aa 	bl	8000e98 <__aeabi_f2uiz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	897b      	ldrh	r3, [r7, #10]
 8001b4c:	4638      	mov	r0, r7
 8001b4e:	4958      	ldr	r1, [pc, #352]	@ (8001cb0 <updateScreen+0x324>)
 8001b50:	f004 fb1c 	bl	800618c <siprintf>
		sprintf(LCD_buffer,"%u mA, %s V",(uint16_t)(DischargeDisplayData.current_ma+0.5),buff);
 8001b54:	4b53      	ldr	r3, [pc, #332]	@ (8001ca4 <updateScreen+0x318>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fc65 	bl	8000428 <__aeabi_f2d>
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b52      	ldr	r3, [pc, #328]	@ (8001cac <updateScreen+0x320>)
 8001b64:	f7fe fb02 	bl	800016c <__adddf3>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7fe fec4 	bl	80008fc <__aeabi_d2uiz>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	494d      	ldr	r1, [pc, #308]	@ (8001cb4 <updateScreen+0x328>)
 8001b7e:	4839      	ldr	r0, [pc, #228]	@ (8001c64 <updateScreen+0x2d8>)
 8001b80:	f004 fb04 	bl	800618c <siprintf>
		formatCharToLCD(LCD_buffer,0,0,ALIGN_LEFT);
 8001b84:	2301      	movs	r3, #1
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4836      	ldr	r0, [pc, #216]	@ (8001c64 <updateScreen+0x2d8>)
 8001b8c:	f000 f8a2 	bl	8001cd4 <formatCharToLCD>

		elapsed_time = (uwTick-DischargeDisplayData.start_time)/1000;
 8001b90:	4b49      	ldr	r3, [pc, #292]	@ (8001cb8 <updateScreen+0x32c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b43      	ldr	r3, [pc, #268]	@ (8001ca4 <updateScreen+0x318>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c84 <updateScreen+0x2f8>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	4a46      	ldr	r2, [pc, #280]	@ (8001cbc <updateScreen+0x330>)
 8001ba4:	6013      	str	r3, [r2, #0]
		sprintf(LCD_buffer,"%lu mAh, %lu s",(uint32_t)DischargeDisplayData.capacity_mah,elapsed_time);
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca4 <updateScreen+0x318>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f974 	bl	8000e98 <__aeabi_f2uiz>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b42      	ldr	r3, [pc, #264]	@ (8001cbc <updateScreen+0x330>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4942      	ldr	r1, [pc, #264]	@ (8001cc0 <updateScreen+0x334>)
 8001bb8:	482a      	ldr	r0, [pc, #168]	@ (8001c64 <updateScreen+0x2d8>)
 8001bba:	f004 fae7 	bl	800618c <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_LEFT);
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4827      	ldr	r0, [pc, #156]	@ (8001c64 <updateScreen+0x2d8>)
 8001bc6:	f000 f885 	bl	8001cd4 <formatCharToLCD>
			formatCharToLCD(LCD_buffer,1,0,ALIGN_LEFT);

			OverCurrent_indication = 0;
		}

		break;
 8001bca:	e040      	b.n	8001c4e <updateScreen+0x2c2>
			sprintf(LCD_buffer,"OVERCURRENT");
 8001bcc:	493d      	ldr	r1, [pc, #244]	@ (8001cc4 <updateScreen+0x338>)
 8001bce:	4825      	ldr	r0, [pc, #148]	@ (8001c64 <updateScreen+0x2d8>)
 8001bd0:	f004 fadc 	bl	800618c <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_LEFT);
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4822      	ldr	r0, [pc, #136]	@ (8001c64 <updateScreen+0x2d8>)
 8001bdc:	f000 f87a 	bl	8001cd4 <formatCharToLCD>
			sprintf(LCD_buffer,"CHECK BATTERY");
 8001be0:	4939      	ldr	r1, [pc, #228]	@ (8001cc8 <updateScreen+0x33c>)
 8001be2:	4820      	ldr	r0, [pc, #128]	@ (8001c64 <updateScreen+0x2d8>)
 8001be4:	f004 fad2 	bl	800618c <siprintf>
			formatCharToLCD(LCD_buffer,1,0,ALIGN_LEFT);
 8001be8:	2301      	movs	r3, #1
 8001bea:	2200      	movs	r2, #0
 8001bec:	2101      	movs	r1, #1
 8001bee:	481d      	ldr	r0, [pc, #116]	@ (8001c64 <updateScreen+0x2d8>)
 8001bf0:	f000 f870 	bl	8001cd4 <formatCharToLCD>
			OverCurrent_indication = 0;
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca0 <updateScreen+0x314>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
		break;
 8001bfa:	e028      	b.n	8001c4e <updateScreen+0x2c2>
	}
	case  FINISH:
	{
		sprintf(LCD_buffer,"DISCHARGED");
 8001bfc:	4933      	ldr	r1, [pc, #204]	@ (8001ccc <updateScreen+0x340>)
 8001bfe:	4819      	ldr	r0, [pc, #100]	@ (8001c64 <updateScreen+0x2d8>)
 8001c00:	f004 fac4 	bl	800618c <siprintf>
		formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001c04:	2303      	movs	r3, #3
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4816      	ldr	r0, [pc, #88]	@ (8001c64 <updateScreen+0x2d8>)
 8001c0c:	f000 f862 	bl	8001cd4 <formatCharToLCD>

		uint32_t elapsed_time = (uwTick-DischargeDisplayData.start_time)/1000;
 8001c10:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <updateScreen+0x32c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <updateScreen+0x318>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c84 <updateScreen+0x2f8>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	60fb      	str	r3, [r7, #12]
		sprintf(LCD_buffer,"%u mAh in %lu s?",(uint16_t)DischargeDisplayData.capacity_mah,elapsed_time);
 8001c24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <updateScreen+0x318>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f935 	bl	8000e98 <__aeabi_f2uiz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4926      	ldr	r1, [pc, #152]	@ (8001cd0 <updateScreen+0x344>)
 8001c38:	480a      	ldr	r0, [pc, #40]	@ (8001c64 <updateScreen+0x2d8>)
 8001c3a:	f004 faa7 	bl	800618c <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 8001c3e:	2303      	movs	r3, #3
 8001c40:	2201      	movs	r2, #1
 8001c42:	2100      	movs	r1, #0
 8001c44:	4807      	ldr	r0, [pc, #28]	@ (8001c64 <updateScreen+0x2d8>)
 8001c46:	f000 f845 	bl	8001cd4 <formatCharToLCD>

		break;
 8001c4a:	e000      	b.n	8001c4e <updateScreen+0x2c2>
		break;
	}
	default:
	{

		break;
 8001c4c:	bf00      	nop
	}
	}
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	200000f8 	.word	0x200000f8
 8001c60:	08006b04 	.word	0x08006b04
 8001c64:	200000fc 	.word	0x200000fc
 8001c68:	08006b18 	.word	0x08006b18
 8001c6c:	200000fa 	.word	0x200000fa
 8001c70:	08006b24 	.word	0x08006b24
 8001c74:	20000006 	.word	0x20000006
 8001c78:	08006b30 	.word	0x08006b30
 8001c7c:	08006b34 	.word	0x08006b34
 8001c80:	20000008 	.word	0x20000008
 8001c84:	10624dd3 	.word	0x10624dd3
 8001c88:	51eb851f 	.word	0x51eb851f
 8001c8c:	cccccccd 	.word	0xcccccccd
 8001c90:	08006b44 	.word	0x08006b44
 8001c94:	200000f9 	.word	0x200000f9
 8001c98:	08006b4c 	.word	0x08006b4c
 8001c9c:	08006b58 	.word	0x08006b58
 8001ca0:	200001e5 	.word	0x200001e5
 8001ca4:	200001f8 	.word	0x200001f8
 8001ca8:	41200000 	.word	0x41200000
 8001cac:	3fe00000 	.word	0x3fe00000
 8001cb0:	08006b6c 	.word	0x08006b6c
 8001cb4:	08006b74 	.word	0x08006b74
 8001cb8:	200002f8 	.word	0x200002f8
 8001cbc:	2000020c 	.word	0x2000020c
 8001cc0:	08006b80 	.word	0x08006b80
 8001cc4:	08006b90 	.word	0x08006b90
 8001cc8:	08006b9c 	.word	0x08006b9c
 8001ccc:	08006bac 	.word	0x08006bac
 8001cd0:	08006bb8 	.word	0x08006bb8

08001cd4 <formatCharToLCD>:
//Add padding for LCD display
//If padding is added, place is 0, level is dependant on LCD top(0) or bottom(1)
void formatCharToLCD(char* message, uint8_t place, uint8_t level, uint8_t Padding)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	70fb      	strb	r3, [r7, #3]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70bb      	strb	r3, [r7, #2]
 8001cea:	4613      	mov	r3, r2
 8001cec:	707b      	strb	r3, [r7, #1]
	static uint8_t buffer_size;
	buffer_size = strlen(message);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fa2e 	bl	8000150 <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <formatCharToLCD+0xbc>)
 8001cfa:	701a      	strb	r2, [r3, #0]
	if(buffer_size != 0 && buffer_size <= LCD_COLS)
 8001cfc:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <formatCharToLCD+0xbc>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d041      	beq.n	8001d88 <formatCharToLCD+0xb4>
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <formatCharToLCD+0xbc>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d83d      	bhi.n	8001d88 <formatCharToLCD+0xb4>
	{
		if(Padding==ALIGN_NO)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <formatCharToLCD+0x4c>
		{
			LCD_SEND_STR(message,place, level);
 8001d12:	78ba      	ldrb	r2, [r7, #2]
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f004 f9fd 	bl	8006118 <LCD_SEND_STR>
 8001d1e:	e033      	b.n	8001d88 <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_LEFT)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10d      	bne.n	8001d42 <formatCharToLCD+0x6e>
		{
			charAddPadding(message, ALIGN_LEFT, buffer_size);
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <formatCharToLCD+0xbc>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f830 	bl	8001d94 <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001d34:	78bb      	ldrb	r3, [r7, #2]
 8001d36:	461a      	mov	r2, r3
 8001d38:	2100      	movs	r1, #0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f004 f9ec 	bl	8006118 <LCD_SEND_STR>
 8001d40:	e022      	b.n	8001d88 <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_RIGHT)
 8001d42:	787b      	ldrb	r3, [r7, #1]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d10d      	bne.n	8001d64 <formatCharToLCD+0x90>
		{
			charAddPadding(message, ALIGN_RIGHT, buffer_size);
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <formatCharToLCD+0xbc>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2102      	movs	r1, #2
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f81f 	bl	8001d94 <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001d56:	78bb      	ldrb	r3, [r7, #2]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f004 f9db 	bl	8006118 <LCD_SEND_STR>
 8001d62:	e011      	b.n	8001d88 <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_CENTER)
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d10d      	bne.n	8001d86 <formatCharToLCD+0xb2>
		{
			charAddPadding(message, ALIGN_CENTER, buffer_size);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <formatCharToLCD+0xbc>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2103      	movs	r1, #3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f80e 	bl	8001d94 <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001d78:	78bb      	ldrb	r3, [r7, #2]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f004 f9ca 	bl	8006118 <LCD_SEND_STR>
 8001d84:	e000      	b.n	8001d88 <formatCharToLCD+0xb4>
		}
		else return;
 8001d86:	bf00      	nop
	}
}
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000210 	.word	0x20000210

08001d94 <charAddPadding>:

void charAddPadding(char* buffer, uint8_t align,uint8_t size)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
 8001da0:	4613      	mov	r3, r2
 8001da2:	70bb      	strb	r3, [r7, #2]
	if(align == ALIGN_LEFT)
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d10e      	bne.n	8001dc8 <charAddPadding+0x34>
	{
		for(uint8_t i = size;i<LCD_COLS;i++)
 8001daa:	78bb      	ldrb	r3, [r7, #2]
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	e007      	b.n	8001dc0 <charAddPadding+0x2c>
		{
			buffer[i] = ' ';
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	2220      	movs	r2, #32
 8001db8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = size;i<LCD_COLS;i++)
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	d9f4      	bls.n	8001db0 <charAddPadding+0x1c>
 8001dc6:	e054      	b.n	8001e72 <charAddPadding+0xde>
		}
	}
	else if(align == ALIGN_RIGHT)
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d11c      	bne.n	8001e08 <charAddPadding+0x74>
	{
		memmove(buffer+(LCD_COLS-size),buffer,size);// shift to the right
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	f1c3 0310 	rsb	r3, r3, #16
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	78ba      	ldrb	r2, [r7, #2]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 f9f6 	bl	80061d0 <memmove>
		for(uint8_t i = 0;i<LCD_COLS-size;i++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	73bb      	strb	r3, [r7, #14]
 8001de8:	e007      	b.n	8001dfa <charAddPadding+0x66>
		{
			buffer[i] = ' ';
 8001dea:	7bbb      	ldrb	r3, [r7, #14]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	2220      	movs	r2, #32
 8001df2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i<LCD_COLS-size;i++)
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	3301      	adds	r3, #1
 8001df8:	73bb      	strb	r3, [r7, #14]
 8001dfa:	7bba      	ldrb	r2, [r7, #14]
 8001dfc:	78bb      	ldrb	r3, [r7, #2]
 8001dfe:	f1c3 0310 	rsb	r3, r3, #16
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dbf1      	blt.n	8001dea <charAddPadding+0x56>
 8001e06:	e034      	b.n	8001e72 <charAddPadding+0xde>
		}
	}
	else if(align == ALIGN_CENTER)
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d130      	bne.n	8001e70 <charAddPadding+0xdc>
	{
		uint8_t start_place = (LCD_COLS - size)/2;//left side
 8001e0e:	78bb      	ldrb	r3, [r7, #2]
 8001e10:	f1c3 0310 	rsb	r3, r3, #16
 8001e14:	0fda      	lsrs	r2, r3, #31
 8001e16:	4413      	add	r3, r2
 8001e18:	105b      	asrs	r3, r3, #1
 8001e1a:	72fb      	strb	r3, [r7, #11]
		memmove(buffer+start_place,buffer,size);// shift to the right
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	78ba      	ldrb	r2, [r7, #2]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 f9d2 	bl	80061d0 <memmove>
		for(uint8_t i = 0;i<start_place;i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	737b      	strb	r3, [r7, #13]
 8001e30:	e007      	b.n	8001e42 <charAddPadding+0xae>
		{
			buffer[i] = ' ';
 8001e32:	7b7b      	ldrb	r3, [r7, #13]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	2220      	movs	r2, #32
 8001e3a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i<start_place;i++)
 8001e3c:	7b7b      	ldrb	r3, [r7, #13]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	737b      	strb	r3, [r7, #13]
 8001e42:	7b7a      	ldrb	r2, [r7, #13]
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3f3      	bcc.n	8001e32 <charAddPadding+0x9e>
		}
		start_place +=size;//right side
 8001e4a:	7afa      	ldrb	r2, [r7, #11]
 8001e4c:	78bb      	ldrb	r3, [r7, #2]
 8001e4e:	4413      	add	r3, r2
 8001e50:	72fb      	strb	r3, [r7, #11]
		for(uint8_t i = start_place;i<LCD_COLS;i++)
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	733b      	strb	r3, [r7, #12]
 8001e56:	e007      	b.n	8001e68 <charAddPadding+0xd4>
		{
			buffer[i] = ' ';
 8001e58:	7b3b      	ldrb	r3, [r7, #12]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	2220      	movs	r2, #32
 8001e60:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = start_place;i<LCD_COLS;i++)
 8001e62:	7b3b      	ldrb	r3, [r7, #12]
 8001e64:	3301      	adds	r3, #1
 8001e66:	733b      	strb	r3, [r7, #12]
 8001e68:	7b3b      	ldrb	r3, [r7, #12]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	d9f4      	bls.n	8001e58 <charAddPadding+0xc4>
 8001e6e:	e000      	b.n	8001e72 <charAddPadding+0xde>
		}
	}
	else
	{
		return;
 8001e70:	bf00      	nop
	}
}
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <PWM_Control_loop>:

void PWM_Control_loop(TIM_HandleTypeDef *htim, uint16_t *current, uint16_t voltage)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	4613      	mov	r3, r2
 8001e84:	80fb      	strh	r3, [r7, #6]
	if(*current > OVERCURRENT_VALUE)//overcurrent protection 2.5A
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001e8e:	d90a      	bls.n	8001ea6 <PWM_Control_loop+0x2e>
	{
		HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_SET);
 8001e90:	2201      	movs	r2, #1
 8001e92:	2104      	movs	r1, #4
 8001e94:	480e      	ldr	r0, [pc, #56]	@ (8001ed0 <PWM_Control_loop+0x58>)
 8001e96:	f002 fa8e 	bl	80043b6 <HAL_GPIO_WritePin>
		*current = 0;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	801a      	strh	r2, [r3, #0]
		OverCurrent_indication = 1;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <PWM_Control_loop+0x5c>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
	}

	if(Cutoff_voltage > voltage)
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <PWM_Control_loop+0x60>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d20a      	bcs.n	8001ec8 <PWM_Control_loop+0x50>
	{
		HAL_GPIO_WritePin(DISCHARGE_STOP_GPIO_Port, DISCHARGE_STOP_Pin,GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	4806      	ldr	r0, [pc, #24]	@ (8001ed0 <PWM_Control_loop+0x58>)
 8001eb8:	f002 fa7d 	bl	80043b6 <HAL_GPIO_WritePin>
		STATE_MCU_CURRENT = FINISH;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <PWM_Control_loop+0x64>)
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	701a      	strb	r2, [r3, #0]
		STATE_MCU_PREVIOUS = DISCHARGE;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <PWM_Control_loop+0x68>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	701a      	strb	r2, [r3, #0]
	}
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010800 	.word	0x40010800
 8001ed4:	200001e5 	.word	0x200001e5
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	200000f8 	.word	0x200000f8
 8001ee0:	200000f9 	.word	0x200000f9

08001ee4 <HAL_GPIO_EXTI_Callback>:

//INTERRUPT CALLBACKS

//EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
	if(uwTick-last_button_time > BUTTON_DEBOUNCE_MS)
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x30>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x34>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b1e      	cmp	r3, #30
 8001efa:	d906      	bls.n	8001f0a <HAL_GPIO_EXTI_Callback+0x26>
	{
		button_activity = 1;
 8001efc:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x38>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
		last_button_time = uwTick;
 8001f02:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x30>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f08:	6013      	str	r3, [r2, #0]

	//IMPLEMENT THE STARTING PROCESS
	//	STATE_MCU_CURRENT = DISCHARGE;
	//	STATE_MCU_PREVIOUS = SETUP;

}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	200002f8 	.word	0x200002f8
 8001f18:	200001e8 	.word	0x200001e8
 8001f1c:	200001e4 	.word	0x200001e4

08001f20 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum[2] = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
	static uint16_t Current_BATT;
	static uint16_t Voltage; // for cutoff calculation only


	//AVERAGING
	for(uint16_t i = 0; i < (ADC_DMA_SIZE/2)-1; i=i+2)
 8001f32:	2300      	movs	r3, #0
 8001f34:	82fb      	strh	r3, [r7, #22]
 8001f36:	e011      	b.n	8001f5c <HAL_ADC_ConvHalfCpltCallback+0x3c>
	{
		adc_sum[0] += ADC_Values[i];//first channel
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8afa      	ldrh	r2, [r7, #22]
 8001f3c:	4950      	ldr	r1, [pc, #320]	@ (8002080 <HAL_ADC_ConvHalfCpltCallback+0x160>)
 8001f3e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
		adc_sum[1] += ADC_Values[i+1];//second channel
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	8afa      	ldrh	r2, [r7, #22]
 8001f4a:	3201      	adds	r2, #1
 8001f4c:	494c      	ldr	r1, [pc, #304]	@ (8002080 <HAL_ADC_ConvHalfCpltCallback+0x160>)
 8001f4e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f52:	4413      	add	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
	for(uint16_t i = 0; i < (ADC_DMA_SIZE/2)-1; i=i+2)
 8001f56:	8afb      	ldrh	r3, [r7, #22]
 8001f58:	3302      	adds	r3, #2
 8001f5a:	82fb      	strh	r3, [r7, #22]
 8001f5c:	8afb      	ldrh	r3, [r7, #22]
 8001f5e:	2b30      	cmp	r3, #48	@ 0x30
 8001f60:	d9ea      	bls.n	8001f38 <HAL_ADC_ConvHalfCpltCallback+0x18>
	}
	adc_sum[0] = 4*adc_sum[0]/ADC_DMA_SIZE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4a47      	ldr	r2, [pc, #284]	@ (8002084 <HAL_ADC_ConvHalfCpltCallback+0x164>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	60fb      	str	r3, [r7, #12]
	adc_sum[1] = 4*adc_sum[1]/ADC_DMA_SIZE;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4a43      	ldr	r2, [pc, #268]	@ (8002084 <HAL_ADC_ConvHalfCpltCallback+0x164>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	613b      	str	r3, [r7, #16]


	//CURRENT AND MAH CONVERSION
	Current_BATT = 3300*adc_sum[1]/R_load/ADC_steps;//convert to mA
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fa2b 	bl	80003e4 <__aeabi_ui2d>
 8001f8e:	a33a      	add	r3, pc, #232	@ (adr r3, 8002078 <HAL_ADC_ConvHalfCpltCallback+0x158>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fbca 	bl	800072c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	4b38      	ldr	r3, [pc, #224]	@ (8002088 <HAL_ADC_ConvHalfCpltCallback+0x168>)
 8001fa6:	f7fe fbc1 	bl	800072c <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fca3 	bl	80008fc <__aeabi_d2uiz>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b34      	ldr	r3, [pc, #208]	@ (800208c <HAL_ADC_ConvHalfCpltCallback+0x16c>)
 8001fbc:	801a      	strh	r2, [r3, #0]
	Voltage = (uint16_t)((Vdda*adc_sum[0])*1000/ADC_steps*R_divider_multiplier);//in mV
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fdc1 	bl	8000b48 <__aeabi_ui2f>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <HAL_ADC_ConvHalfCpltCallback+0x170>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f7fe fe12 	bl	8000bf8 <__aeabi_fmul>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	492f      	ldr	r1, [pc, #188]	@ (8002094 <HAL_ADC_ConvHalfCpltCallback+0x174>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fe0d 	bl	8000bf8 <__aeabi_fmul>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe febb 	bl	8000d60 <__aeabi_fdiv>
 8001fea:	4603      	mov	r3, r0
 8001fec:	492a      	ldr	r1, [pc, #168]	@ (8002098 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe feb6 	bl	8000d60 <__aeabi_fdiv>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe ff4e 	bl	8000e98 <__aeabi_f2uiz>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b26      	ldr	r3, [pc, #152]	@ (800209c <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 8002002:	801a      	strh	r2, [r3, #0]
	PWM_Control_loop(&htim2,&Current_BATT,Voltage);
 8002004:	4b25      	ldr	r3, [pc, #148]	@ (800209c <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4920      	ldr	r1, [pc, #128]	@ (800208c <HAL_ADC_ConvHalfCpltCallback+0x16c>)
 800200c:	4824      	ldr	r0, [pc, #144]	@ (80020a0 <HAL_ADC_ConvHalfCpltCallback+0x180>)
 800200e:	f7ff ff33 	bl	8001e78 <PWM_Control_loop>
	DischargeDisplayData.capacity_mah += Current_BATT*MAH_CONVERSION;
 8002012:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <HAL_ADC_ConvHalfCpltCallback+0x184>)
 8002014:	689c      	ldr	r4, [r3, #8]
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_ADC_ConvHalfCpltCallback+0x16c>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fd98 	bl	8000b50 <__aeabi_i2f>
 8002020:	4603      	mov	r3, r0
 8002022:	4921      	ldr	r1, [pc, #132]	@ (80020a8 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fde7 	bl	8000bf8 <__aeabi_fmul>
 800202a:	4603      	mov	r3, r0
 800202c:	4619      	mov	r1, r3
 800202e:	4620      	mov	r0, r4
 8002030:	f7fe fcda 	bl	80009e8 <__addsf3>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <HAL_ADC_ConvHalfCpltCallback+0x184>)
 800203a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	bf00      	nop

	//defensive guard band
	__disable_irq();
	ADC_VOLTAGE_ACCUM += adc_sum[0];
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a18      	ldr	r2, [pc, #96]	@ (80020ac <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 800204a:	6013      	str	r3, [r2, #0]
	ADC_CURRENT_ACCUM += adc_sum[1];
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a16      	ldr	r2, [pc, #88]	@ (80020b0 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8002056:	6013      	str	r3, [r2, #0]
	ADC_READING_COUNTER+=1;
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <HAL_ADC_ConvHalfCpltCallback+0x194>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	3301      	adds	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_ADC_ConvHalfCpltCallback+0x194>)
 8002064:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002066:	b662      	cpsie	i
}
 8002068:	bf00      	nop
	__enable_irq();

	//printf("HalfCallback %lu",uwTick);
}
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	bf00      	nop
 8002074:	f3af 8000 	nop.w
 8002078:	c28f5c29 	.word	0xc28f5c29
 800207c:	3fcc28f5 	.word	0x3fcc28f5
 8002080:	2000011c 	.word	0x2000011c
 8002084:	51eb851f 	.word	0x51eb851f
 8002088:	40b00000 	.word	0x40b00000
 800208c:	20000212 	.word	0x20000212
 8002090:	20000000 	.word	0x20000000
 8002094:	447a0000 	.word	0x447a0000
 8002098:	3e3da12f 	.word	0x3e3da12f
 800209c:	20000214 	.word	0x20000214
 80020a0:	20000220 	.word	0x20000220
 80020a4:	200001f8 	.word	0x200001f8
 80020a8:	36690453 	.word	0x36690453
 80020ac:	200001ec 	.word	0x200001ec
 80020b0:	200001f0 	.word	0x200001f0
 80020b4:	200001f4 	.word	0x200001f4

080020b8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum[2] = {0};
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
	static uint16_t Current_BATT;
	static uint16_t Voltage; // for cutoff calculation only

	for(uint16_t i = (ADC_DMA_SIZE/2); i < ADC_DMA_SIZE; i=i+2)
 80020ca:	2332      	movs	r3, #50	@ 0x32
 80020cc:	82fb      	strh	r3, [r7, #22]
 80020ce:	e011      	b.n	80020f4 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		adc_sum[0] += ADC_Values[i];//first channel
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8afa      	ldrh	r2, [r7, #22]
 80020d4:	4950      	ldr	r1, [pc, #320]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x160>)
 80020d6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
		adc_sum[1] += ADC_Values[i+1];//second channel
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	8afa      	ldrh	r2, [r7, #22]
 80020e2:	3201      	adds	r2, #1
 80020e4:	494c      	ldr	r1, [pc, #304]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x160>)
 80020e6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80020ea:	4413      	add	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
	for(uint16_t i = (ADC_DMA_SIZE/2); i < ADC_DMA_SIZE; i=i+2)
 80020ee:	8afb      	ldrh	r3, [r7, #22]
 80020f0:	3302      	adds	r3, #2
 80020f2:	82fb      	strh	r3, [r7, #22]
 80020f4:	8afb      	ldrh	r3, [r7, #22]
 80020f6:	2b63      	cmp	r3, #99	@ 0x63
 80020f8:	d9ea      	bls.n	80020d0 <HAL_ADC_ConvCpltCallback+0x18>
	}
	//AVERAGES
	adc_sum[0] = 4*adc_sum[0]/ADC_DMA_SIZE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4a47      	ldr	r2, [pc, #284]	@ (800221c <HAL_ADC_ConvCpltCallback+0x164>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	60fb      	str	r3, [r7, #12]
	adc_sum[1] = 4*adc_sum[1]/ADC_DMA_SIZE;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4a43      	ldr	r2, [pc, #268]	@ (800221c <HAL_ADC_ConvCpltCallback+0x164>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	613b      	str	r3, [r7, #16]

	//CURRENT AND MAH CONVERSION
	Current_BATT = 3300*adc_sum[1]/R_load/ADC_steps;//convert to mA
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f95f 	bl	80003e4 <__aeabi_ui2d>
 8002126:	a33a      	add	r3, pc, #232	@ (adr r3, 8002210 <HAL_ADC_ConvCpltCallback+0x158>)
 8002128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212c:	f7fe fafe 	bl	800072c <__aeabi_ddiv>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <HAL_ADC_ConvCpltCallback+0x168>)
 800213e:	f7fe faf5 	bl	800072c <__aeabi_ddiv>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fbd7 	bl	80008fc <__aeabi_d2uiz>
 800214e:	4603      	mov	r3, r0
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x16c>)
 8002154:	801a      	strh	r2, [r3, #0]
	Voltage = (uint16_t)((Vdda*adc_sum[0])*1000/ADC_steps*R_divider_multiplier);//in mV
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fcf5 	bl	8000b48 <__aeabi_ui2f>
 800215e:	4602      	mov	r2, r0
 8002160:	4b31      	ldr	r3, [pc, #196]	@ (8002228 <HAL_ADC_ConvCpltCallback+0x170>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f7fe fd46 	bl	8000bf8 <__aeabi_fmul>
 800216c:	4603      	mov	r3, r0
 800216e:	492f      	ldr	r1, [pc, #188]	@ (800222c <HAL_ADC_ConvCpltCallback+0x174>)
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fd41 	bl	8000bf8 <__aeabi_fmul>
 8002176:	4603      	mov	r3, r0
 8002178:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fdef 	bl	8000d60 <__aeabi_fdiv>
 8002182:	4603      	mov	r3, r0
 8002184:	492a      	ldr	r1, [pc, #168]	@ (8002230 <HAL_ADC_ConvCpltCallback+0x178>)
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fdea 	bl	8000d60 <__aeabi_fdiv>
 800218c:	4603      	mov	r3, r0
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fe82 	bl	8000e98 <__aeabi_f2uiz>
 8002194:	4603      	mov	r3, r0
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b26      	ldr	r3, [pc, #152]	@ (8002234 <HAL_ADC_ConvCpltCallback+0x17c>)
 800219a:	801a      	strh	r2, [r3, #0]
	PWM_Control_loop(&htim2,&Current_BATT,Voltage);
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <HAL_ADC_ConvCpltCallback+0x17c>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4920      	ldr	r1, [pc, #128]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x16c>)
 80021a4:	4824      	ldr	r0, [pc, #144]	@ (8002238 <HAL_ADC_ConvCpltCallback+0x180>)
 80021a6:	f7ff fe67 	bl	8001e78 <PWM_Control_loop>
	DischargeDisplayData.capacity_mah += Current_BATT*MAH_CONVERSION;
 80021aa:	4b24      	ldr	r3, [pc, #144]	@ (800223c <HAL_ADC_ConvCpltCallback+0x184>)
 80021ac:	689c      	ldr	r4, [r3, #8]
 80021ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x16c>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fccc 	bl	8000b50 <__aeabi_i2f>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4921      	ldr	r1, [pc, #132]	@ (8002240 <HAL_ADC_ConvCpltCallback+0x188>)
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fd1b 	bl	8000bf8 <__aeabi_fmul>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4619      	mov	r1, r3
 80021c6:	4620      	mov	r0, r4
 80021c8:	f7fe fc0e 	bl	80009e8 <__addsf3>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <HAL_ADC_ConvCpltCallback+0x184>)
 80021d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d4:	b672      	cpsid	i
}
 80021d6:	bf00      	nop

	//defensive guard band
	__disable_irq();
	ADC_VOLTAGE_ACCUM += adc_sum[0];
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <HAL_ADC_ConvCpltCallback+0x18c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a18      	ldr	r2, [pc, #96]	@ (8002244 <HAL_ADC_ConvCpltCallback+0x18c>)
 80021e2:	6013      	str	r3, [r2, #0]
	ADC_CURRENT_ACCUM += adc_sum[1];
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <HAL_ADC_ConvCpltCallback+0x190>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a16      	ldr	r2, [pc, #88]	@ (8002248 <HAL_ADC_ConvCpltCallback+0x190>)
 80021ee:	6013      	str	r3, [r2, #0]
	ADC_READING_COUNTER+=1;
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_ADC_ConvCpltCallback+0x194>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	4b14      	ldr	r3, [pc, #80]	@ (800224c <HAL_ADC_ConvCpltCallback+0x194>)
 80021fc:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021fe:	b662      	cpsie	i
}
 8002200:	bf00      	nop
	__enable_irq();

	//PWM CONTROL LOOP
	//printf("FullCallback %lu",uwTick);
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd90      	pop	{r4, r7, pc}
 800220a:	bf00      	nop
 800220c:	f3af 8000 	nop.w
 8002210:	c28f5c29 	.word	0xc28f5c29
 8002214:	3fcc28f5 	.word	0x3fcc28f5
 8002218:	2000011c 	.word	0x2000011c
 800221c:	51eb851f 	.word	0x51eb851f
 8002220:	40b00000 	.word	0x40b00000
 8002224:	20000216 	.word	0x20000216
 8002228:	20000000 	.word	0x20000000
 800222c:	447a0000 	.word	0x447a0000
 8002230:	3e3da12f 	.word	0x3e3da12f
 8002234:	20000218 	.word	0x20000218
 8002238:	20000220 	.word	0x20000220
 800223c:	200001f8 	.word	0x200001f8
 8002240:	36690453 	.word	0x36690453
 8002244:	200001ec 	.word	0x200001ec
 8002248:	200001f0 	.word	0x200001f0
 800224c:	200001f4 	.word	0x200001f4

08002250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8002258:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800225c:	4803      	ldr	r0, [pc, #12]	@ (800226c <Error_Handler+0x1c>)
 800225e:	f002 f8c2 	bl	80043e6 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002262:	20c8      	movs	r0, #200	@ 0xc8
 8002264:	f000 fae4 	bl	8002830 <HAL_Delay>
		HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8002268:	bf00      	nop
 800226a:	e7f5      	b.n	8002258 <Error_Handler+0x8>
 800226c:	40011000 	.word	0x40011000

08002270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <HAL_MspInit+0x5c>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <HAL_MspInit+0x5c>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6193      	str	r3, [r2, #24]
 8002282:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_MspInit+0x5c>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <HAL_MspInit+0x5c>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a0e      	ldr	r2, [pc, #56]	@ (80022cc <HAL_MspInit+0x5c>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_MspInit+0x5c>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_MspInit+0x60>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_MspInit+0x60>)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000

080022d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <NMI_Handler+0x4>

080022dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <HardFault_Handler+0x4>

080022e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <MemManage_Handler+0x4>

080022ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <BusFault_Handler+0x4>

080022f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <UsageFault_Handler+0x4>

080022fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002324:	f000 fa68 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_mode_Pin);
 8002330:	2002      	movs	r0, #2
 8002332:	f002 f871 	bl	8004418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <DMA1_Channel1_IRQHandler+0x10>)
 8002342:	f001 fd69 	bl	8003e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200000b4 	.word	0x200000b4

08002350 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <ADC1_2_IRQHandler+0x10>)
 8002356:	f000 fc91 	bl	8002c7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000084 	.word	0x20000084

08002364 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <TIM3_IRQHandler+0x10>)
 800236a:	f003 f803 	bl	8005374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000268 	.word	0x20000268

08002378 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_sub_Pin);
 800237c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002380:	f002 f84a 	bl	8004418 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_add_Pin);
 8002384:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002388:	f002 f846 	bl	8004418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002398:	4a14      	ldr	r2, [pc, #80]	@ (80023ec <_sbrk+0x5c>)
 800239a:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <_sbrk+0x60>)
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a4:	4b13      	ldr	r3, [pc, #76]	@ (80023f4 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <_sbrk+0x64>)
 80023ae:	4a12      	ldr	r2, [pc, #72]	@ (80023f8 <_sbrk+0x68>)
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023b2:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d207      	bcs.n	80023d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c0:	f003 ff28 	bl	8006214 <__errno>
 80023c4:	4603      	mov	r3, r0
 80023c6:	220c      	movs	r2, #12
 80023c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	e009      	b.n	80023e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d0:	4b08      	ldr	r3, [pc, #32]	@ (80023f4 <_sbrk+0x64>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d6:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <_sbrk+0x64>)
 80023e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023e2:	68fb      	ldr	r3, [r7, #12]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20005000 	.word	0x20005000
 80023f0:	00000200 	.word	0x00000200
 80023f4:	2000021c 	.word	0x2000021c
 80023f8:	20000448 	.word	0x20000448

080023fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08e      	sub	sp, #56	@ 0x38
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241c:	f107 0320 	add.w	r3, r7, #32
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
 8002434:	615a      	str	r2, [r3, #20]
 8002436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002438:	4b2c      	ldr	r3, [pc, #176]	@ (80024ec <MX_TIM2_Init+0xe4>)
 800243a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800243e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002440:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <MX_TIM2_Init+0xe4>)
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	4b29      	ldr	r3, [pc, #164]	@ (80024ec <MX_TIM2_Init+0xe4>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 800244c:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <MX_TIM2_Init+0xe4>)
 800244e:	22c7      	movs	r2, #199	@ 0xc7
 8002450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002452:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <MX_TIM2_Init+0xe4>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002458:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <MX_TIM2_Init+0xe4>)
 800245a:	2280      	movs	r2, #128	@ 0x80
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800245e:	4823      	ldr	r0, [pc, #140]	@ (80024ec <MX_TIM2_Init+0xe4>)
 8002460:	f002 fd5a 	bl	8004f18 <HAL_TIM_Base_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800246a:	f7ff fef1 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002472:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002474:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002478:	4619      	mov	r1, r3
 800247a:	481c      	ldr	r0, [pc, #112]	@ (80024ec <MX_TIM2_Init+0xe4>)
 800247c:	f003 f92c 	bl	80056d8 <HAL_TIM_ConfigClockSource>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002486:	f7ff fee3 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800248a:	4818      	ldr	r0, [pc, #96]	@ (80024ec <MX_TIM2_Init+0xe4>)
 800248c:	f002 fe14 	bl	80050b8 <HAL_TIM_PWM_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002496:	f7ff fedb 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024a2:	f107 0320 	add.w	r3, r7, #32
 80024a6:	4619      	mov	r1, r3
 80024a8:	4810      	ldr	r0, [pc, #64]	@ (80024ec <MX_TIM2_Init+0xe4>)
 80024aa:	f003 fcb9 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80024b4:	f7ff fecc 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b8:	2360      	movs	r3, #96	@ 0x60
 80024ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	220c      	movs	r2, #12
 80024cc:	4619      	mov	r1, r3
 80024ce:	4807      	ldr	r0, [pc, #28]	@ (80024ec <MX_TIM2_Init+0xe4>)
 80024d0:	f003 f840 	bl	8005554 <HAL_TIM_PWM_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80024da:	f7ff feb9 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024de:	4803      	ldr	r0, [pc, #12]	@ (80024ec <MX_TIM2_Init+0xe4>)
 80024e0:	f000 f8ee 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 80024e4:	bf00      	nop
 80024e6:	3738      	adds	r7, #56	@ 0x38
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000220 	.word	0x20000220

080024f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	463b      	mov	r3, r7
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800250c:	4b1d      	ldr	r3, [pc, #116]	@ (8002584 <MX_TIM3_Init+0x94>)
 800250e:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <MX_TIM3_Init+0x98>)
 8002510:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8002512:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <MX_TIM3_Init+0x94>)
 8002514:	2207      	movs	r2, #7
 8002516:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002518:	4b1a      	ldr	r3, [pc, #104]	@ (8002584 <MX_TIM3_Init+0x94>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800251e:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <MX_TIM3_Init+0x94>)
 8002520:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002524:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002526:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <MX_TIM3_Init+0x94>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252c:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <MX_TIM3_Init+0x94>)
 800252e:	2200      	movs	r2, #0
 8002530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002532:	4814      	ldr	r0, [pc, #80]	@ (8002584 <MX_TIM3_Init+0x94>)
 8002534:	f002 fcf0 	bl	8004f18 <HAL_TIM_Base_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800253e:	f7ff fe87 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002548:	f107 0308 	add.w	r3, r7, #8
 800254c:	4619      	mov	r1, r3
 800254e:	480d      	ldr	r0, [pc, #52]	@ (8002584 <MX_TIM3_Init+0x94>)
 8002550:	f003 f8c2 	bl	80056d8 <HAL_TIM_ConfigClockSource>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800255a:	f7ff fe79 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800255e:	2320      	movs	r3, #32
 8002560:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002566:	463b      	mov	r3, r7
 8002568:	4619      	mov	r1, r3
 800256a:	4806      	ldr	r0, [pc, #24]	@ (8002584 <MX_TIM3_Init+0x94>)
 800256c:	f003 fc58 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002576:	f7ff fe6b 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000268 	.word	0x20000268
 8002588:	40000400 	.word	0x40000400

0800258c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	463b      	mov	r3, r7
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <MX_TIM4_Init+0x94>)
 80025aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002624 <MX_TIM4_Init+0x98>)
 80025ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 80025ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <MX_TIM4_Init+0x94>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <MX_TIM4_Init+0x94>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <MX_TIM4_Init+0x94>)
 80025bc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80025c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c2:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <MX_TIM4_Init+0x94>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c8:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <MX_TIM4_Init+0x94>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ce:	4814      	ldr	r0, [pc, #80]	@ (8002620 <MX_TIM4_Init+0x94>)
 80025d0:	f002 fca2 	bl	8004f18 <HAL_TIM_Base_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025da:	f7ff fe39 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	4619      	mov	r1, r3
 80025ea:	480d      	ldr	r0, [pc, #52]	@ (8002620 <MX_TIM4_Init+0x94>)
 80025ec:	f003 f874 	bl	80056d8 <HAL_TIM_ConfigClockSource>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80025f6:	f7ff fe2b 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002602:	463b      	mov	r3, r7
 8002604:	4619      	mov	r1, r3
 8002606:	4806      	ldr	r0, [pc, #24]	@ (8002620 <MX_TIM4_Init+0x94>)
 8002608:	f003 fc0a 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002612:	f7ff fe1d 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200002b0 	.word	0x200002b0
 8002624:	40000800 	.word	0x40000800

08002628 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002638:	d10c      	bne.n	8002654 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263a:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <HAL_TIM_Base_MspInit+0x8c>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4a1d      	ldr	r2, [pc, #116]	@ (80026b4 <HAL_TIM_Base_MspInit+0x8c>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	61d3      	str	r3, [r2, #28]
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_TIM_Base_MspInit+0x8c>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002652:	e02a      	b.n	80026aa <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a17      	ldr	r2, [pc, #92]	@ (80026b8 <HAL_TIM_Base_MspInit+0x90>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d114      	bne.n	8002688 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_TIM_Base_MspInit+0x8c>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <HAL_TIM_Base_MspInit+0x8c>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <HAL_TIM_Base_MspInit+0x8c>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	201d      	movs	r0, #29
 800267c:	f001 fa9f 	bl	8003bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002680:	201d      	movs	r0, #29
 8002682:	f001 fab8 	bl	8003bf6 <HAL_NVIC_EnableIRQ>
}
 8002686:	e010      	b.n	80026aa <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_TIM_Base_MspInit+0x94>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10b      	bne.n	80026aa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002692:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <HAL_TIM_Base_MspInit+0x8c>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a07      	ldr	r2, [pc, #28]	@ (80026b4 <HAL_TIM_Base_MspInit+0x8c>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_TIM_Base_MspInit+0x8c>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40000800 	.word	0x40000800

080026c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026de:	d117      	bne.n	8002710 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <HAL_TIM_MspPostInit+0x58>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002718 <HAL_TIM_MspPostInit+0x58>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	6193      	str	r3, [r2, #24]
 80026ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_TIM_MspPostInit+0x58>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOSFET_PWM_Pin;
 80026f8:	2308      	movs	r3, #8
 80026fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOSFET_PWM_GPIO_Port, &GPIO_InitStruct);
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	4619      	mov	r1, r3
 800270a:	4804      	ldr	r0, [pc, #16]	@ (800271c <HAL_TIM_MspPostInit+0x5c>)
 800270c:	f001 fcb8 	bl	8004080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	40010800 	.word	0x40010800

08002720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002720:	f7ff fe6c 	bl	80023fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002724:	480b      	ldr	r0, [pc, #44]	@ (8002754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002726:	490c      	ldr	r1, [pc, #48]	@ (8002758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002728:	4a0c      	ldr	r2, [pc, #48]	@ (800275c <LoopFillZerobss+0x16>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800273c:	4c09      	ldr	r4, [pc, #36]	@ (8002764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800274a:	f003 fd69 	bl	8006220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274e:	f7fe fd77 	bl	8001240 <main>
  bx lr
 8002752:	4770      	bx	lr
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800275c:	08006c50 	.word	0x08006c50
  ldr r2, =_sbss
 8002760:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002764:	20000448 	.word	0x20000448

08002768 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <CAN1_RX1_IRQHandler>
	...

0800276c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <HAL_Init+0x28>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a07      	ldr	r2, [pc, #28]	@ (8002794 <HAL_Init+0x28>)
 8002776:	f043 0310 	orr.w	r3, r3, #16
 800277a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f001 fa13 	bl	8003ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002782:	200f      	movs	r0, #15
 8002784:	f000 f808 	bl	8002798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002788:	f7ff fd72 	bl	8002270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40022000 	.word	0x40022000

08002798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a0:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_InitTick+0x54>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_InitTick+0x58>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 fa2b 	bl	8003c12 <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f001 f9f3 	bl	8003bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	@ (80027f4 <HAL_InitTick+0x5c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	2000000c 	.word	0x2000000c
 80027f0:	20000014 	.word	0x20000014
 80027f4:	20000010 	.word	0x20000010

080027f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_IncTick+0x1c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_IncTick+0x20>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a03      	ldr	r2, [pc, #12]	@ (8002818 <HAL_IncTick+0x20>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	20000014 	.word	0x20000014
 8002818:	200002f8 	.word	0x200002f8

0800281c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return uwTick;
 8002820:	4b02      	ldr	r3, [pc, #8]	@ (800282c <HAL_GetTick+0x10>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	200002f8 	.word	0x200002f8

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff fff0 	bl	800281c <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d005      	beq.n	8002856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_Delay+0x44>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002856:	bf00      	nop
 8002858:	f7ff ffe0 	bl	800281c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	429a      	cmp	r2, r3
 8002866:	d8f7      	bhi.n	8002858 <HAL_Delay+0x28>
  {
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000014 	.word	0x20000014

08002878 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0be      	b.n	8002a18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe fb82 	bl	8000fc0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fc01 	bl	80030c4 <ADC_ConversionStop_Disable>
 80028c2:	4603      	mov	r3, r0
 80028c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 8099 	bne.w	8002a06 <HAL_ADC_Init+0x18e>
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 8095 	bne.w	8002a06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028e4:	f023 0302 	bic.w	r3, r3, #2
 80028e8:	f043 0202 	orr.w	r2, r3, #2
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	7b1b      	ldrb	r3, [r3, #12]
 80028fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002900:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4313      	orrs	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002910:	d003      	beq.n	800291a <HAL_ADC_Init+0xa2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d102      	bne.n	8002920 <HAL_ADC_Init+0xa8>
 800291a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800291e:	e000      	b.n	8002922 <HAL_ADC_Init+0xaa>
 8002920:	2300      	movs	r3, #0
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7d1b      	ldrb	r3, [r3, #20]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d119      	bne.n	8002964 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7b1b      	ldrb	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	3b01      	subs	r3, #1
 800293e:	035a      	lsls	r2, r3, #13
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e00b      	b.n	8002964 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	4b28      	ldr	r3, [pc, #160]	@ (8002a20 <HAL_ADC_Init+0x1a8>)
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	430b      	orrs	r3, r1
 800298a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002994:	d003      	beq.n	800299e <HAL_ADC_Init+0x126>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d104      	bne.n	80029a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	051b      	lsls	r3, r3, #20
 80029a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <HAL_ADC_Init+0x1ac>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d10b      	bne.n	80029e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029e2:	e018      	b.n	8002a16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	f023 0312 	bic.w	r3, r3, #18
 80029ec:	f043 0210 	orr.w	r2, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a04:	e007      	b.n	8002a16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	ffe1f7fd 	.word	0xffe1f7fd
 8002a24:	ff1f0efe 	.word	0xff1f0efe

08002a28 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a64      	ldr	r2, [pc, #400]	@ (8002bd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_ADC_Start_DMA+0x24>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a63      	ldr	r2, [pc, #396]	@ (8002bd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d106      	bne.n	8002a5a <HAL_ADC_Start_DMA+0x32>
 8002a4c:	4b60      	ldr	r3, [pc, #384]	@ (8002bd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 80b3 	bne.w	8002bc0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_Start_DMA+0x40>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e0ae      	b.n	8002bc6 <HAL_ADC_Start_DMA+0x19e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 facd 	bl	8003010 <ADC_Enable>
 8002a76:	4603      	mov	r3, r0
 8002a78:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 809a 	bne.w	8002bb6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_Start_DMA+0x84>
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d115      	bne.n	8002ad8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d026      	beq.n	8002b14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ace:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad6:	e01d      	b.n	8002b14 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a39      	ldr	r2, [pc, #228]	@ (8002bd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_ADC_Start_DMA+0xd0>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a38      	ldr	r2, [pc, #224]	@ (8002bd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d10d      	bne.n	8002b14 <HAL_ADC_Start_DMA+0xec>
 8002af8:	4b35      	ldr	r3, [pc, #212]	@ (8002bd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	f023 0206 	bic.w	r2, r3, #6
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a25      	ldr	r2, [pc, #148]	@ (8002bd8 <HAL_ADC_Start_DMA+0x1b0>)
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a24      	ldr	r2, [pc, #144]	@ (8002bdc <HAL_ADC_Start_DMA+0x1b4>)
 8002b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a23      	ldr	r2, [pc, #140]	@ (8002be0 <HAL_ADC_Start_DMA+0x1b8>)
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0202 	mvn.w	r2, #2
 8002b5c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b6c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a18      	ldr	r0, [r3, #32]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	334c      	adds	r3, #76	@ 0x4c
 8002b78:	4619      	mov	r1, r3
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f001 f8af 	bl	8003ce0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002b8c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002b90:	d108      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002ba0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002ba2:	e00f      	b.n	8002bc4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002bb2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002bb4:	e006      	b.n	8002bc4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002bbe:	e001      	b.n	8002bc4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40012400 	.word	0x40012400
 8002bd4:	40012800 	.word	0x40012800
 8002bd8:	08003147 	.word	0x08003147
 8002bdc:	080031c3 	.word	0x080031c3
 8002be0:	080031df 	.word	0x080031df

08002be4 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_Stop_DMA+0x1a>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e03a      	b.n	8002c74 <HAL_ADC_Stop_DMA+0x90>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa5c 	bl	80030c4 <ADC_ConversionStop_Disable>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d129      	bne.n	8002c6a <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c24:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d11a      	bne.n	8002c6a <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f001 f8b1 	bl	8003da0 <HAL_DMA_Abort>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c5c:	e005      	b.n	8002c6a <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d03e      	beq.n	8002d1c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d039      	beq.n	8002d1c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002cce:	d11d      	bne.n	8002d0c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d119      	bne.n	8002d0c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0220 	bic.w	r2, r2, #32
 8002ce6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff f9d3 	bl	80020b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f06f 0212 	mvn.w	r2, #18
 8002d1a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d04d      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d048      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002d52:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002d56:	d012      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d125      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d70:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d74:	d11d      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d119      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d8c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d105      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fc88 	bl	80036c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 020c 	mvn.w	r2, #12
 8002dc0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f809 	bl	8002dfa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0201 	mvn.w	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x20>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e0dc      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x1da>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b06      	cmp	r3, #6
 8002e4e:	d81c      	bhi.n	8002e8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	3b05      	subs	r3, #5
 8002e62:	221f      	movs	r2, #31
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	4019      	ands	r1, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	3b05      	subs	r3, #5
 8002e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e88:	e03c      	b.n	8002f04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d81c      	bhi.n	8002ecc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3b23      	subs	r3, #35	@ 0x23
 8002ea4:	221f      	movs	r2, #31
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	4019      	ands	r1, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	3b23      	subs	r3, #35	@ 0x23
 8002ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eca:	e01b      	b.n	8002f04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	3b41      	subs	r3, #65	@ 0x41
 8002ede:	221f      	movs	r2, #31
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4019      	ands	r1, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b41      	subs	r3, #65	@ 0x41
 8002ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b09      	cmp	r3, #9
 8002f0a:	d91c      	bls.n	8002f46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68d9      	ldr	r1, [r3, #12]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3b1e      	subs	r3, #30
 8002f1e:	2207      	movs	r2, #7
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	4019      	ands	r1, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6898      	ldr	r0, [r3, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	3b1e      	subs	r3, #30
 8002f38:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]
 8002f44:	e019      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6919      	ldr	r1, [r3, #16]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	2207      	movs	r2, #7
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	4019      	ands	r1, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6898      	ldr	r0, [r3, #8]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d003      	beq.n	8002f8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f86:	2b11      	cmp	r3, #17
 8002f88:	d132      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003004 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d125      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d126      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002fb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d11a      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fba:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <HAL_ADC_ConfigChannel+0x1e8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a13      	ldr	r2, [pc, #76]	@ (800300c <HAL_ADC_ConfigChannel+0x1ec>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	0c9a      	lsrs	r2, r3, #18
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fd0:	e002      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f9      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x1b2>
 8002fde:	e007      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40012400 	.word	0x40012400
 8003008:	2000000c 	.word	0x2000000c
 800300c:	431bde83 	.word	0x431bde83

08003010 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d040      	beq.n	80030b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800303e:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <ADC_Enable+0xac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1f      	ldr	r2, [pc, #124]	@ (80030c0 <ADC_Enable+0xb0>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	0c9b      	lsrs	r3, r3, #18
 800304a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800304c:	e002      	b.n	8003054 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3b01      	subs	r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f9      	bne.n	800304e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800305a:	f7ff fbdf 	bl	800281c <HAL_GetTick>
 800305e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003060:	e01f      	b.n	80030a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003062:	f7ff fbdb 	bl	800281c <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d918      	bls.n	80030a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d011      	beq.n	80030a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	f043 0210 	orr.w	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308e:	f043 0201 	orr.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e007      	b.n	80030b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d1d8      	bne.n	8003062 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2000000c 	.word	0x2000000c
 80030c0:	431bde83 	.word	0x431bde83

080030c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d12e      	bne.n	800313c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030ee:	f7ff fb95 	bl	800281c <HAL_GetTick>
 80030f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030f4:	e01b      	b.n	800312e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030f6:	f7ff fb91 	bl	800281c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d914      	bls.n	800312e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d10d      	bne.n	800312e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e007      	b.n	800313e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d0dc      	beq.n	80030f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800315c:	2b00      	cmp	r3, #0
 800315e:	d127      	bne.n	80031b0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003176:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800317a:	d115      	bne.n	80031a8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003180:	2b00      	cmp	r3, #0
 8003182:	d111      	bne.n	80031a8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7fe ff85 	bl	80020b8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80031ae:	e004      	b.n	80031ba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7fe fea5 	bl	8001f20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7ff fe01 	bl	8002e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADCEx_Calibration_Start+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e097      	b.n	8003362 <HAL_ADCEx_Calibration_Start+0x14e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ff42 	bl	80030c4 <ADC_ConversionStop_Disable>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fee3 	bl	8003010 <ADC_Enable>
 800324a:	4603      	mov	r3, r0
 800324c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f040 8081 	bne.w	8003358 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800325e:	f023 0302 	bic.w	r3, r3, #2
 8003262:	f043 0202 	orr.w	r2, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800326a:	4b40      	ldr	r3, [pc, #256]	@ (800336c <HAL_ADCEx_Calibration_Start+0x158>)
 800326c:	681c      	ldr	r4, [r3, #0]
 800326e:	2002      	movs	r0, #2
 8003270:	f001 fd9c 	bl	8004dac <HAL_RCCEx_GetPeriphCLKFreq>
 8003274:	4603      	mov	r3, r0
 8003276:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800327a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800327c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800327e:	e002      	b.n	8003286 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f9      	bne.n	8003280 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0208 	orr.w	r2, r2, #8
 800329a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800329c:	f7ff fabe 	bl	800281c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80032a2:	e01b      	b.n	80032dc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80032a4:	f7ff faba 	bl	800281c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b0a      	cmp	r3, #10
 80032b0:	d914      	bls.n	80032dc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	f023 0312 	bic.w	r3, r3, #18
 80032c8:	f043 0210 	orr.w	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e042      	b.n	8003362 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1dc      	bne.n	80032a4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0204 	orr.w	r2, r2, #4
 80032f8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80032fa:	f7ff fa8f 	bl	800281c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003300:	e01b      	b.n	800333a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003302:	f7ff fa8b 	bl	800281c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b0a      	cmp	r3, #10
 800330e:	d914      	bls.n	800333a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00d      	beq.n	800333a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	f023 0312 	bic.w	r3, r3, #18
 8003326:	f043 0210 	orr.w	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e013      	b.n	8003362 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1dc      	bne.n	8003302 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	f023 0303 	bic.w	r3, r3, #3
 8003350:	f043 0201 	orr.w	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003360:	7dfb      	ldrb	r3, [r7, #23]
}
 8003362:	4618      	mov	r0, r3
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	bf00      	nop
 800336c:	2000000c 	.word	0x2000000c

08003370 <HAL_ADCEx_InjectedStart>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_ADCEx_InjectedStart+0x1a>
 8003386:	2302      	movs	r3, #2
 8003388:	e070      	b.n	800346c <HAL_ADCEx_InjectedStart+0xfc>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff fe3c 	bl	8003010 <ADC_Enable>
 8003398:	4603      	mov	r3, r0
 800339a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d15f      	bne.n	8003462 <HAL_ADCEx_InjectedStart+0xf2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2e      	ldr	r2, [pc, #184]	@ (8003474 <HAL_ADCEx_InjectedStart+0x104>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d105      	bne.n	80033cc <HAL_ADCEx_InjectedStart+0x5c>
 80033c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003478 <HAL_ADCEx_InjectedStart+0x108>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d106      	bne.n	80033da <HAL_ADCEx_InjectedStart+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80033d8:	e005      	b.n	80033e6 <HAL_ADCEx_InjectedStart+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <HAL_ADCEx_InjectedStart+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0204 	mvn.w	r2, #4
 8003408:	601a      	str	r2, [r3, #0]
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
    /* slave, ADC is enabled only (conversion is not started). If ADC is      */
    /* master, ADC is enabled and conversion is started.                      */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d128      	bne.n	800346a <HAL_ADCEx_InjectedStart+0xfa>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003422:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003426:	d113      	bne.n	8003450 <HAL_ADCEx_InjectedStart+0xe0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800342c:	4a11      	ldr	r2, [pc, #68]	@ (8003474 <HAL_ADCEx_InjectedStart+0x104>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d105      	bne.n	800343e <HAL_ADCEx_InjectedStart+0xce>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003432:	4b11      	ldr	r3, [pc, #68]	@ (8003478 <HAL_ADCEx_InjectedStart+0x108>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <HAL_ADCEx_InjectedStart+0xe0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 1202 	orr.w	r2, r2, #2129920	@ 0x208000
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	e00c      	b.n	800346a <HAL_ADCEx_InjectedStart+0xfa>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	e003      	b.n	800346a <HAL_ADCEx_InjectedStart+0xfa>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40012800 	.word	0x40012800
 8003478:	40012400 	.word	0x40012400

0800347c <HAL_ADCEx_InjectedPollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Get timeout */
  tickstart = HAL_GetTick();  
 800348e:	f7ff f9c5 	bl	800281c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag JEOC is not set after each conversion, no timeout status can  */
  /*    be set.                                                               */
  if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d12a      	bne.n	80034f8 <HAL_ADCEx_InjectedPollForConversion+0x7c>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80034a2:	e021      	b.n	80034e8 <HAL_ADCEx_InjectedPollForConversion+0x6c>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d01d      	beq.n	80034e8 <HAL_ADCEx_InjectedPollForConversion+0x6c>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_ADCEx_InjectedPollForConversion+0x46>
 80034b2:	f7ff f9b3 	bl	800281c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d212      	bcs.n	80034e8 <HAL_ADCEx_InjectedPollForConversion+0x6c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_ADCEx_InjectedPollForConversion+0x6c>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0b1      	b.n	800364c <HAL_ADCEx_InjectedPollForConversion+0x1d0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0d6      	beq.n	80034a4 <HAL_ADCEx_InjectedPollForConversion+0x28>
 80034f6:	e070      	b.n	80035da <HAL_ADCEx_InjectedPollForConversion+0x15e>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034f8:	4b56      	ldr	r3, [pc, #344]	@ (8003654 <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 80034fa:	681c      	ldr	r4, [r3, #0]
 80034fc:	2002      	movs	r0, #2
 80034fe:	f001 fc55 	bl	8004dac <HAL_RCCEx_GetPeriphCLKFreq>
 8003502:	4603      	mov	r3, r0
 8003504:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6919      	ldr	r1, [r3, #16]
 800350e:	4b52      	ldr	r3, [pc, #328]	@ (8003658 <HAL_ADCEx_InjectedPollForConversion+0x1dc>)
 8003510:	400b      	ands	r3, r1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d118      	bne.n	8003548 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68d9      	ldr	r1, [r3, #12]
 800351c:	4b4f      	ldr	r3, [pc, #316]	@ (800365c <HAL_ADCEx_InjectedPollForConversion+0x1e0>)
 800351e:	400b      	ands	r3, r1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d111      	bne.n	8003548 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6919      	ldr	r1, [r3, #16]
 800352a:	4b4d      	ldr	r3, [pc, #308]	@ (8003660 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 800352c:	400b      	ands	r3, r1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68d9      	ldr	r1, [r3, #12]
 8003538:	4b4a      	ldr	r3, [pc, #296]	@ (8003664 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 800353a:	400b      	ands	r3, r1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 8003540:	2314      	movs	r3, #20
 8003542:	e020      	b.n	8003586 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8003544:	2329      	movs	r3, #41	@ 0x29
 8003546:	e01e      	b.n	8003586 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6919      	ldr	r1, [r3, #16]
 800354e:	4b44      	ldr	r3, [pc, #272]	@ (8003660 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 8003550:	400b      	ands	r3, r1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_ADCEx_InjectedPollForConversion+0xe8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68d9      	ldr	r1, [r3, #12]
 800355c:	4b41      	ldr	r3, [pc, #260]	@ (8003664 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 800355e:	400b      	ands	r3, r1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00d      	beq.n	8003580 <HAL_ADCEx_InjectedPollForConversion+0x104>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6919      	ldr	r1, [r3, #16]
 800356a:	4b3f      	ldr	r3, [pc, #252]	@ (8003668 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 800356c:	400b      	ands	r3, r1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68d9      	ldr	r1, [r3, #12]
 8003578:	4b3b      	ldr	r3, [pc, #236]	@ (8003668 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 800357a:	400b      	ands	r3, r1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8003580:	2354      	movs	r3, #84	@ 0x54
 8003582:	e000      	b.n	8003586 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8003584:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	617b      	str	r3, [r7, #20]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800358c:	e021      	b.n	80035d2 <HAL_ADCEx_InjectedPollForConversion+0x156>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d01a      	beq.n	80035cc <HAL_ADCEx_InjectedPollForConversion+0x150>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_ADCEx_InjectedPollForConversion+0x130>
 800359c:	f7ff f93e 	bl	800281c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d20f      	bcs.n	80035cc <HAL_ADCEx_InjectedPollForConversion+0x150>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d90b      	bls.n	80035cc <HAL_ADCEx_InjectedPollForConversion+0x150>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	f043 0204 	orr.w	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e03f      	b.n	800364c <HAL_ADCEx_InjectedPollForConversion+0x1d0>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d8d9      	bhi.n	800358e <HAL_ADCEx_InjectedPollForConversion+0x112>
  }

  /* Clear injected group conversion flag */
  /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
  /* simultaneously.                                                          */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f06f 020e 	mvn.w	r2, #14
 80035e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80035fa:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80035fe:	d012      	beq.n	8003626 <HAL_ADCEx_InjectedPollForConversion+0x1aa>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800360a:	2b00      	cmp	r3, #0
 800360c:	d11d      	bne.n	800364a <HAL_ADCEx_InjectedPollForConversion+0x1ce>
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003618:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800361c:	d115      	bne.n	800364a <HAL_ADCEx_InjectedPollForConversion+0x1ce>
      (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7b1b      	ldrb	r3, [r3, #12]
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003622:	2b00      	cmp	r3, #0
 8003624:	d111      	bne.n	800364a <HAL_ADCEx_InjectedPollForConversion+0x1ce>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_ADCEx_InjectedPollForConversion+0x1ce>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	bd90      	pop	{r4, r7, pc}
 8003654:	2000000c 	.word	0x2000000c
 8003658:	24924924 	.word	0x24924924
 800365c:	00924924 	.word	0x00924924
 8003660:	12492492 	.word	0x12492492
 8003664:	00492492 	.word	0x00492492
 8003668:	00249249 	.word	0x00249249

0800366c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d009      	beq.n	8003694 <HAL_ADCEx_InjectedGetValue+0x28>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d815      	bhi.n	80036b2 <HAL_ADCEx_InjectedGetValue+0x46>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d00d      	beq.n	80036a8 <HAL_ADCEx_InjectedGetValue+0x3c>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b03      	cmp	r3, #3
 8003690:	d005      	beq.n	800369e <HAL_ADCEx_InjectedGetValue+0x32>
 8003692:	e00e      	b.n	80036b2 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369a:	60fb      	str	r3, [r7, #12]
      break;
 800369c:	e00e      	b.n	80036bc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a4:	60fb      	str	r3, [r7, #12]
      break;
 80036a6:	e009      	b.n	80036bc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	60fb      	str	r3, [r7, #12]
      break;
 80036b0:	e004      	b.n	80036bc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b8:	60fb      	str	r3, [r7, #12]
      break;
 80036ba:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80036bc:	68fb      	ldr	r3, [r7, #12]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80036dc:	b490      	push	{r4, r7}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_ADCEx_InjectedConfigChannel+0x20>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e17d      	b.n	80039f8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d119      	bne.n	8003740 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d10c      	bne.n	800372e <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371a:	0d9b      	lsrs	r3, r3, #22
 800371c:	059b      	lsls	r3, r3, #22
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	03d1      	lsls	r1, r2, #15
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	430b      	orrs	r3, r1
 800372a:	6393      	str	r3, [r2, #56]	@ 0x38
 800372c:	e04f      	b.n	80037ce <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
 800373e:	e046      	b.n	80037ce <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	429a      	cmp	r2, r3
 800374a:	d82a      	bhi.n	80037a2 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	330f      	adds	r3, #15
 8003764:	221f      	movs	r2, #31
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800376e:	43db      	mvns	r3, r3
 8003770:	4019      	ands	r1, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	3b01      	subs	r3, #1
 8003778:	0518      	lsls	r0, r3, #20
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681c      	ldr	r4, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	1ad2      	subs	r2, r2, r3
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	330f      	adds	r3, #15
 8003790:	fa04 f303 	lsl.w	r3, r4, r3
 8003794:	ea40 0203 	orr.w	r2, r0, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	639a      	str	r2, [r3, #56]	@ 0x38
 80037a0:	e015      	b.n	80037ce <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	1ad2      	subs	r2, r2, r3
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	330f      	adds	r3, #15
 80037ba:	221f      	movs	r2, #31
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80037c4:	43da      	mvns	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	400a      	ands	r2, r1
 80037cc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d00c      	beq.n	80037f6 <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	6991      	ldr	r1, [r2, #24]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	430b      	orrs	r3, r1
 80037f4:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	7d5b      	ldrb	r3, [r3, #21]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d115      	bne.n	800382a <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003806:	d108      	bne.n	800381a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	e007      	b.n	800382a <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381e:	f043 0220 	orr.w	r2, r3, #32
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	7d1b      	ldrb	r3, [r3, #20]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d114      	bne.n	800385c <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	7d5b      	ldrb	r3, [r3, #21]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d108      	bne.n	800384c <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	e007      	b.n	800385c <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b09      	cmp	r3, #9
 8003862:	d91c      	bls.n	800389e <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68d9      	ldr	r1, [r3, #12]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4613      	mov	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	3b1e      	subs	r3, #30
 8003876:	2207      	movs	r2, #7
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	4019      	ands	r1, r3
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6898      	ldr	r0, [r3, #8]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	3b1e      	subs	r3, #30
 8003890:	fa00 f203 	lsl.w	r2, r0, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	e019      	b.n	80038d2 <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6919      	ldr	r1, [r3, #16]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	2207      	movs	r2, #7
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	4019      	ands	r1, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6898      	ldr	r0, [r3, #8]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	fa00 f203 	lsl.w	r2, r0, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d003      	beq.n	80038e2 <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80038de:	2b11      	cmp	r3, #17
 80038e0:	d107      	bne.n	80038f2 <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80038f0:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d022      	beq.n	8003940 <HAL_ADCEx_InjectedConfigChannel+0x264>
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d82e      	bhi.n	800395c <HAL_ADCEx_InjectedConfigChannel+0x280>
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d002      	beq.n	8003908 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 8003902:	2b02      	cmp	r3, #2
 8003904:	d00e      	beq.n	8003924 <HAL_ADCEx_InjectedConfigChannel+0x248>
 8003906:	e029      	b.n	800395c <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003912:	f023 030f 	bic.w	r3, r3, #15
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	68d1      	ldr	r1, [r2, #12]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	430b      	orrs	r3, r1
 8003920:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8003922:	e029      	b.n	8003978 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800392e:	f023 030f 	bic.w	r3, r3, #15
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	68d1      	ldr	r1, [r2, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	430b      	orrs	r3, r1
 800393c:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800393e:	e01b      	b.n	8003978 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800394a:	f023 030f 	bic.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	68d1      	ldr	r1, [r2, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	430b      	orrs	r3, r1
 8003958:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 800395a:	e00d      	b.n	8003978 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003966:	f023 030f 	bic.w	r3, r3, #15
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	68d1      	ldr	r1, [r2, #12]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	430b      	orrs	r3, r1
 8003974:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8003976:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b10      	cmp	r3, #16
 800397e:	d003      	beq.n	8003988 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003984:	2b11      	cmp	r3, #17
 8003986:	d132      	bne.n	80039ee <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a04 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d125      	bne.n	80039de <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d126      	bne.n	80039ee <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80039ae:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d11a      	bne.n	80039ee <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039b8:	4b13      	ldr	r3, [pc, #76]	@ (8003a08 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a13      	ldr	r2, [pc, #76]	@ (8003a0c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	0c9a      	lsrs	r2, r3, #18
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039ce:	e002      	b.n	80039d6 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f9      	bne.n	80039d0 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 80039dc:	e007      	b.n	80039ee <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc90      	pop	{r4, r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40012400 	.word	0x40012400
 8003a08:	2000000c 	.word	0x2000000c
 8003a0c:	431bde83 	.word	0x431bde83

08003a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a20:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a42:	4a04      	ldr	r2, [pc, #16]	@ (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	60d3      	str	r3, [r2, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a5c:	4b04      	ldr	r3, [pc, #16]	@ (8003a70 <__NVIC_GetPriorityGrouping+0x18>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	f003 0307 	and.w	r3, r3, #7
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	db0b      	blt.n	8003a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	f003 021f 	and.w	r2, r3, #31
 8003a8c:	4906      	ldr	r1, [pc, #24]	@ (8003aa8 <__NVIC_EnableIRQ+0x34>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2001      	movs	r0, #1
 8003a96:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	e000e100 	.word	0xe000e100

08003aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	6039      	str	r1, [r7, #0]
 8003ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	db0a      	blt.n	8003ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	490c      	ldr	r1, [pc, #48]	@ (8003af8 <__NVIC_SetPriority+0x4c>)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	0112      	lsls	r2, r2, #4
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	440b      	add	r3, r1
 8003ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad4:	e00a      	b.n	8003aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	4908      	ldr	r1, [pc, #32]	@ (8003afc <__NVIC_SetPriority+0x50>)
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	3b04      	subs	r3, #4
 8003ae4:	0112      	lsls	r2, r2, #4
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	440b      	add	r3, r1
 8003aea:	761a      	strb	r2, [r3, #24]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000e100 	.word	0xe000e100
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	@ 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f1c3 0307 	rsb	r3, r3, #7
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	bf28      	it	cs
 8003b1e:	2304      	movcs	r3, #4
 8003b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3304      	adds	r3, #4
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	d902      	bls.n	8003b30 <NVIC_EncodePriority+0x30>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3b03      	subs	r3, #3
 8003b2e:	e000      	b.n	8003b32 <NVIC_EncodePriority+0x32>
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b34:	f04f 32ff 	mov.w	r2, #4294967295
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43da      	mvns	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	401a      	ands	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b48:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b52:	43d9      	mvns	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b58:	4313      	orrs	r3, r2
         );
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3724      	adds	r7, #36	@ 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b74:	d301      	bcc.n	8003b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b76:	2301      	movs	r3, #1
 8003b78:	e00f      	b.n	8003b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba4 <SysTick_Config+0x40>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b82:	210f      	movs	r1, #15
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	f7ff ff90 	bl	8003aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <SysTick_Config+0x40>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b92:	4b04      	ldr	r3, [pc, #16]	@ (8003ba4 <SysTick_Config+0x40>)
 8003b94:	2207      	movs	r2, #7
 8003b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	e000e010 	.word	0xe000e010

08003ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff2d 	bl	8003a10 <__NVIC_SetPriorityGrouping>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b086      	sub	sp, #24
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd0:	f7ff ff42 	bl	8003a58 <__NVIC_GetPriorityGrouping>
 8003bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	6978      	ldr	r0, [r7, #20]
 8003bdc:	f7ff ff90 	bl	8003b00 <NVIC_EncodePriority>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff5f 	bl	8003aac <__NVIC_SetPriority>
}
 8003bee:	bf00      	nop
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff ff35 	bl	8003a74 <__NVIC_EnableIRQ>
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff ffa2 	bl	8003b64 <SysTick_Config>
 8003c20:	4603      	mov	r3, r0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e043      	b.n	8003cca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <HAL_DMA_Init+0xa8>)
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a22      	ldr	r2, [pc, #136]	@ (8003cd8 <HAL_DMA_Init+0xac>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	009a      	lsls	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <HAL_DMA_Init+0xb0>)
 8003c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c76:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003c7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	bffdfff8 	.word	0xbffdfff8
 8003cd8:	cccccccd 	.word	0xcccccccd
 8003cdc:	40020000 	.word	0x40020000

08003ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_DMA_Start_IT+0x20>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e04b      	b.n	8003d98 <HAL_DMA_Start_IT+0xb8>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d13a      	bne.n	8003d8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f973 	bl	8004024 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 020e 	orr.w	r2, r2, #14
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e00f      	b.n	8003d78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 020a 	orr.w	r2, r2, #10
 8003d76:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	e005      	b.n	8003d96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
 8003d94:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d008      	beq.n	8003dca <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2204      	movs	r2, #4
 8003dbc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e020      	b.n	8003e0c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 020e 	bic.w	r2, r2, #14
 8003dd8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	2101      	movs	r1, #1
 8003df4:	fa01 f202 	lsl.w	r2, r1, r2
 8003df8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
	...

08003e18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	2204      	movs	r2, #4
 8003e36:	409a      	lsls	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d04f      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0xc8>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d04a      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0204 	bic.w	r2, r2, #4
 8003e66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a66      	ldr	r2, [pc, #408]	@ (8004008 <HAL_DMA_IRQHandler+0x1f0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d029      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xae>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a65      	ldr	r2, [pc, #404]	@ (800400c <HAL_DMA_IRQHandler+0x1f4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xaa>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a63      	ldr	r2, [pc, #396]	@ (8004010 <HAL_DMA_IRQHandler+0x1f8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01a      	beq.n	8003ebc <HAL_DMA_IRQHandler+0xa4>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a62      	ldr	r2, [pc, #392]	@ (8004014 <HAL_DMA_IRQHandler+0x1fc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d012      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x9e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a60      	ldr	r2, [pc, #384]	@ (8004018 <HAL_DMA_IRQHandler+0x200>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00a      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x98>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a5f      	ldr	r2, [pc, #380]	@ (800401c <HAL_DMA_IRQHandler+0x204>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d102      	bne.n	8003eaa <HAL_DMA_IRQHandler+0x92>
 8003ea4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ea8:	e00e      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xb0>
 8003eaa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003eae:	e00b      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xb0>
 8003eb0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003eb4:	e008      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xb0>
 8003eb6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003eba:	e005      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xb0>
 8003ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ec0:	e002      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xb0>
 8003ec2:	2340      	movs	r3, #64	@ 0x40
 8003ec4:	e000      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xb0>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	4a55      	ldr	r2, [pc, #340]	@ (8004020 <HAL_DMA_IRQHandler+0x208>)
 8003eca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8094 	beq.w	8003ffe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003ede:	e08e      	b.n	8003ffe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d056      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x186>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d051      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 020a 	bic.w	r2, r2, #10
 8003f16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a38      	ldr	r2, [pc, #224]	@ (8004008 <HAL_DMA_IRQHandler+0x1f0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d029      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x166>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a37      	ldr	r2, [pc, #220]	@ (800400c <HAL_DMA_IRQHandler+0x1f4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d022      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x162>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a35      	ldr	r2, [pc, #212]	@ (8004010 <HAL_DMA_IRQHandler+0x1f8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01a      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x15c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a34      	ldr	r2, [pc, #208]	@ (8004014 <HAL_DMA_IRQHandler+0x1fc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d012      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x156>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a32      	ldr	r2, [pc, #200]	@ (8004018 <HAL_DMA_IRQHandler+0x200>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00a      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x150>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a31      	ldr	r2, [pc, #196]	@ (800401c <HAL_DMA_IRQHandler+0x204>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d102      	bne.n	8003f62 <HAL_DMA_IRQHandler+0x14a>
 8003f5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f60:	e00e      	b.n	8003f80 <HAL_DMA_IRQHandler+0x168>
 8003f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f66:	e00b      	b.n	8003f80 <HAL_DMA_IRQHandler+0x168>
 8003f68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f6c:	e008      	b.n	8003f80 <HAL_DMA_IRQHandler+0x168>
 8003f6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f72:	e005      	b.n	8003f80 <HAL_DMA_IRQHandler+0x168>
 8003f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f78:	e002      	b.n	8003f80 <HAL_DMA_IRQHandler+0x168>
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	e000      	b.n	8003f80 <HAL_DMA_IRQHandler+0x168>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	4a27      	ldr	r2, [pc, #156]	@ (8004020 <HAL_DMA_IRQHandler+0x208>)
 8003f82:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d034      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f9c:	e02f      	b.n	8003ffe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d028      	beq.n	8004000 <HAL_DMA_IRQHandler+0x1e8>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d023      	beq.n	8004000 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 020e 	bic.w	r2, r2, #14
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
    }
  }
  return;
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
}
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40020008 	.word	0x40020008
 800400c:	4002001c 	.word	0x4002001c
 8004010:	40020030 	.word	0x40020030
 8004014:	40020044 	.word	0x40020044
 8004018:	40020058 	.word	0x40020058
 800401c:	4002006c 	.word	0x4002006c
 8004020:	40020000 	.word	0x40020000

08004024 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	2101      	movs	r1, #1
 800403c:	fa01 f202 	lsl.w	r2, r1, r2
 8004040:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b10      	cmp	r3, #16
 8004050:	d108      	bne.n	8004064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004062:	e007      	b.n	8004074 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr
	...

08004080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004080:	b480      	push	{r7}
 8004082:	b08b      	sub	sp, #44	@ 0x2c
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004092:	e169      	b.n	8004368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004094:	2201      	movs	r2, #1
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f040 8158 	bne.w	8004362 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4a9a      	ldr	r2, [pc, #616]	@ (8004320 <HAL_GPIO_Init+0x2a0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d05e      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040bc:	4a98      	ldr	r2, [pc, #608]	@ (8004320 <HAL_GPIO_Init+0x2a0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d875      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040c2:	4a98      	ldr	r2, [pc, #608]	@ (8004324 <HAL_GPIO_Init+0x2a4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d058      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040c8:	4a96      	ldr	r2, [pc, #600]	@ (8004324 <HAL_GPIO_Init+0x2a4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d86f      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040ce:	4a96      	ldr	r2, [pc, #600]	@ (8004328 <HAL_GPIO_Init+0x2a8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d052      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040d4:	4a94      	ldr	r2, [pc, #592]	@ (8004328 <HAL_GPIO_Init+0x2a8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d869      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040da:	4a94      	ldr	r2, [pc, #592]	@ (800432c <HAL_GPIO_Init+0x2ac>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04c      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040e0:	4a92      	ldr	r2, [pc, #584]	@ (800432c <HAL_GPIO_Init+0x2ac>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d863      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040e6:	4a92      	ldr	r2, [pc, #584]	@ (8004330 <HAL_GPIO_Init+0x2b0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d046      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040ec:	4a90      	ldr	r2, [pc, #576]	@ (8004330 <HAL_GPIO_Init+0x2b0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d85d      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040f2:	2b12      	cmp	r3, #18
 80040f4:	d82a      	bhi.n	800414c <HAL_GPIO_Init+0xcc>
 80040f6:	2b12      	cmp	r3, #18
 80040f8:	d859      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <HAL_GPIO_Init+0x80>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	0800417b 	.word	0x0800417b
 8004104:	08004155 	.word	0x08004155
 8004108:	08004167 	.word	0x08004167
 800410c:	080041a9 	.word	0x080041a9
 8004110:	080041af 	.word	0x080041af
 8004114:	080041af 	.word	0x080041af
 8004118:	080041af 	.word	0x080041af
 800411c:	080041af 	.word	0x080041af
 8004120:	080041af 	.word	0x080041af
 8004124:	080041af 	.word	0x080041af
 8004128:	080041af 	.word	0x080041af
 800412c:	080041af 	.word	0x080041af
 8004130:	080041af 	.word	0x080041af
 8004134:	080041af 	.word	0x080041af
 8004138:	080041af 	.word	0x080041af
 800413c:	080041af 	.word	0x080041af
 8004140:	080041af 	.word	0x080041af
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004171 	.word	0x08004171
 800414c:	4a79      	ldr	r2, [pc, #484]	@ (8004334 <HAL_GPIO_Init+0x2b4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004152:	e02c      	b.n	80041ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	623b      	str	r3, [r7, #32]
          break;
 800415a:	e029      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	3304      	adds	r3, #4
 8004162:	623b      	str	r3, [r7, #32]
          break;
 8004164:	e024      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	3308      	adds	r3, #8
 800416c:	623b      	str	r3, [r7, #32]
          break;
 800416e:	e01f      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	330c      	adds	r3, #12
 8004176:	623b      	str	r3, [r7, #32]
          break;
 8004178:	e01a      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004182:	2304      	movs	r3, #4
 8004184:	623b      	str	r3, [r7, #32]
          break;
 8004186:	e013      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004190:	2308      	movs	r3, #8
 8004192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	611a      	str	r2, [r3, #16]
          break;
 800419a:	e009      	b.n	80041b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800419c:	2308      	movs	r3, #8
 800419e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	615a      	str	r2, [r3, #20]
          break;
 80041a6:	e003      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041a8:	2300      	movs	r3, #0
 80041aa:	623b      	str	r3, [r7, #32]
          break;
 80041ac:	e000      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          break;
 80041ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2bff      	cmp	r3, #255	@ 0xff
 80041b4:	d801      	bhi.n	80041ba <HAL_GPIO_Init+0x13a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	e001      	b.n	80041be <HAL_GPIO_Init+0x13e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2bff      	cmp	r3, #255	@ 0xff
 80041c4:	d802      	bhi.n	80041cc <HAL_GPIO_Init+0x14c>
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	e002      	b.n	80041d2 <HAL_GPIO_Init+0x152>
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	3b08      	subs	r3, #8
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	210f      	movs	r1, #15
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	fa01 f303 	lsl.w	r3, r1, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	401a      	ands	r2, r3
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80b1 	beq.w	8004362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004200:	4b4d      	ldr	r3, [pc, #308]	@ (8004338 <HAL_GPIO_Init+0x2b8>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	4a4c      	ldr	r2, [pc, #304]	@ (8004338 <HAL_GPIO_Init+0x2b8>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6193      	str	r3, [r2, #24]
 800420c:	4b4a      	ldr	r3, [pc, #296]	@ (8004338 <HAL_GPIO_Init+0x2b8>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004218:	4a48      	ldr	r2, [pc, #288]	@ (800433c <HAL_GPIO_Init+0x2bc>)
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	3302      	adds	r3, #2
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	220f      	movs	r2, #15
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a40      	ldr	r2, [pc, #256]	@ (8004340 <HAL_GPIO_Init+0x2c0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <HAL_GPIO_Init+0x1ec>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a3f      	ldr	r2, [pc, #252]	@ (8004344 <HAL_GPIO_Init+0x2c4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00d      	beq.n	8004268 <HAL_GPIO_Init+0x1e8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a3e      	ldr	r2, [pc, #248]	@ (8004348 <HAL_GPIO_Init+0x2c8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <HAL_GPIO_Init+0x1e4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a3d      	ldr	r2, [pc, #244]	@ (800434c <HAL_GPIO_Init+0x2cc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_GPIO_Init+0x1e0>
 800425c:	2303      	movs	r3, #3
 800425e:	e006      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 8004260:	2304      	movs	r3, #4
 8004262:	e004      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 8004264:	2302      	movs	r3, #2
 8004266:	e002      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 800426c:	2300      	movs	r3, #0
 800426e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004270:	f002 0203 	and.w	r2, r2, #3
 8004274:	0092      	lsls	r2, r2, #2
 8004276:	4093      	lsls	r3, r2
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800427e:	492f      	ldr	r1, [pc, #188]	@ (800433c <HAL_GPIO_Init+0x2bc>)
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3302      	adds	r3, #2
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004298:	4b2d      	ldr	r3, [pc, #180]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	492c      	ldr	r1, [pc, #176]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]
 80042a4:	e006      	b.n	80042b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	4928      	ldr	r1, [pc, #160]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d006      	beq.n	80042ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80042c0:	4b23      	ldr	r3, [pc, #140]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	4922      	ldr	r1, [pc, #136]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
 80042cc:	e006      	b.n	80042dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	491e      	ldr	r1, [pc, #120]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042d8:	4013      	ands	r3, r2
 80042da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80042e8:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	4918      	ldr	r1, [pc, #96]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]
 80042f4:	e006      	b.n	8004304 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042f6:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	4914      	ldr	r1, [pc, #80]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 8004300:	4013      	ands	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d021      	beq.n	8004354 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004310:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	490e      	ldr	r1, [pc, #56]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	e021      	b.n	8004362 <HAL_GPIO_Init+0x2e2>
 800431e:	bf00      	nop
 8004320:	10320000 	.word	0x10320000
 8004324:	10310000 	.word	0x10310000
 8004328:	10220000 	.word	0x10220000
 800432c:	10210000 	.word	0x10210000
 8004330:	10120000 	.word	0x10120000
 8004334:	10110000 	.word	0x10110000
 8004338:	40021000 	.word	0x40021000
 800433c:	40010000 	.word	0x40010000
 8004340:	40010800 	.word	0x40010800
 8004344:	40010c00 	.word	0x40010c00
 8004348:	40011000 	.word	0x40011000
 800434c:	40011400 	.word	0x40011400
 8004350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004354:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <HAL_GPIO_Init+0x304>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	43db      	mvns	r3, r3
 800435c:	4909      	ldr	r1, [pc, #36]	@ (8004384 <HAL_GPIO_Init+0x304>)
 800435e:	4013      	ands	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	3301      	adds	r3, #1
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	fa22 f303 	lsr.w	r3, r2, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	f47f ae8e 	bne.w	8004094 <HAL_GPIO_Init+0x14>
  }
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	372c      	adds	r7, #44	@ 0x2c
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	40010400 	.word	0x40010400

08004388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e001      	b.n	80043aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	807b      	strh	r3, [r7, #2]
 80043c2:	4613      	mov	r3, r2
 80043c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043c6:	787b      	ldrb	r3, [r7, #1]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043cc:	887a      	ldrh	r2, [r7, #2]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043d2:	e003      	b.n	80043dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043d4:	887b      	ldrh	r3, [r7, #2]
 80043d6:	041a      	lsls	r2, r3, #16
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	611a      	str	r2, [r3, #16]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043f8:	887a      	ldrh	r2, [r7, #2]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4013      	ands	r3, r2
 80043fe:	041a      	lsls	r2, r3, #16
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	43d9      	mvns	r1, r3
 8004404:	887b      	ldrh	r3, [r7, #2]
 8004406:	400b      	ands	r3, r1
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	611a      	str	r2, [r3, #16]
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004422:	4b08      	ldr	r3, [pc, #32]	@ (8004444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800442e:	4a05      	ldr	r2, [pc, #20]	@ (8004444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd fd54 	bl	8001ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40010400 	.word	0x40010400

08004448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e272      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8087 	beq.w	8004576 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004468:	4b92      	ldr	r3, [pc, #584]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b04      	cmp	r3, #4
 8004472:	d00c      	beq.n	800448e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004474:	4b8f      	ldr	r3, [pc, #572]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d112      	bne.n	80044a6 <HAL_RCC_OscConfig+0x5e>
 8004480:	4b8c      	ldr	r3, [pc, #560]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448c:	d10b      	bne.n	80044a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448e:	4b89      	ldr	r3, [pc, #548]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d06c      	beq.n	8004574 <HAL_RCC_OscConfig+0x12c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d168      	bne.n	8004574 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e24c      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ae:	d106      	bne.n	80044be <HAL_RCC_OscConfig+0x76>
 80044b0:	4b80      	ldr	r3, [pc, #512]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a7f      	ldr	r2, [pc, #508]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	e02e      	b.n	800451c <HAL_RCC_OscConfig+0xd4>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x98>
 80044c6:	4b7b      	ldr	r3, [pc, #492]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7a      	ldr	r2, [pc, #488]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b78      	ldr	r3, [pc, #480]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a77      	ldr	r2, [pc, #476]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e01d      	b.n	800451c <HAL_RCC_OscConfig+0xd4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0xbc>
 80044ea:	4b72      	ldr	r3, [pc, #456]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a71      	ldr	r2, [pc, #452]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b6f      	ldr	r3, [pc, #444]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6e      	ldr	r2, [pc, #440]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e00b      	b.n	800451c <HAL_RCC_OscConfig+0xd4>
 8004504:	4b6b      	ldr	r3, [pc, #428]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6a      	ldr	r2, [pc, #424]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b68      	ldr	r3, [pc, #416]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a67      	ldr	r2, [pc, #412]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d013      	beq.n	800454c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fe f97a 	bl	800281c <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7fe f976 	bl	800281c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	@ 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e200      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b5d      	ldr	r3, [pc, #372]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0xe4>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fe f966 	bl	800281c <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7fe f962 	bl	800281c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	@ 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1ec      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	4b53      	ldr	r3, [pc, #332]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x10c>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d063      	beq.n	800464a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004582:	4b4c      	ldr	r3, [pc, #304]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800458e:	4b49      	ldr	r3, [pc, #292]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b08      	cmp	r3, #8
 8004598:	d11c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x18c>
 800459a:	4b46      	ldr	r3, [pc, #280]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d116      	bne.n	80045d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	4b43      	ldr	r3, [pc, #268]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCC_OscConfig+0x176>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e1c0      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	4b3d      	ldr	r3, [pc, #244]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4939      	ldr	r1, [pc, #228]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	e03a      	b.n	800464a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045dc:	4b36      	ldr	r3, [pc, #216]	@ (80046b8 <HAL_RCC_OscConfig+0x270>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fe f91b 	bl	800281c <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fe f917 	bl	800281c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1a1      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fc:	4b2d      	ldr	r3, [pc, #180]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b2a      	ldr	r3, [pc, #168]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4927      	ldr	r1, [pc, #156]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461e:	4b26      	ldr	r3, [pc, #152]	@ (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fe f8fa 	bl	800281c <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462c:	f7fe f8f6 	bl	800281c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e180      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	4b1d      	ldr	r3, [pc, #116]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d03a      	beq.n	80046cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d019      	beq.n	8004692 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b17      	ldr	r3, [pc, #92]	@ (80046bc <HAL_RCC_OscConfig+0x274>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004664:	f7fe f8da 	bl	800281c <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466c:	f7fe f8d6 	bl	800281c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e160      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467e:	4b0d      	ldr	r3, [pc, #52]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800468a:	2001      	movs	r0, #1
 800468c:	f000 faba 	bl	8004c04 <RCC_Delay>
 8004690:	e01c      	b.n	80046cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004692:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <HAL_RCC_OscConfig+0x274>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004698:	f7fe f8c0 	bl	800281c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469e:	e00f      	b.n	80046c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a0:	f7fe f8bc 	bl	800281c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d908      	bls.n	80046c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e146      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000
 80046b8:	42420000 	.word	0x42420000
 80046bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	4b92      	ldr	r3, [pc, #584]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e9      	bne.n	80046a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a6 	beq.w	8004826 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b8b      	ldr	r3, [pc, #556]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10d      	bne.n	8004706 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	4a87      	ldr	r2, [pc, #540]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f4:	61d3      	str	r3, [r2, #28]
 80046f6:	4b85      	ldr	r3, [pc, #532]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004706:	4b82      	ldr	r3, [pc, #520]	@ (8004910 <HAL_RCC_OscConfig+0x4c8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d118      	bne.n	8004744 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004712:	4b7f      	ldr	r3, [pc, #508]	@ (8004910 <HAL_RCC_OscConfig+0x4c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a7e      	ldr	r2, [pc, #504]	@ (8004910 <HAL_RCC_OscConfig+0x4c8>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471e:	f7fe f87d 	bl	800281c <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7fe f879 	bl	800281c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b64      	cmp	r3, #100	@ 0x64
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e103      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	4b75      	ldr	r3, [pc, #468]	@ (8004910 <HAL_RCC_OscConfig+0x4c8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x312>
 800474c:	4b6f      	ldr	r3, [pc, #444]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4a6e      	ldr	r2, [pc, #440]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6213      	str	r3, [r2, #32]
 8004758:	e02d      	b.n	80047b6 <HAL_RCC_OscConfig+0x36e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0x334>
 8004762:	4b6a      	ldr	r3, [pc, #424]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4a69      	ldr	r2, [pc, #420]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	6213      	str	r3, [r2, #32]
 800476e:	4b67      	ldr	r3, [pc, #412]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	4a66      	ldr	r2, [pc, #408]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	6213      	str	r3, [r2, #32]
 800477a:	e01c      	b.n	80047b6 <HAL_RCC_OscConfig+0x36e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b05      	cmp	r3, #5
 8004782:	d10c      	bne.n	800479e <HAL_RCC_OscConfig+0x356>
 8004784:	4b61      	ldr	r3, [pc, #388]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	4a60      	ldr	r2, [pc, #384]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800478a:	f043 0304 	orr.w	r3, r3, #4
 800478e:	6213      	str	r3, [r2, #32]
 8004790:	4b5e      	ldr	r3, [pc, #376]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4a5d      	ldr	r2, [pc, #372]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6213      	str	r3, [r2, #32]
 800479c:	e00b      	b.n	80047b6 <HAL_RCC_OscConfig+0x36e>
 800479e:	4b5b      	ldr	r3, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	4a5a      	ldr	r2, [pc, #360]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	6213      	str	r3, [r2, #32]
 80047aa:	4b58      	ldr	r3, [pc, #352]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	4a57      	ldr	r2, [pc, #348]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	f023 0304 	bic.w	r3, r3, #4
 80047b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d015      	beq.n	80047ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047be:	f7fe f82d 	bl	800281c <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fe f829 	bl	800281c <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e0b1      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047dc:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ee      	beq.n	80047c6 <HAL_RCC_OscConfig+0x37e>
 80047e8:	e014      	b.n	8004814 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ea:	f7fe f817 	bl	800281c <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f7fe f813 	bl	800281c <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e09b      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004808:	4b40      	ldr	r3, [pc, #256]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ee      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481a:	4b3c      	ldr	r3, [pc, #240]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	4a3b      	ldr	r2, [pc, #236]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004824:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8087 	beq.w	800493e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004830:	4b36      	ldr	r3, [pc, #216]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	2b08      	cmp	r3, #8
 800483a:	d061      	beq.n	8004900 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d146      	bne.n	80048d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004844:	4b33      	ldr	r3, [pc, #204]	@ (8004914 <HAL_RCC_OscConfig+0x4cc>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fd ffe7 	bl	800281c <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004852:	f7fd ffe3 	bl	800281c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e06d      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004864:	4b29      	ldr	r3, [pc, #164]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f0      	bne.n	8004852 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004878:	d108      	bne.n	800488c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800487a:	4b24      	ldr	r3, [pc, #144]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4921      	ldr	r1, [pc, #132]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800488c:	4b1f      	ldr	r3, [pc, #124]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a19      	ldr	r1, [r3, #32]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	430b      	orrs	r3, r1
 800489e:	491b      	ldr	r1, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <HAL_RCC_OscConfig+0x4cc>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048aa:	f7fd ffb7 	bl	800281c <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b2:	f7fd ffb3 	bl	800281c <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e03d      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048c4:	4b11      	ldr	r3, [pc, #68]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x46a>
 80048d0:	e035      	b.n	800493e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <HAL_RCC_OscConfig+0x4cc>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fd ffa0 	bl	800281c <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd ff9c 	bl	800281c <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e026      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x498>
 80048fe:	e01e      	b.n	800493e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d107      	bne.n	8004918 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e019      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
 800490c:	40021000 	.word	0x40021000
 8004910:	40007000 	.word	0x40007000
 8004914:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_OscConfig+0x500>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	429a      	cmp	r2, r3
 800492a:	d106      	bne.n	800493a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000

0800494c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0d0      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004960:	4b6a      	ldr	r3, [pc, #424]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d910      	bls.n	8004990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b67      	ldr	r3, [pc, #412]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 0207 	bic.w	r2, r3, #7
 8004976:	4965      	ldr	r1, [pc, #404]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b63      	ldr	r3, [pc, #396]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0b8      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a8:	4b59      	ldr	r3, [pc, #356]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a58      	ldr	r2, [pc, #352]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c0:	4b53      	ldr	r3, [pc, #332]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a52      	ldr	r2, [pc, #328]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b50      	ldr	r3, [pc, #320]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	494d      	ldr	r1, [pc, #308]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d040      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d115      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e07f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	4b41      	ldr	r3, [pc, #260]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e073      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e06b      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2a:	4b39      	ldr	r3, [pc, #228]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4936      	ldr	r1, [pc, #216]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a3c:	f7fd feee 	bl	800281c <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7fd feea 	bl	800281c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e053      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 020c 	and.w	r2, r3, #12
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d1eb      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d210      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b24      	ldr	r3, [pc, #144]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 0207 	bic.w	r2, r3, #7
 8004a82:	4922      	ldr	r1, [pc, #136]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e032      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4916      	ldr	r1, [pc, #88]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ac6:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	490e      	ldr	r1, [pc, #56]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ada:	f000 f821 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	490a      	ldr	r1, [pc, #40]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004aec:	5ccb      	ldrb	r3, [r1, r3]
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1cc>)
 8004af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004af6:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <HAL_RCC_ClockConfig+0x1d0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd fe4c 	bl	8002798 <HAL_InitTick>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40022000 	.word	0x40022000
 8004b10:	40021000 	.word	0x40021000
 8004b14:	08006bcc 	.word	0x08006bcc
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	20000010 	.word	0x20000010

08004b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d002      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x30>
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x36>
 8004b4e:	e027      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b52:	613b      	str	r3, [r7, #16]
      break;
 8004b54:	e027      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	0c9b      	lsrs	r3, r3, #18
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d010      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b6e:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	0c5b      	lsrs	r3, r3, #17
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	4a11      	ldr	r2, [pc, #68]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b7a:	5cd3      	ldrb	r3, [r2, r3]
 8004b7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a0d      	ldr	r2, [pc, #52]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b82:	fb03 f202 	mul.w	r2, r3, r2
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e004      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	613b      	str	r3, [r7, #16]
      break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ba2:	613b      	str	r3, [r7, #16]
      break;
 8004ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba6:	693b      	ldr	r3, [r7, #16]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	007a1200 	.word	0x007a1200
 8004bbc:	08006be4 	.word	0x08006be4
 8004bc0:	08006bf4 	.word	0x08006bf4
 8004bc4:	003d0900 	.word	0x003d0900

08004bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bcc:	4b02      	ldr	r3, [pc, #8]	@ (8004bd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bce:	681b      	ldr	r3, [r3, #0]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	2000000c 	.word	0x2000000c

08004bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004be0:	f7ff fff2 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004be4:	4602      	mov	r2, r0
 8004be6:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	0adb      	lsrs	r3, r3, #11
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	4903      	ldr	r1, [pc, #12]	@ (8004c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf2:	5ccb      	ldrb	r3, [r1, r3]
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	08006bdc 	.word	0x08006bdc

08004c04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <RCC_Delay+0x34>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0a      	ldr	r2, [pc, #40]	@ (8004c3c <RCC_Delay+0x38>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0a5b      	lsrs	r3, r3, #9
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c20:	bf00      	nop
  }
  while (Delay --);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1e5a      	subs	r2, r3, #1
 8004c26:	60fa      	str	r2, [r7, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f9      	bne.n	8004c20 <RCC_Delay+0x1c>
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr
 8004c38:	2000000c 	.word	0x2000000c
 8004c3c:	10624dd3 	.word	0x10624dd3

08004c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d07d      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c60:	4b4f      	ldr	r3, [pc, #316]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10d      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	4a4b      	ldr	r2, [pc, #300]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c76:	61d3      	str	r3, [r2, #28]
 8004c78:	4b49      	ldr	r3, [pc, #292]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c84:	2301      	movs	r3, #1
 8004c86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c88:	4b46      	ldr	r3, [pc, #280]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d118      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c94:	4b43      	ldr	r3, [pc, #268]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a42      	ldr	r2, [pc, #264]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca0:	f7fd fdbc 	bl	800281c <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca6:	e008      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca8:	f7fd fdb8 	bl	800281c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	@ 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e06d      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cba:	4b3a      	ldr	r3, [pc, #232]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc6:	4b36      	ldr	r3, [pc, #216]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d02e      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d027      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cee:	4b2e      	ldr	r3, [pc, #184]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cfa:	4a29      	ldr	r2, [pc, #164]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d014      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0a:	f7fd fd87 	bl	800281c <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d10:	e00a      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d12:	f7fd fd83 	bl	800281c <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e036      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ee      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d34:	4b1a      	ldr	r3, [pc, #104]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4917      	ldr	r1, [pc, #92]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4c:	4b14      	ldr	r3, [pc, #80]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	4a13      	ldr	r2, [pc, #76]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d64:	4b0e      	ldr	r3, [pc, #56]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	490b      	ldr	r1, [pc, #44]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d82:	4b07      	ldr	r3, [pc, #28]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	4904      	ldr	r1, [pc, #16]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40007000 	.word	0x40007000
 8004da8:	42420440 	.word	0x42420440

08004dac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	f200 808a 	bhi.w	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d045      	beq.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d075      	beq.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004de2:	e082      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004de4:	4b46      	ldr	r3, [pc, #280]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004dea:	4b45      	ldr	r3, [pc, #276]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d07b      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	0c9b      	lsrs	r3, r3, #18
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	4a41      	ldr	r2, [pc, #260]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004e00:	5cd3      	ldrb	r3, [r2, r3]
 8004e02:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d015      	beq.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	0c5b      	lsrs	r3, r3, #17
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	4a3b      	ldr	r2, [pc, #236]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004e1a:	5cd3      	ldrb	r3, [r2, r3]
 8004e1c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e28:	4a38      	ldr	r2, [pc, #224]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	e004      	b.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4a34      	ldr	r2, [pc, #208]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e44:	4b2e      	ldr	r3, [pc, #184]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e50:	d102      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	61bb      	str	r3, [r7, #24]
      break;
 8004e56:	e04a      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	61bb      	str	r3, [r7, #24]
      break;
 8004e66:	e042      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004e68:	4b25      	ldr	r3, [pc, #148]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e78:	d108      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004e84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	e01f      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e96:	d109      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e98:	4b19      	ldr	r3, [pc, #100]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ea4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e00f      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eb6:	d11c      	bne.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004eb8:	4b11      	ldr	r3, [pc, #68]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d016      	beq.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004ec4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004ec8:	61bb      	str	r3, [r7, #24]
      break;
 8004eca:	e012      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ecc:	e011      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004ece:	f7ff fe85 	bl	8004bdc <HAL_RCC_GetPCLK2Freq>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	0b9b      	lsrs	r3, r3, #14
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	3301      	adds	r3, #1
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	61bb      	str	r3, [r7, #24]
      break;
 8004ee8:	e004      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ef2:	bf00      	nop
    }
  }
  return (frequency);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	08006bf8 	.word	0x08006bf8
 8004f08:	08006c08 	.word	0x08006c08
 8004f0c:	007a1200 	.word	0x007a1200
 8004f10:	003d0900 	.word	0x003d0900
 8004f14:	aaaaaaab 	.word	0xaaaaaaab

08004f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e041      	b.n	8004fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fd fb72 	bl	8002628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 fcb2 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d001      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e03a      	b.n	8005046 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a18      	ldr	r2, [pc, #96]	@ (8005050 <HAL_TIM_Base_Start_IT+0x98>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x58>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffa:	d009      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x58>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a14      	ldr	r2, [pc, #80]	@ (8005054 <HAL_TIM_Base_Start_IT+0x9c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x58>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a13      	ldr	r2, [pc, #76]	@ (8005058 <HAL_TIM_Base_Start_IT+0xa0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d111      	bne.n	8005034 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d010      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	e007      	b.n	8005044 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800

0800505c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6a1a      	ldr	r2, [r3, #32]
 800507a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10f      	bne.n	80050a4 <HAL_TIM_Base_Stop_IT+0x48>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6a1a      	ldr	r2, [r3, #32]
 800508a:	f240 4344 	movw	r3, #1092	@ 0x444
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d107      	bne.n	80050a4 <HAL_TIM_Base_Stop_IT+0x48>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e041      	b.n	800514e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f839 	bl	8005156 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f000 fbe2 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d109      	bne.n	800518c <HAL_TIM_PWM_Start+0x24>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e022      	b.n	80051d2 <HAL_TIM_PWM_Start+0x6a>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b04      	cmp	r3, #4
 8005190:	d109      	bne.n	80051a6 <HAL_TIM_PWM_Start+0x3e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	bf14      	ite	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	2300      	moveq	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	e015      	b.n	80051d2 <HAL_TIM_PWM_Start+0x6a>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d109      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x58>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e008      	b.n	80051d2 <HAL_TIM_PWM_Start+0x6a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e05e      	b.n	8005298 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0x82>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e8:	e013      	b.n	8005212 <HAL_TIM_PWM_Start+0xaa>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0x92>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f8:	e00b      	b.n	8005212 <HAL_TIM_PWM_Start+0xaa>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Start+0xa2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005208:	e003      	b.n	8005212 <HAL_TIM_PWM_Start+0xaa>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fddc 	bl	8005dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1e      	ldr	r2, [pc, #120]	@ (80052a0 <HAL_TIM_PWM_Start+0x138>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d107      	bne.n	800523a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <HAL_TIM_PWM_Start+0x138>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00e      	beq.n	8005262 <HAL_TIM_PWM_Start+0xfa>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800524c:	d009      	beq.n	8005262 <HAL_TIM_PWM_Start+0xfa>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a14      	ldr	r2, [pc, #80]	@ (80052a4 <HAL_TIM_PWM_Start+0x13c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_TIM_PWM_Start+0xfa>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a12      	ldr	r2, [pc, #72]	@ (80052a8 <HAL_TIM_PWM_Start+0x140>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d111      	bne.n	8005286 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b06      	cmp	r3, #6
 8005272:	d010      	beq.n	8005296 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005284:	e007      	b.n	8005296 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0201 	orr.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800

080052ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fd8a 	bl	8005dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a29      	ldr	r2, [pc, #164]	@ (8005370 <HAL_TIM_PWM_Stop+0xc4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d117      	bne.n	80052fe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10f      	bne.n	80052fe <HAL_TIM_PWM_Stop+0x52>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a1a      	ldr	r2, [r3, #32]
 80052e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d107      	bne.n	80052fe <HAL_TIM_PWM_Stop+0x52>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a1a      	ldr	r2, [r3, #32]
 8005304:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10f      	bne.n	800532e <HAL_TIM_PWM_Stop+0x82>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	f240 4344 	movw	r3, #1092	@ 0x444
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d107      	bne.n	800532e <HAL_TIM_PWM_Stop+0x82>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_TIM_PWM_Stop+0x92>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800533c:	e013      	b.n	8005366 <HAL_TIM_PWM_Stop+0xba>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d104      	bne.n	800534e <HAL_TIM_PWM_Stop+0xa2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800534c:	e00b      	b.n	8005366 <HAL_TIM_PWM_Stop+0xba>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d104      	bne.n	800535e <HAL_TIM_PWM_Stop+0xb2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800535c:	e003      	b.n	8005366 <HAL_TIM_PWM_Stop+0xba>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40012c00 	.word	0x40012c00

08005374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d020      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0202 	mvn.w	r2, #2
 80053a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa63 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fa56 	bl	8005878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fa65 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d020      	beq.n	8005424 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01b      	beq.n	8005424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0204 	mvn.w	r2, #4
 80053f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa3d 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa30 	bl	8005878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fa3f 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d020      	beq.n	8005470 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01b      	beq.n	8005470 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0208 	mvn.w	r2, #8
 8005440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2204      	movs	r2, #4
 8005446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fa17 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 800545c:	e005      	b.n	800546a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa0a 	bl	8005878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fa19 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	d020      	beq.n	80054bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01b      	beq.n	80054bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0210 	mvn.w	r2, #16
 800548c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2208      	movs	r2, #8
 8005492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9f1 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f9e4 	bl	8005878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f9f3 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0201 	mvn.w	r2, #1
 80054d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9c3 	bl	8005866 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00c      	beq.n	8005504 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fcf5 	bl	8005eee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00c      	beq.n	8005528 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9c3 	bl	80058ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00c      	beq.n	800554c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0220 	mvn.w	r2, #32
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fcc8 	bl	8005edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800556e:	2302      	movs	r3, #2
 8005570:	e0ae      	b.n	80056d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b0c      	cmp	r3, #12
 800557e:	f200 809f 	bhi.w	80056c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055bd 	.word	0x080055bd
 800558c:	080056c1 	.word	0x080056c1
 8005590:	080056c1 	.word	0x080056c1
 8005594:	080056c1 	.word	0x080056c1
 8005598:	080055fd 	.word	0x080055fd
 800559c:	080056c1 	.word	0x080056c1
 80055a0:	080056c1 	.word	0x080056c1
 80055a4:	080056c1 	.word	0x080056c1
 80055a8:	0800563f 	.word	0x0800563f
 80055ac:	080056c1 	.word	0x080056c1
 80055b0:	080056c1 	.word	0x080056c1
 80055b4:	080056c1 	.word	0x080056c1
 80055b8:	0800567f 	.word	0x0800567f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f9ea 	bl	800599c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0208 	orr.w	r2, r2, #8
 80055d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0204 	bic.w	r2, r2, #4
 80055e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	619a      	str	r2, [r3, #24]
      break;
 80055fa:	e064      	b.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fa30 	bl	8005a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6999      	ldr	r1, [r3, #24]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	619a      	str	r2, [r3, #24]
      break;
 800563c:	e043      	b.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fa79 	bl	8005b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0208 	orr.w	r2, r2, #8
 8005658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0204 	bic.w	r2, r2, #4
 8005668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69d9      	ldr	r1, [r3, #28]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	61da      	str	r2, [r3, #28]
      break;
 800567c:	e023      	b.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fac3 	bl	8005c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69d9      	ldr	r1, [r3, #28]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	021a      	lsls	r2, r3, #8
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	61da      	str	r2, [r3, #28]
      break;
 80056be:	e002      	b.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]
      break;
 80056c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e0b4      	b.n	800585e <HAL_TIM_ConfigClockSource+0x186>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800571a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800572c:	d03e      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0xd4>
 800572e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005732:	f200 8087 	bhi.w	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800573a:	f000 8086 	beq.w	800584a <HAL_TIM_ConfigClockSource+0x172>
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005742:	d87f      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b70      	cmp	r3, #112	@ 0x70
 8005746:	d01a      	beq.n	800577e <HAL_TIM_ConfigClockSource+0xa6>
 8005748:	2b70      	cmp	r3, #112	@ 0x70
 800574a:	d87b      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b60      	cmp	r3, #96	@ 0x60
 800574e:	d050      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005750:	2b60      	cmp	r3, #96	@ 0x60
 8005752:	d877      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b50      	cmp	r3, #80	@ 0x50
 8005756:	d03c      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005758:	2b50      	cmp	r3, #80	@ 0x50
 800575a:	d873      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b40      	cmp	r3, #64	@ 0x40
 800575e:	d058      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x13a>
 8005760:	2b40      	cmp	r3, #64	@ 0x40
 8005762:	d86f      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b30      	cmp	r3, #48	@ 0x30
 8005766:	d064      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 8005768:	2b30      	cmp	r3, #48	@ 0x30
 800576a:	d86b      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b20      	cmp	r3, #32
 800576e:	d060      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 8005770:	2b20      	cmp	r3, #32
 8005772:	d867      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d05c      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	2b10      	cmp	r3, #16
 800577a:	d05a      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 800577c:	e062      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800578e:	f000 fb04 	bl	8005d9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	609a      	str	r2, [r3, #8]
      break;
 80057aa:	e04f      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057bc:	f000 faed 	bl	8005d9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ce:	609a      	str	r2, [r3, #8]
      break;
 80057d0:	e03c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 fa64 	bl	8005cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2150      	movs	r1, #80	@ 0x50
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fabb 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 80057f0:	e02c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057fe:	461a      	mov	r2, r3
 8005800:	f000 fa82 	bl	8005d08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2160      	movs	r1, #96	@ 0x60
 800580a:	4618      	mov	r0, r3
 800580c:	f000 faab 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005810:	e01c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581e:	461a      	mov	r2, r3
 8005820:	f000 fa44 	bl	8005cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2140      	movs	r1, #64	@ 0x40
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fa9b 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005830:	e00c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f000 fa92 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005842:	e003      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
      break;
 8005848:	e000      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800584a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr

080058ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr

080058c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005990 <TIM_Base_SetConfig+0xd0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <TIM_Base_SetConfig+0x30>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058de:	d007      	beq.n	80058f0 <TIM_Base_SetConfig+0x30>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005994 <TIM_Base_SetConfig+0xd4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_Base_SetConfig+0x30>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005998 <TIM_Base_SetConfig+0xd8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d108      	bne.n	8005902 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a22      	ldr	r2, [pc, #136]	@ (8005990 <TIM_Base_SetConfig+0xd0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_Base_SetConfig+0x62>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005910:	d007      	beq.n	8005922 <TIM_Base_SetConfig+0x62>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1f      	ldr	r2, [pc, #124]	@ (8005994 <TIM_Base_SetConfig+0xd4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_Base_SetConfig+0x62>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1e      	ldr	r2, [pc, #120]	@ (8005998 <TIM_Base_SetConfig+0xd8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d108      	bne.n	8005934 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a0d      	ldr	r2, [pc, #52]	@ (8005990 <TIM_Base_SetConfig+0xd0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d103      	bne.n	8005968 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f023 0201 	bic.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]
  }
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40000400 	.word	0x40000400
 8005998:	40000800 	.word	0x40000800

0800599c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f023 0201 	bic.w	r2, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0303 	bic.w	r3, r3, #3
 80059d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0302 	bic.w	r3, r3, #2
 80059e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a64 <TIM_OC1_SetConfig+0xc8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d10c      	bne.n	8005a12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0308 	bic.w	r3, r3, #8
 80059fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f023 0304 	bic.w	r3, r3, #4
 8005a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a13      	ldr	r2, [pc, #76]	@ (8005a64 <TIM_OC1_SetConfig+0xc8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d111      	bne.n	8005a3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	621a      	str	r2, [r3, #32]
}
 8005a58:	bf00      	nop
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40012c00 	.word	0x40012c00

08005a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f023 0210 	bic.w	r2, r3, #16
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0320 	bic.w	r3, r3, #32
 8005ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8005b38 <TIM_OC2_SetConfig+0xd0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10d      	bne.n	8005ae4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a14      	ldr	r2, [pc, #80]	@ (8005b38 <TIM_OC2_SetConfig+0xd0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d113      	bne.n	8005b14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr
 8005b38:	40012c00 	.word	0x40012c00

08005b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <TIM_OC3_SetConfig+0xd0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d10d      	bne.n	8005bb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a14      	ldr	r2, [pc, #80]	@ (8005c0c <TIM_OC3_SetConfig+0xd0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d113      	bne.n	8005be6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	621a      	str	r2, [r3, #32]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40012c00 	.word	0x40012c00

08005c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	031b      	lsls	r3, r3, #12
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8005ca8 <TIM_OC4_SetConfig+0x98>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d109      	bne.n	8005c84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	019b      	lsls	r3, r3, #6
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr
 8005ca8:	40012c00 	.word	0x40012c00

08005cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f023 0201 	bic.w	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f023 030a 	bic.w	r3, r3, #10
 8005ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	621a      	str	r2, [r3, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f023 0210 	bic.w	r2, r3, #16
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	031b      	lsls	r3, r3, #12
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	621a      	str	r2, [r3, #32]
}
 8005d5c:	bf00      	nop
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f043 0307 	orr.w	r3, r3, #7
 8005d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b087      	sub	sp, #28
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
 8005da6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005db4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	021a      	lsls	r2, r3, #8
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	609a      	str	r2, [r3, #8]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2201      	movs	r2, #1
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	401a      	ands	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1a      	ldr	r2, [r3, #32]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e10:	431a      	orrs	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e046      	b.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a16      	ldr	r2, [pc, #88]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e84:	d009      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a12      	ldr	r2, [pc, #72]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a10      	ldr	r2, [pc, #64]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d10c      	bne.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr
 8005ed0:	40012c00 	.word	0x40012c00
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800

08005edc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <SEND_4_BIT>:
 */

#include "LCD_16x2_PARALLEL.h"

void SEND_4_BIT(char data, uint8_t rsPin) //rs=0 yra instruction register o HIGH(1) data register
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	460a      	mov	r2, r1
 8005f0a:	71fb      	strb	r3, [r7, #7]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rsPin);
 8005f10:	79bb      	ldrb	r3, [r7, #6]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f18:	4823      	ldr	r0, [pc, #140]	@ (8005fa8 <SEND_4_BIT+0xa8>)
 8005f1a:	f7fe fa4c 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f24:	4820      	ldr	r0, [pc, #128]	@ (8005fa8 <SEND_4_BIT+0xa8>)
 8005f26:	f7fe fa46 	bl	80043b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data >> 0) & 0x1);
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	2120      	movs	r1, #32
 8005f36:	481d      	ldr	r0, [pc, #116]	@ (8005fac <SEND_4_BIT+0xac>)
 8005f38:	f7fe fa3d 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data >> 1) & 0x1);
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2140      	movs	r1, #64	@ 0x40
 8005f4c:	4817      	ldr	r0, [pc, #92]	@ (8005fac <SEND_4_BIT+0xac>)
 8005f4e:	f7fe fa32 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data >> 2) & 0x1);
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	089b      	lsrs	r3, r3, #2
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2180      	movs	r1, #128	@ 0x80
 8005f62:	4812      	ldr	r0, [pc, #72]	@ (8005fac <SEND_4_BIT+0xac>)
 8005f64:	f7fe fa27 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data >> 3) & 0x1);
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	08db      	lsrs	r3, r3, #3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f7a:	480c      	ldr	r0, [pc, #48]	@ (8005fac <SEND_4_BIT+0xac>)
 8005f7c:	f7fe fa1b 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8005f80:	2201      	movs	r2, #1
 8005f82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f86:	4808      	ldr	r0, [pc, #32]	@ (8005fa8 <SEND_4_BIT+0xa8>)
 8005f88:	f7fe fa15 	bl	80043b6 <HAL_GPIO_WritePin>
	DELAY_US(500); // Allow LCD to latch
 8005f8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005f90:	f7fb fcd0 	bl	8001934 <DELAY_US>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8005f94:	2200      	movs	r2, #0
 8005f96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f9a:	4803      	ldr	r0, [pc, #12]	@ (8005fa8 <SEND_4_BIT+0xa8>)
 8005f9c:	f7fe fa0b 	bl	80043b6 <HAL_GPIO_WritePin>

}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40010800 	.word	0x40010800
 8005fac:	40010c00 	.word	0x40010c00

08005fb0 <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(char komanda) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas = (komanda >> 4) & 0x0f;
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	091b      	lsrs	r3, r3, #4
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	4b13      	ldr	r3, [pc, #76]	@ (8006010 <LCD_SEND_COMMAND+0x60>)
 8005fc2:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8005fc4:	4b12      	ldr	r3, [pc, #72]	@ (8006010 <LCD_SEND_COMMAND+0x60>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff ff98 	bl	8005f00 <SEND_4_BIT>

	//lower
	siuntimas = (komanda) & 0x0f;
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <LCD_SEND_COMMAND+0x60>)
 8005fda:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006010 <LCD_SEND_COMMAND+0x60>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff ff8c 	bl	8005f00 <SEND_4_BIT>
	if (komanda == 0x01 || komanda == 0x02) {
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d002      	beq.n	8005ff4 <LCD_SEND_COMMAND+0x44>
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d103      	bne.n	8005ffc <LCD_SEND_COMMAND+0x4c>
		HAL_Delay(2); // These are extra slow
 8005ff4:	2002      	movs	r0, #2
 8005ff6:	f7fc fc1b 	bl	8002830 <HAL_Delay>
 8005ffa:	e004      	b.n	8006006 <LCD_SEND_COMMAND+0x56>
	} else {
		DELAY_US(300); // All other commands
 8005ffc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006000:	f7fb fc98 	bl	8001934 <DELAY_US>
	}
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200002fc 	.word	0x200002fc

08006014 <LCD_SEND_DATA>:
void LCD_SEND_DATA(char komanda) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas = (komanda >> 4) & 0x0f;
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	091b      	lsrs	r3, r3, #4
 8006022:	b2da      	uxtb	r2, r3
 8006024:	4b0b      	ldr	r3, [pc, #44]	@ (8006054 <LCD_SEND_DATA+0x40>)
 8006026:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8006028:	4b0a      	ldr	r3, [pc, #40]	@ (8006054 <LCD_SEND_DATA+0x40>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2101      	movs	r1, #1
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff ff66 	bl	8005f00 <SEND_4_BIT>

	//lower
	siuntimas = (komanda) & 0x0f;
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	b2da      	uxtb	r2, r3
 800603c:	4b05      	ldr	r3, [pc, #20]	@ (8006054 <LCD_SEND_DATA+0x40>)
 800603e:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8006040:	4b04      	ldr	r3, [pc, #16]	@ (8006054 <LCD_SEND_DATA+0x40>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2101      	movs	r1, #1
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff ff5a 	bl	8005f00 <SEND_4_BIT>
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	200002fd 	.word	0x200002fd

08006058 <LCD_CLEAR>:

void LCD_CLEAR() {
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_DISPLAY_CLEAR);
 800605c:	2001      	movs	r0, #1
 800605e:	f7ff ffa7 	bl	8005fb0 <LCD_SEND_COMMAND>
}
 8006062:	bf00      	nop
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <LCD_Init>:
		LCD_SEND_DATA(' ');
	}
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
}

void LCD_Init() {
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800606c:	2200      	movs	r2, #0
 800606e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006072:	4827      	ldr	r0, [pc, #156]	@ (8006110 <LCD_Init+0xa8>)
 8006074:	f7fe f99f 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8006078:	2200      	movs	r2, #0
 800607a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800607e:	4824      	ldr	r0, [pc, #144]	@ (8006110 <LCD_Init+0xa8>)
 8006080:	f7fe f999 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8006084:	2200      	movs	r2, #0
 8006086:	2120      	movs	r1, #32
 8006088:	4822      	ldr	r0, [pc, #136]	@ (8006114 <LCD_Init+0xac>)
 800608a:	f7fe f994 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 800608e:	2200      	movs	r2, #0
 8006090:	2140      	movs	r1, #64	@ 0x40
 8006092:	4820      	ldr	r0, [pc, #128]	@ (8006114 <LCD_Init+0xac>)
 8006094:	f7fe f98f 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8006098:	2200      	movs	r2, #0
 800609a:	2180      	movs	r1, #128	@ 0x80
 800609c:	481d      	ldr	r0, [pc, #116]	@ (8006114 <LCD_Init+0xac>)
 800609e:	f7fe f98a 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 80060a2:	2200      	movs	r2, #0
 80060a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80060a8:	481a      	ldr	r0, [pc, #104]	@ (8006114 <LCD_Init+0xac>)
 80060aa:	f7fe f984 	bl	80043b6 <HAL_GPIO_WritePin>

	HAL_Delay(200); // Wait >40ms after power-on
 80060ae:	20c8      	movs	r0, #200	@ 0xc8
 80060b0:	f7fc fbbe 	bl	8002830 <HAL_Delay>
	SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 80060b4:	2100      	movs	r1, #0
 80060b6:	2003      	movs	r0, #3
 80060b8:	f7ff ff22 	bl	8005f00 <SEND_4_BIT>
	HAL_Delay(2);
 80060bc:	2002      	movs	r0, #2
 80060be:	f7fc fbb7 	bl	8002830 <HAL_Delay>
	SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 80060c2:	2100      	movs	r1, #0
 80060c4:	2003      	movs	r0, #3
 80060c6:	f7ff ff1b 	bl	8005f00 <SEND_4_BIT>
	HAL_Delay(2);
 80060ca:	2002      	movs	r0, #2
 80060cc:	f7fc fbb0 	bl	8002830 <HAL_Delay>
	SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 80060d0:	2100      	movs	r1, #0
 80060d2:	2003      	movs	r0, #3
 80060d4:	f7ff ff14 	bl	8005f00 <SEND_4_BIT>
	HAL_Delay(2);
 80060d8:	2002      	movs	r0, #2
 80060da:	f7fc fba9 	bl	8002830 <HAL_Delay>
	SEND_4_BIT(0x2, LCD_RS_INSTRUCTION);
 80060de:	2100      	movs	r1, #0
 80060e0:	2002      	movs	r0, #2
 80060e2:	f7ff ff0d 	bl	8005f00 <SEND_4_BIT>
	HAL_Delay(10);
 80060e6:	200a      	movs	r0, #10
 80060e8:	f7fc fba2 	bl	8002830 <HAL_Delay>

	//4 bit interface started
	LCD_SEND_COMMAND(0x28);  // Function Set: 4-bit, 2 lines, 5x8 dots
 80060ec:	2028      	movs	r0, #40	@ 0x28
 80060ee:	f7ff ff5f 	bl	8005fb0 <LCD_SEND_COMMAND>
	// From now on: full commands (2 x 4-bit transfers)
	LCD_SEND_COMMAND(0x08);  // Display OFF (D=0, C=0, B=0)
 80060f2:	2008      	movs	r0, #8
 80060f4:	f7ff ff5c 	bl	8005fb0 <LCD_SEND_COMMAND>
	LCD_SEND_COMMAND(0x01);  // Clear Display
 80060f8:	2001      	movs	r0, #1
 80060fa:	f7ff ff59 	bl	8005fb0 <LCD_SEND_COMMAND>
	LCD_SEND_COMMAND(0x06);  // Entry Mode Set: Increment, No shift
 80060fe:	2006      	movs	r0, #6
 8006100:	f7ff ff56 	bl	8005fb0 <LCD_SEND_COMMAND>
	LCD_SEND_COMMAND(0x0C);  // Display ON, Cursor OFF, Blink OFF
 8006104:	200c      	movs	r0, #12
 8006106:	f7ff ff53 	bl	8005fb0 <LCD_SEND_COMMAND>
}
 800610a:	bf00      	nop
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40010800 	.word	0x40010800
 8006114:	40010c00 	.word	0x40010c00

08006118 <LCD_SEND_STR>:

void LCD_SEND_STR(const char data[], uint8_t place, uint8_t level) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
 8006124:	4613      	mov	r3, r2
 8006126:	70bb      	strb	r3, [r7, #2]
	/*
	 * @brief Offset from left side and level 0 - top and 1 - bottom
	 */
	if (level == 1) {
 8006128:	78bb      	ldrb	r3, [r7, #2]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d106      	bne.n	800613c <LCD_SEND_STR+0x24>
		LCD_SEND_COMMAND(0xC0 + place);
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	3b40      	subs	r3, #64	@ 0x40
 8006132:	b2db      	uxtb	r3, r3
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff ff3b 	bl	8005fb0 <LCD_SEND_COMMAND>
 800613a:	e005      	b.n	8006148 <LCD_SEND_STR+0x30>
	} else
		LCD_SEND_COMMAND(0x80 + place);
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	3b80      	subs	r3, #128	@ 0x80
 8006140:	b2db      	uxtb	r3, r3
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff ff34 	bl	8005fb0 <LCD_SEND_COMMAND>
	//kai N=high 2 line tai 1 line 0-4F o 2 0-27h   40-67h
	// KAI level 0 tai pirmas kai 1 tai antras levelis
	static uint8_t x;
	x = 0;
 8006148:	4b0f      	ldr	r3, [pc, #60]	@ (8006188 <LCD_SEND_STR+0x70>)
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
	while (data[x] != '\0') {
 800614e:	e00e      	b.n	800616e <LCD_SEND_STR+0x56>
		LCD_SEND_DATA(data[x]);
 8006150:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <LCD_SEND_STR+0x70>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4413      	add	r3, r2
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff ff59 	bl	8006014 <LCD_SEND_DATA>
		x++;
 8006162:	4b09      	ldr	r3, [pc, #36]	@ (8006188 <LCD_SEND_STR+0x70>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	3301      	adds	r3, #1
 8006168:	b2da      	uxtb	r2, r3
 800616a:	4b07      	ldr	r3, [pc, #28]	@ (8006188 <LCD_SEND_STR+0x70>)
 800616c:	701a      	strb	r2, [r3, #0]
	while (data[x] != '\0') {
 800616e:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <LCD_SEND_STR+0x70>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e8      	bne.n	8006150 <LCD_SEND_STR+0x38>
	}
}
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	200002fe 	.word	0x200002fe

0800618c <siprintf>:
 800618c:	b40e      	push	{r1, r2, r3}
 800618e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006192:	b510      	push	{r4, lr}
 8006194:	2400      	movs	r4, #0
 8006196:	b09d      	sub	sp, #116	@ 0x74
 8006198:	ab1f      	add	r3, sp, #124	@ 0x7c
 800619a:	9002      	str	r0, [sp, #8]
 800619c:	9006      	str	r0, [sp, #24]
 800619e:	9107      	str	r1, [sp, #28]
 80061a0:	9104      	str	r1, [sp, #16]
 80061a2:	4809      	ldr	r0, [pc, #36]	@ (80061c8 <siprintf+0x3c>)
 80061a4:	4909      	ldr	r1, [pc, #36]	@ (80061cc <siprintf+0x40>)
 80061a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061aa:	9105      	str	r1, [sp, #20]
 80061ac:	6800      	ldr	r0, [r0, #0]
 80061ae:	a902      	add	r1, sp, #8
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061b4:	f000 f9ac 	bl	8006510 <_svfiprintf_r>
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	701c      	strb	r4, [r3, #0]
 80061bc:	b01d      	add	sp, #116	@ 0x74
 80061be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c2:	b003      	add	sp, #12
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000018 	.word	0x20000018
 80061cc:	ffff0208 	.word	0xffff0208

080061d0 <memmove>:
 80061d0:	4288      	cmp	r0, r1
 80061d2:	b510      	push	{r4, lr}
 80061d4:	eb01 0402 	add.w	r4, r1, r2
 80061d8:	d902      	bls.n	80061e0 <memmove+0x10>
 80061da:	4284      	cmp	r4, r0
 80061dc:	4623      	mov	r3, r4
 80061de:	d807      	bhi.n	80061f0 <memmove+0x20>
 80061e0:	1e43      	subs	r3, r0, #1
 80061e2:	42a1      	cmp	r1, r4
 80061e4:	d008      	beq.n	80061f8 <memmove+0x28>
 80061e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ee:	e7f8      	b.n	80061e2 <memmove+0x12>
 80061f0:	4601      	mov	r1, r0
 80061f2:	4402      	add	r2, r0
 80061f4:	428a      	cmp	r2, r1
 80061f6:	d100      	bne.n	80061fa <memmove+0x2a>
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006202:	e7f7      	b.n	80061f4 <memmove+0x24>

08006204 <memset>:
 8006204:	4603      	mov	r3, r0
 8006206:	4402      	add	r2, r0
 8006208:	4293      	cmp	r3, r2
 800620a:	d100      	bne.n	800620e <memset+0xa>
 800620c:	4770      	bx	lr
 800620e:	f803 1b01 	strb.w	r1, [r3], #1
 8006212:	e7f9      	b.n	8006208 <memset+0x4>

08006214 <__errno>:
 8006214:	4b01      	ldr	r3, [pc, #4]	@ (800621c <__errno+0x8>)
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000018 	.word	0x20000018

08006220 <__libc_init_array>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	2600      	movs	r6, #0
 8006224:	4d0c      	ldr	r5, [pc, #48]	@ (8006258 <__libc_init_array+0x38>)
 8006226:	4c0d      	ldr	r4, [pc, #52]	@ (800625c <__libc_init_array+0x3c>)
 8006228:	1b64      	subs	r4, r4, r5
 800622a:	10a4      	asrs	r4, r4, #2
 800622c:	42a6      	cmp	r6, r4
 800622e:	d109      	bne.n	8006244 <__libc_init_array+0x24>
 8006230:	f000 fc5c 	bl	8006aec <_init>
 8006234:	2600      	movs	r6, #0
 8006236:	4d0a      	ldr	r5, [pc, #40]	@ (8006260 <__libc_init_array+0x40>)
 8006238:	4c0a      	ldr	r4, [pc, #40]	@ (8006264 <__libc_init_array+0x44>)
 800623a:	1b64      	subs	r4, r4, r5
 800623c:	10a4      	asrs	r4, r4, #2
 800623e:	42a6      	cmp	r6, r4
 8006240:	d105      	bne.n	800624e <__libc_init_array+0x2e>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	f855 3b04 	ldr.w	r3, [r5], #4
 8006248:	4798      	blx	r3
 800624a:	3601      	adds	r6, #1
 800624c:	e7ee      	b.n	800622c <__libc_init_array+0xc>
 800624e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006252:	4798      	blx	r3
 8006254:	3601      	adds	r6, #1
 8006256:	e7f2      	b.n	800623e <__libc_init_array+0x1e>
 8006258:	08006c48 	.word	0x08006c48
 800625c:	08006c48 	.word	0x08006c48
 8006260:	08006c48 	.word	0x08006c48
 8006264:	08006c4c 	.word	0x08006c4c

08006268 <__retarget_lock_acquire_recursive>:
 8006268:	4770      	bx	lr

0800626a <__retarget_lock_release_recursive>:
 800626a:	4770      	bx	lr

0800626c <_free_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4605      	mov	r5, r0
 8006270:	2900      	cmp	r1, #0
 8006272:	d040      	beq.n	80062f6 <_free_r+0x8a>
 8006274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006278:	1f0c      	subs	r4, r1, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	bfb8      	it	lt
 800627e:	18e4      	addlt	r4, r4, r3
 8006280:	f000 f8de 	bl	8006440 <__malloc_lock>
 8006284:	4a1c      	ldr	r2, [pc, #112]	@ (80062f8 <_free_r+0x8c>)
 8006286:	6813      	ldr	r3, [r2, #0]
 8006288:	b933      	cbnz	r3, 8006298 <_free_r+0x2c>
 800628a:	6063      	str	r3, [r4, #4]
 800628c:	6014      	str	r4, [r2, #0]
 800628e:	4628      	mov	r0, r5
 8006290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006294:	f000 b8da 	b.w	800644c <__malloc_unlock>
 8006298:	42a3      	cmp	r3, r4
 800629a:	d908      	bls.n	80062ae <_free_r+0x42>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	1821      	adds	r1, r4, r0
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf01      	itttt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	1809      	addeq	r1, r1, r0
 80062aa:	6021      	streq	r1, [r4, #0]
 80062ac:	e7ed      	b.n	800628a <_free_r+0x1e>
 80062ae:	461a      	mov	r2, r3
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	b10b      	cbz	r3, 80062b8 <_free_r+0x4c>
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	d9fa      	bls.n	80062ae <_free_r+0x42>
 80062b8:	6811      	ldr	r1, [r2, #0]
 80062ba:	1850      	adds	r0, r2, r1
 80062bc:	42a0      	cmp	r0, r4
 80062be:	d10b      	bne.n	80062d8 <_free_r+0x6c>
 80062c0:	6820      	ldr	r0, [r4, #0]
 80062c2:	4401      	add	r1, r0
 80062c4:	1850      	adds	r0, r2, r1
 80062c6:	4283      	cmp	r3, r0
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	d1e0      	bne.n	800628e <_free_r+0x22>
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	4408      	add	r0, r1
 80062d2:	6010      	str	r0, [r2, #0]
 80062d4:	6053      	str	r3, [r2, #4]
 80062d6:	e7da      	b.n	800628e <_free_r+0x22>
 80062d8:	d902      	bls.n	80062e0 <_free_r+0x74>
 80062da:	230c      	movs	r3, #12
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	e7d6      	b.n	800628e <_free_r+0x22>
 80062e0:	6820      	ldr	r0, [r4, #0]
 80062e2:	1821      	adds	r1, r4, r0
 80062e4:	428b      	cmp	r3, r1
 80062e6:	bf01      	itttt	eq
 80062e8:	6819      	ldreq	r1, [r3, #0]
 80062ea:	685b      	ldreq	r3, [r3, #4]
 80062ec:	1809      	addeq	r1, r1, r0
 80062ee:	6021      	streq	r1, [r4, #0]
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	6054      	str	r4, [r2, #4]
 80062f4:	e7cb      	b.n	800628e <_free_r+0x22>
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20000444 	.word	0x20000444

080062fc <sbrk_aligned>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4e0f      	ldr	r6, [pc, #60]	@ (800633c <sbrk_aligned+0x40>)
 8006300:	460c      	mov	r4, r1
 8006302:	6831      	ldr	r1, [r6, #0]
 8006304:	4605      	mov	r5, r0
 8006306:	b911      	cbnz	r1, 800630e <sbrk_aligned+0x12>
 8006308:	f000 fb8e 	bl	8006a28 <_sbrk_r>
 800630c:	6030      	str	r0, [r6, #0]
 800630e:	4621      	mov	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f000 fb89 	bl	8006a28 <_sbrk_r>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d103      	bne.n	8006322 <sbrk_aligned+0x26>
 800631a:	f04f 34ff 	mov.w	r4, #4294967295
 800631e:	4620      	mov	r0, r4
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	1cc4      	adds	r4, r0, #3
 8006324:	f024 0403 	bic.w	r4, r4, #3
 8006328:	42a0      	cmp	r0, r4
 800632a:	d0f8      	beq.n	800631e <sbrk_aligned+0x22>
 800632c:	1a21      	subs	r1, r4, r0
 800632e:	4628      	mov	r0, r5
 8006330:	f000 fb7a 	bl	8006a28 <_sbrk_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d1f2      	bne.n	800631e <sbrk_aligned+0x22>
 8006338:	e7ef      	b.n	800631a <sbrk_aligned+0x1e>
 800633a:	bf00      	nop
 800633c:	20000440 	.word	0x20000440

08006340 <_malloc_r>:
 8006340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006344:	1ccd      	adds	r5, r1, #3
 8006346:	f025 0503 	bic.w	r5, r5, #3
 800634a:	3508      	adds	r5, #8
 800634c:	2d0c      	cmp	r5, #12
 800634e:	bf38      	it	cc
 8006350:	250c      	movcc	r5, #12
 8006352:	2d00      	cmp	r5, #0
 8006354:	4606      	mov	r6, r0
 8006356:	db01      	blt.n	800635c <_malloc_r+0x1c>
 8006358:	42a9      	cmp	r1, r5
 800635a:	d904      	bls.n	8006366 <_malloc_r+0x26>
 800635c:	230c      	movs	r3, #12
 800635e:	6033      	str	r3, [r6, #0]
 8006360:	2000      	movs	r0, #0
 8006362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800643c <_malloc_r+0xfc>
 800636a:	f000 f869 	bl	8006440 <__malloc_lock>
 800636e:	f8d8 3000 	ldr.w	r3, [r8]
 8006372:	461c      	mov	r4, r3
 8006374:	bb44      	cbnz	r4, 80063c8 <_malloc_r+0x88>
 8006376:	4629      	mov	r1, r5
 8006378:	4630      	mov	r0, r6
 800637a:	f7ff ffbf 	bl	80062fc <sbrk_aligned>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	4604      	mov	r4, r0
 8006382:	d158      	bne.n	8006436 <_malloc_r+0xf6>
 8006384:	f8d8 4000 	ldr.w	r4, [r8]
 8006388:	4627      	mov	r7, r4
 800638a:	2f00      	cmp	r7, #0
 800638c:	d143      	bne.n	8006416 <_malloc_r+0xd6>
 800638e:	2c00      	cmp	r4, #0
 8006390:	d04b      	beq.n	800642a <_malloc_r+0xea>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	4639      	mov	r1, r7
 8006396:	4630      	mov	r0, r6
 8006398:	eb04 0903 	add.w	r9, r4, r3
 800639c:	f000 fb44 	bl	8006a28 <_sbrk_r>
 80063a0:	4581      	cmp	r9, r0
 80063a2:	d142      	bne.n	800642a <_malloc_r+0xea>
 80063a4:	6821      	ldr	r1, [r4, #0]
 80063a6:	4630      	mov	r0, r6
 80063a8:	1a6d      	subs	r5, r5, r1
 80063aa:	4629      	mov	r1, r5
 80063ac:	f7ff ffa6 	bl	80062fc <sbrk_aligned>
 80063b0:	3001      	adds	r0, #1
 80063b2:	d03a      	beq.n	800642a <_malloc_r+0xea>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	442b      	add	r3, r5
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	f8d8 3000 	ldr.w	r3, [r8]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	bb62      	cbnz	r2, 800641c <_malloc_r+0xdc>
 80063c2:	f8c8 7000 	str.w	r7, [r8]
 80063c6:	e00f      	b.n	80063e8 <_malloc_r+0xa8>
 80063c8:	6822      	ldr	r2, [r4, #0]
 80063ca:	1b52      	subs	r2, r2, r5
 80063cc:	d420      	bmi.n	8006410 <_malloc_r+0xd0>
 80063ce:	2a0b      	cmp	r2, #11
 80063d0:	d917      	bls.n	8006402 <_malloc_r+0xc2>
 80063d2:	1961      	adds	r1, r4, r5
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	6025      	str	r5, [r4, #0]
 80063d8:	bf18      	it	ne
 80063da:	6059      	strne	r1, [r3, #4]
 80063dc:	6863      	ldr	r3, [r4, #4]
 80063de:	bf08      	it	eq
 80063e0:	f8c8 1000 	streq.w	r1, [r8]
 80063e4:	5162      	str	r2, [r4, r5]
 80063e6:	604b      	str	r3, [r1, #4]
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 f82f 	bl	800644c <__malloc_unlock>
 80063ee:	f104 000b 	add.w	r0, r4, #11
 80063f2:	1d23      	adds	r3, r4, #4
 80063f4:	f020 0007 	bic.w	r0, r0, #7
 80063f8:	1ac2      	subs	r2, r0, r3
 80063fa:	bf1c      	itt	ne
 80063fc:	1a1b      	subne	r3, r3, r0
 80063fe:	50a3      	strne	r3, [r4, r2]
 8006400:	e7af      	b.n	8006362 <_malloc_r+0x22>
 8006402:	6862      	ldr	r2, [r4, #4]
 8006404:	42a3      	cmp	r3, r4
 8006406:	bf0c      	ite	eq
 8006408:	f8c8 2000 	streq.w	r2, [r8]
 800640c:	605a      	strne	r2, [r3, #4]
 800640e:	e7eb      	b.n	80063e8 <_malloc_r+0xa8>
 8006410:	4623      	mov	r3, r4
 8006412:	6864      	ldr	r4, [r4, #4]
 8006414:	e7ae      	b.n	8006374 <_malloc_r+0x34>
 8006416:	463c      	mov	r4, r7
 8006418:	687f      	ldr	r7, [r7, #4]
 800641a:	e7b6      	b.n	800638a <_malloc_r+0x4a>
 800641c:	461a      	mov	r2, r3
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	42a3      	cmp	r3, r4
 8006422:	d1fb      	bne.n	800641c <_malloc_r+0xdc>
 8006424:	2300      	movs	r3, #0
 8006426:	6053      	str	r3, [r2, #4]
 8006428:	e7de      	b.n	80063e8 <_malloc_r+0xa8>
 800642a:	230c      	movs	r3, #12
 800642c:	4630      	mov	r0, r6
 800642e:	6033      	str	r3, [r6, #0]
 8006430:	f000 f80c 	bl	800644c <__malloc_unlock>
 8006434:	e794      	b.n	8006360 <_malloc_r+0x20>
 8006436:	6005      	str	r5, [r0, #0]
 8006438:	e7d6      	b.n	80063e8 <_malloc_r+0xa8>
 800643a:	bf00      	nop
 800643c:	20000444 	.word	0x20000444

08006440 <__malloc_lock>:
 8006440:	4801      	ldr	r0, [pc, #4]	@ (8006448 <__malloc_lock+0x8>)
 8006442:	f7ff bf11 	b.w	8006268 <__retarget_lock_acquire_recursive>
 8006446:	bf00      	nop
 8006448:	2000043c 	.word	0x2000043c

0800644c <__malloc_unlock>:
 800644c:	4801      	ldr	r0, [pc, #4]	@ (8006454 <__malloc_unlock+0x8>)
 800644e:	f7ff bf0c 	b.w	800626a <__retarget_lock_release_recursive>
 8006452:	bf00      	nop
 8006454:	2000043c 	.word	0x2000043c

08006458 <__ssputs_r>:
 8006458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	461f      	mov	r7, r3
 800645e:	688e      	ldr	r6, [r1, #8]
 8006460:	4682      	mov	sl, r0
 8006462:	42be      	cmp	r6, r7
 8006464:	460c      	mov	r4, r1
 8006466:	4690      	mov	r8, r2
 8006468:	680b      	ldr	r3, [r1, #0]
 800646a:	d82d      	bhi.n	80064c8 <__ssputs_r+0x70>
 800646c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006470:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006474:	d026      	beq.n	80064c4 <__ssputs_r+0x6c>
 8006476:	6965      	ldr	r5, [r4, #20]
 8006478:	6909      	ldr	r1, [r1, #16]
 800647a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800647e:	eba3 0901 	sub.w	r9, r3, r1
 8006482:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006486:	1c7b      	adds	r3, r7, #1
 8006488:	444b      	add	r3, r9
 800648a:	106d      	asrs	r5, r5, #1
 800648c:	429d      	cmp	r5, r3
 800648e:	bf38      	it	cc
 8006490:	461d      	movcc	r5, r3
 8006492:	0553      	lsls	r3, r2, #21
 8006494:	d527      	bpl.n	80064e6 <__ssputs_r+0x8e>
 8006496:	4629      	mov	r1, r5
 8006498:	f7ff ff52 	bl	8006340 <_malloc_r>
 800649c:	4606      	mov	r6, r0
 800649e:	b360      	cbz	r0, 80064fa <__ssputs_r+0xa2>
 80064a0:	464a      	mov	r2, r9
 80064a2:	6921      	ldr	r1, [r4, #16]
 80064a4:	f000 fade 	bl	8006a64 <memcpy>
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	6126      	str	r6, [r4, #16]
 80064b6:	444e      	add	r6, r9
 80064b8:	6026      	str	r6, [r4, #0]
 80064ba:	463e      	mov	r6, r7
 80064bc:	6165      	str	r5, [r4, #20]
 80064be:	eba5 0509 	sub.w	r5, r5, r9
 80064c2:	60a5      	str	r5, [r4, #8]
 80064c4:	42be      	cmp	r6, r7
 80064c6:	d900      	bls.n	80064ca <__ssputs_r+0x72>
 80064c8:	463e      	mov	r6, r7
 80064ca:	4632      	mov	r2, r6
 80064cc:	4641      	mov	r1, r8
 80064ce:	6820      	ldr	r0, [r4, #0]
 80064d0:	f7ff fe7e 	bl	80061d0 <memmove>
 80064d4:	2000      	movs	r0, #0
 80064d6:	68a3      	ldr	r3, [r4, #8]
 80064d8:	1b9b      	subs	r3, r3, r6
 80064da:	60a3      	str	r3, [r4, #8]
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	4433      	add	r3, r6
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e6:	462a      	mov	r2, r5
 80064e8:	f000 faca 	bl	8006a80 <_realloc_r>
 80064ec:	4606      	mov	r6, r0
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d1e0      	bne.n	80064b4 <__ssputs_r+0x5c>
 80064f2:	4650      	mov	r0, sl
 80064f4:	6921      	ldr	r1, [r4, #16]
 80064f6:	f7ff feb9 	bl	800626c <_free_r>
 80064fa:	230c      	movs	r3, #12
 80064fc:	f8ca 3000 	str.w	r3, [sl]
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
 8006506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	e7e9      	b.n	80064e2 <__ssputs_r+0x8a>
	...

08006510 <_svfiprintf_r>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	4698      	mov	r8, r3
 8006516:	898b      	ldrh	r3, [r1, #12]
 8006518:	4607      	mov	r7, r0
 800651a:	061b      	lsls	r3, r3, #24
 800651c:	460d      	mov	r5, r1
 800651e:	4614      	mov	r4, r2
 8006520:	b09d      	sub	sp, #116	@ 0x74
 8006522:	d510      	bpl.n	8006546 <_svfiprintf_r+0x36>
 8006524:	690b      	ldr	r3, [r1, #16]
 8006526:	b973      	cbnz	r3, 8006546 <_svfiprintf_r+0x36>
 8006528:	2140      	movs	r1, #64	@ 0x40
 800652a:	f7ff ff09 	bl	8006340 <_malloc_r>
 800652e:	6028      	str	r0, [r5, #0]
 8006530:	6128      	str	r0, [r5, #16]
 8006532:	b930      	cbnz	r0, 8006542 <_svfiprintf_r+0x32>
 8006534:	230c      	movs	r3, #12
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	b01d      	add	sp, #116	@ 0x74
 800653e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006542:	2340      	movs	r3, #64	@ 0x40
 8006544:	616b      	str	r3, [r5, #20]
 8006546:	2300      	movs	r3, #0
 8006548:	9309      	str	r3, [sp, #36]	@ 0x24
 800654a:	2320      	movs	r3, #32
 800654c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006550:	2330      	movs	r3, #48	@ 0x30
 8006552:	f04f 0901 	mov.w	r9, #1
 8006556:	f8cd 800c 	str.w	r8, [sp, #12]
 800655a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80066f4 <_svfiprintf_r+0x1e4>
 800655e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006562:	4623      	mov	r3, r4
 8006564:	469a      	mov	sl, r3
 8006566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656a:	b10a      	cbz	r2, 8006570 <_svfiprintf_r+0x60>
 800656c:	2a25      	cmp	r2, #37	@ 0x25
 800656e:	d1f9      	bne.n	8006564 <_svfiprintf_r+0x54>
 8006570:	ebba 0b04 	subs.w	fp, sl, r4
 8006574:	d00b      	beq.n	800658e <_svfiprintf_r+0x7e>
 8006576:	465b      	mov	r3, fp
 8006578:	4622      	mov	r2, r4
 800657a:	4629      	mov	r1, r5
 800657c:	4638      	mov	r0, r7
 800657e:	f7ff ff6b 	bl	8006458 <__ssputs_r>
 8006582:	3001      	adds	r0, #1
 8006584:	f000 80a7 	beq.w	80066d6 <_svfiprintf_r+0x1c6>
 8006588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800658a:	445a      	add	r2, fp
 800658c:	9209      	str	r2, [sp, #36]	@ 0x24
 800658e:	f89a 3000 	ldrb.w	r3, [sl]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 809f 	beq.w	80066d6 <_svfiprintf_r+0x1c6>
 8006598:	2300      	movs	r3, #0
 800659a:	f04f 32ff 	mov.w	r2, #4294967295
 800659e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a2:	f10a 0a01 	add.w	sl, sl, #1
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	9307      	str	r3, [sp, #28]
 80065aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80065b0:	4654      	mov	r4, sl
 80065b2:	2205      	movs	r2, #5
 80065b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b8:	484e      	ldr	r0, [pc, #312]	@ (80066f4 <_svfiprintf_r+0x1e4>)
 80065ba:	f000 fa45 	bl	8006a48 <memchr>
 80065be:	9a04      	ldr	r2, [sp, #16]
 80065c0:	b9d8      	cbnz	r0, 80065fa <_svfiprintf_r+0xea>
 80065c2:	06d0      	lsls	r0, r2, #27
 80065c4:	bf44      	itt	mi
 80065c6:	2320      	movmi	r3, #32
 80065c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065cc:	0711      	lsls	r1, r2, #28
 80065ce:	bf44      	itt	mi
 80065d0:	232b      	movmi	r3, #43	@ 0x2b
 80065d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065d6:	f89a 3000 	ldrb.w	r3, [sl]
 80065da:	2b2a      	cmp	r3, #42	@ 0x2a
 80065dc:	d015      	beq.n	800660a <_svfiprintf_r+0xfa>
 80065de:	4654      	mov	r4, sl
 80065e0:	2000      	movs	r0, #0
 80065e2:	f04f 0c0a 	mov.w	ip, #10
 80065e6:	9a07      	ldr	r2, [sp, #28]
 80065e8:	4621      	mov	r1, r4
 80065ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ee:	3b30      	subs	r3, #48	@ 0x30
 80065f0:	2b09      	cmp	r3, #9
 80065f2:	d94b      	bls.n	800668c <_svfiprintf_r+0x17c>
 80065f4:	b1b0      	cbz	r0, 8006624 <_svfiprintf_r+0x114>
 80065f6:	9207      	str	r2, [sp, #28]
 80065f8:	e014      	b.n	8006624 <_svfiprintf_r+0x114>
 80065fa:	eba0 0308 	sub.w	r3, r0, r8
 80065fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006602:	4313      	orrs	r3, r2
 8006604:	46a2      	mov	sl, r4
 8006606:	9304      	str	r3, [sp, #16]
 8006608:	e7d2      	b.n	80065b0 <_svfiprintf_r+0xa0>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	1d19      	adds	r1, r3, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	9103      	str	r1, [sp, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfbb      	ittet	lt
 8006616:	425b      	neglt	r3, r3
 8006618:	f042 0202 	orrlt.w	r2, r2, #2
 800661c:	9307      	strge	r3, [sp, #28]
 800661e:	9307      	strlt	r3, [sp, #28]
 8006620:	bfb8      	it	lt
 8006622:	9204      	strlt	r2, [sp, #16]
 8006624:	7823      	ldrb	r3, [r4, #0]
 8006626:	2b2e      	cmp	r3, #46	@ 0x2e
 8006628:	d10a      	bne.n	8006640 <_svfiprintf_r+0x130>
 800662a:	7863      	ldrb	r3, [r4, #1]
 800662c:	2b2a      	cmp	r3, #42	@ 0x2a
 800662e:	d132      	bne.n	8006696 <_svfiprintf_r+0x186>
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	3402      	adds	r4, #2
 8006634:	1d1a      	adds	r2, r3, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	9203      	str	r2, [sp, #12]
 800663a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800663e:	9305      	str	r3, [sp, #20]
 8006640:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80066f8 <_svfiprintf_r+0x1e8>
 8006644:	2203      	movs	r2, #3
 8006646:	4650      	mov	r0, sl
 8006648:	7821      	ldrb	r1, [r4, #0]
 800664a:	f000 f9fd 	bl	8006a48 <memchr>
 800664e:	b138      	cbz	r0, 8006660 <_svfiprintf_r+0x150>
 8006650:	2240      	movs	r2, #64	@ 0x40
 8006652:	9b04      	ldr	r3, [sp, #16]
 8006654:	eba0 000a 	sub.w	r0, r0, sl
 8006658:	4082      	lsls	r2, r0
 800665a:	4313      	orrs	r3, r2
 800665c:	3401      	adds	r4, #1
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006664:	2206      	movs	r2, #6
 8006666:	4825      	ldr	r0, [pc, #148]	@ (80066fc <_svfiprintf_r+0x1ec>)
 8006668:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800666c:	f000 f9ec 	bl	8006a48 <memchr>
 8006670:	2800      	cmp	r0, #0
 8006672:	d036      	beq.n	80066e2 <_svfiprintf_r+0x1d2>
 8006674:	4b22      	ldr	r3, [pc, #136]	@ (8006700 <_svfiprintf_r+0x1f0>)
 8006676:	bb1b      	cbnz	r3, 80066c0 <_svfiprintf_r+0x1b0>
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	3307      	adds	r3, #7
 800667c:	f023 0307 	bic.w	r3, r3, #7
 8006680:	3308      	adds	r3, #8
 8006682:	9303      	str	r3, [sp, #12]
 8006684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006686:	4433      	add	r3, r6
 8006688:	9309      	str	r3, [sp, #36]	@ 0x24
 800668a:	e76a      	b.n	8006562 <_svfiprintf_r+0x52>
 800668c:	460c      	mov	r4, r1
 800668e:	2001      	movs	r0, #1
 8006690:	fb0c 3202 	mla	r2, ip, r2, r3
 8006694:	e7a8      	b.n	80065e8 <_svfiprintf_r+0xd8>
 8006696:	2300      	movs	r3, #0
 8006698:	f04f 0c0a 	mov.w	ip, #10
 800669c:	4619      	mov	r1, r3
 800669e:	3401      	adds	r4, #1
 80066a0:	9305      	str	r3, [sp, #20]
 80066a2:	4620      	mov	r0, r4
 80066a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066a8:	3a30      	subs	r2, #48	@ 0x30
 80066aa:	2a09      	cmp	r2, #9
 80066ac:	d903      	bls.n	80066b6 <_svfiprintf_r+0x1a6>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0c6      	beq.n	8006640 <_svfiprintf_r+0x130>
 80066b2:	9105      	str	r1, [sp, #20]
 80066b4:	e7c4      	b.n	8006640 <_svfiprintf_r+0x130>
 80066b6:	4604      	mov	r4, r0
 80066b8:	2301      	movs	r3, #1
 80066ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80066be:	e7f0      	b.n	80066a2 <_svfiprintf_r+0x192>
 80066c0:	ab03      	add	r3, sp, #12
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	462a      	mov	r2, r5
 80066c6:	4638      	mov	r0, r7
 80066c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006704 <_svfiprintf_r+0x1f4>)
 80066ca:	a904      	add	r1, sp, #16
 80066cc:	f3af 8000 	nop.w
 80066d0:	1c42      	adds	r2, r0, #1
 80066d2:	4606      	mov	r6, r0
 80066d4:	d1d6      	bne.n	8006684 <_svfiprintf_r+0x174>
 80066d6:	89ab      	ldrh	r3, [r5, #12]
 80066d8:	065b      	lsls	r3, r3, #25
 80066da:	f53f af2d 	bmi.w	8006538 <_svfiprintf_r+0x28>
 80066de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066e0:	e72c      	b.n	800653c <_svfiprintf_r+0x2c>
 80066e2:	ab03      	add	r3, sp, #12
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	462a      	mov	r2, r5
 80066e8:	4638      	mov	r0, r7
 80066ea:	4b06      	ldr	r3, [pc, #24]	@ (8006704 <_svfiprintf_r+0x1f4>)
 80066ec:	a904      	add	r1, sp, #16
 80066ee:	f000 f87d 	bl	80067ec <_printf_i>
 80066f2:	e7ed      	b.n	80066d0 <_svfiprintf_r+0x1c0>
 80066f4:	08006c0a 	.word	0x08006c0a
 80066f8:	08006c10 	.word	0x08006c10
 80066fc:	08006c14 	.word	0x08006c14
 8006700:	00000000 	.word	0x00000000
 8006704:	08006459 	.word	0x08006459

08006708 <_printf_common>:
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	4616      	mov	r6, r2
 800670e:	4698      	mov	r8, r3
 8006710:	688a      	ldr	r2, [r1, #8]
 8006712:	690b      	ldr	r3, [r1, #16]
 8006714:	4607      	mov	r7, r0
 8006716:	4293      	cmp	r3, r2
 8006718:	bfb8      	it	lt
 800671a:	4613      	movlt	r3, r2
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006722:	460c      	mov	r4, r1
 8006724:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006728:	b10a      	cbz	r2, 800672e <_printf_common+0x26>
 800672a:	3301      	adds	r3, #1
 800672c:	6033      	str	r3, [r6, #0]
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	0699      	lsls	r1, r3, #26
 8006732:	bf42      	ittt	mi
 8006734:	6833      	ldrmi	r3, [r6, #0]
 8006736:	3302      	addmi	r3, #2
 8006738:	6033      	strmi	r3, [r6, #0]
 800673a:	6825      	ldr	r5, [r4, #0]
 800673c:	f015 0506 	ands.w	r5, r5, #6
 8006740:	d106      	bne.n	8006750 <_printf_common+0x48>
 8006742:	f104 0a19 	add.w	sl, r4, #25
 8006746:	68e3      	ldr	r3, [r4, #12]
 8006748:	6832      	ldr	r2, [r6, #0]
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	42ab      	cmp	r3, r5
 800674e:	dc2b      	bgt.n	80067a8 <_printf_common+0xa0>
 8006750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	3b00      	subs	r3, #0
 8006758:	bf18      	it	ne
 800675a:	2301      	movne	r3, #1
 800675c:	0692      	lsls	r2, r2, #26
 800675e:	d430      	bmi.n	80067c2 <_printf_common+0xba>
 8006760:	4641      	mov	r1, r8
 8006762:	4638      	mov	r0, r7
 8006764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006768:	47c8      	blx	r9
 800676a:	3001      	adds	r0, #1
 800676c:	d023      	beq.n	80067b6 <_printf_common+0xae>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	6922      	ldr	r2, [r4, #16]
 8006772:	f003 0306 	and.w	r3, r3, #6
 8006776:	2b04      	cmp	r3, #4
 8006778:	bf14      	ite	ne
 800677a:	2500      	movne	r5, #0
 800677c:	6833      	ldreq	r3, [r6, #0]
 800677e:	f04f 0600 	mov.w	r6, #0
 8006782:	bf08      	it	eq
 8006784:	68e5      	ldreq	r5, [r4, #12]
 8006786:	f104 041a 	add.w	r4, r4, #26
 800678a:	bf08      	it	eq
 800678c:	1aed      	subeq	r5, r5, r3
 800678e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006792:	bf08      	it	eq
 8006794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006798:	4293      	cmp	r3, r2
 800679a:	bfc4      	itt	gt
 800679c:	1a9b      	subgt	r3, r3, r2
 800679e:	18ed      	addgt	r5, r5, r3
 80067a0:	42b5      	cmp	r5, r6
 80067a2:	d11a      	bne.n	80067da <_printf_common+0xd2>
 80067a4:	2000      	movs	r0, #0
 80067a6:	e008      	b.n	80067ba <_printf_common+0xb2>
 80067a8:	2301      	movs	r3, #1
 80067aa:	4652      	mov	r2, sl
 80067ac:	4641      	mov	r1, r8
 80067ae:	4638      	mov	r0, r7
 80067b0:	47c8      	blx	r9
 80067b2:	3001      	adds	r0, #1
 80067b4:	d103      	bne.n	80067be <_printf_common+0xb6>
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067be:	3501      	adds	r5, #1
 80067c0:	e7c1      	b.n	8006746 <_printf_common+0x3e>
 80067c2:	2030      	movs	r0, #48	@ 0x30
 80067c4:	18e1      	adds	r1, r4, r3
 80067c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067d0:	4422      	add	r2, r4
 80067d2:	3302      	adds	r3, #2
 80067d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067d8:	e7c2      	b.n	8006760 <_printf_common+0x58>
 80067da:	2301      	movs	r3, #1
 80067dc:	4622      	mov	r2, r4
 80067de:	4641      	mov	r1, r8
 80067e0:	4638      	mov	r0, r7
 80067e2:	47c8      	blx	r9
 80067e4:	3001      	adds	r0, #1
 80067e6:	d0e6      	beq.n	80067b6 <_printf_common+0xae>
 80067e8:	3601      	adds	r6, #1
 80067ea:	e7d9      	b.n	80067a0 <_printf_common+0x98>

080067ec <_printf_i>:
 80067ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	7e0f      	ldrb	r7, [r1, #24]
 80067f2:	4691      	mov	r9, r2
 80067f4:	2f78      	cmp	r7, #120	@ 0x78
 80067f6:	4680      	mov	r8, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	469a      	mov	sl, r3
 80067fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006802:	d807      	bhi.n	8006814 <_printf_i+0x28>
 8006804:	2f62      	cmp	r7, #98	@ 0x62
 8006806:	d80a      	bhi.n	800681e <_printf_i+0x32>
 8006808:	2f00      	cmp	r7, #0
 800680a:	f000 80d1 	beq.w	80069b0 <_printf_i+0x1c4>
 800680e:	2f58      	cmp	r7, #88	@ 0x58
 8006810:	f000 80b8 	beq.w	8006984 <_printf_i+0x198>
 8006814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800681c:	e03a      	b.n	8006894 <_printf_i+0xa8>
 800681e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006822:	2b15      	cmp	r3, #21
 8006824:	d8f6      	bhi.n	8006814 <_printf_i+0x28>
 8006826:	a101      	add	r1, pc, #4	@ (adr r1, 800682c <_printf_i+0x40>)
 8006828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800682c:	08006885 	.word	0x08006885
 8006830:	08006899 	.word	0x08006899
 8006834:	08006815 	.word	0x08006815
 8006838:	08006815 	.word	0x08006815
 800683c:	08006815 	.word	0x08006815
 8006840:	08006815 	.word	0x08006815
 8006844:	08006899 	.word	0x08006899
 8006848:	08006815 	.word	0x08006815
 800684c:	08006815 	.word	0x08006815
 8006850:	08006815 	.word	0x08006815
 8006854:	08006815 	.word	0x08006815
 8006858:	08006997 	.word	0x08006997
 800685c:	080068c3 	.word	0x080068c3
 8006860:	08006951 	.word	0x08006951
 8006864:	08006815 	.word	0x08006815
 8006868:	08006815 	.word	0x08006815
 800686c:	080069b9 	.word	0x080069b9
 8006870:	08006815 	.word	0x08006815
 8006874:	080068c3 	.word	0x080068c3
 8006878:	08006815 	.word	0x08006815
 800687c:	08006815 	.word	0x08006815
 8006880:	08006959 	.word	0x08006959
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	1d1a      	adds	r2, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6032      	str	r2, [r6, #0]
 800688c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006894:	2301      	movs	r3, #1
 8006896:	e09c      	b.n	80069d2 <_printf_i+0x1e6>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	6820      	ldr	r0, [r4, #0]
 800689c:	1d19      	adds	r1, r3, #4
 800689e:	6031      	str	r1, [r6, #0]
 80068a0:	0606      	lsls	r6, r0, #24
 80068a2:	d501      	bpl.n	80068a8 <_printf_i+0xbc>
 80068a4:	681d      	ldr	r5, [r3, #0]
 80068a6:	e003      	b.n	80068b0 <_printf_i+0xc4>
 80068a8:	0645      	lsls	r5, r0, #25
 80068aa:	d5fb      	bpl.n	80068a4 <_printf_i+0xb8>
 80068ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	da03      	bge.n	80068bc <_printf_i+0xd0>
 80068b4:	232d      	movs	r3, #45	@ 0x2d
 80068b6:	426d      	negs	r5, r5
 80068b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068bc:	230a      	movs	r3, #10
 80068be:	4858      	ldr	r0, [pc, #352]	@ (8006a20 <_printf_i+0x234>)
 80068c0:	e011      	b.n	80068e6 <_printf_i+0xfa>
 80068c2:	6821      	ldr	r1, [r4, #0]
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	0608      	lsls	r0, r1, #24
 80068c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80068cc:	d402      	bmi.n	80068d4 <_printf_i+0xe8>
 80068ce:	0649      	lsls	r1, r1, #25
 80068d0:	bf48      	it	mi
 80068d2:	b2ad      	uxthmi	r5, r5
 80068d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068d6:	6033      	str	r3, [r6, #0]
 80068d8:	bf14      	ite	ne
 80068da:	230a      	movne	r3, #10
 80068dc:	2308      	moveq	r3, #8
 80068de:	4850      	ldr	r0, [pc, #320]	@ (8006a20 <_printf_i+0x234>)
 80068e0:	2100      	movs	r1, #0
 80068e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068e6:	6866      	ldr	r6, [r4, #4]
 80068e8:	2e00      	cmp	r6, #0
 80068ea:	60a6      	str	r6, [r4, #8]
 80068ec:	db05      	blt.n	80068fa <_printf_i+0x10e>
 80068ee:	6821      	ldr	r1, [r4, #0]
 80068f0:	432e      	orrs	r6, r5
 80068f2:	f021 0104 	bic.w	r1, r1, #4
 80068f6:	6021      	str	r1, [r4, #0]
 80068f8:	d04b      	beq.n	8006992 <_printf_i+0x1a6>
 80068fa:	4616      	mov	r6, r2
 80068fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006900:	fb03 5711 	mls	r7, r3, r1, r5
 8006904:	5dc7      	ldrb	r7, [r0, r7]
 8006906:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800690a:	462f      	mov	r7, r5
 800690c:	42bb      	cmp	r3, r7
 800690e:	460d      	mov	r5, r1
 8006910:	d9f4      	bls.n	80068fc <_printf_i+0x110>
 8006912:	2b08      	cmp	r3, #8
 8006914:	d10b      	bne.n	800692e <_printf_i+0x142>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	07df      	lsls	r7, r3, #31
 800691a:	d508      	bpl.n	800692e <_printf_i+0x142>
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	6861      	ldr	r1, [r4, #4]
 8006920:	4299      	cmp	r1, r3
 8006922:	bfde      	ittt	le
 8006924:	2330      	movle	r3, #48	@ 0x30
 8006926:	f806 3c01 	strble.w	r3, [r6, #-1]
 800692a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800692e:	1b92      	subs	r2, r2, r6
 8006930:	6122      	str	r2, [r4, #16]
 8006932:	464b      	mov	r3, r9
 8006934:	4621      	mov	r1, r4
 8006936:	4640      	mov	r0, r8
 8006938:	f8cd a000 	str.w	sl, [sp]
 800693c:	aa03      	add	r2, sp, #12
 800693e:	f7ff fee3 	bl	8006708 <_printf_common>
 8006942:	3001      	adds	r0, #1
 8006944:	d14a      	bne.n	80069dc <_printf_i+0x1f0>
 8006946:	f04f 30ff 	mov.w	r0, #4294967295
 800694a:	b004      	add	sp, #16
 800694c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	f043 0320 	orr.w	r3, r3, #32
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	2778      	movs	r7, #120	@ 0x78
 800695a:	4832      	ldr	r0, [pc, #200]	@ (8006a24 <_printf_i+0x238>)
 800695c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	6831      	ldr	r1, [r6, #0]
 8006964:	061f      	lsls	r7, r3, #24
 8006966:	f851 5b04 	ldr.w	r5, [r1], #4
 800696a:	d402      	bmi.n	8006972 <_printf_i+0x186>
 800696c:	065f      	lsls	r7, r3, #25
 800696e:	bf48      	it	mi
 8006970:	b2ad      	uxthmi	r5, r5
 8006972:	6031      	str	r1, [r6, #0]
 8006974:	07d9      	lsls	r1, r3, #31
 8006976:	bf44      	itt	mi
 8006978:	f043 0320 	orrmi.w	r3, r3, #32
 800697c:	6023      	strmi	r3, [r4, #0]
 800697e:	b11d      	cbz	r5, 8006988 <_printf_i+0x19c>
 8006980:	2310      	movs	r3, #16
 8006982:	e7ad      	b.n	80068e0 <_printf_i+0xf4>
 8006984:	4826      	ldr	r0, [pc, #152]	@ (8006a20 <_printf_i+0x234>)
 8006986:	e7e9      	b.n	800695c <_printf_i+0x170>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	f023 0320 	bic.w	r3, r3, #32
 800698e:	6023      	str	r3, [r4, #0]
 8006990:	e7f6      	b.n	8006980 <_printf_i+0x194>
 8006992:	4616      	mov	r6, r2
 8006994:	e7bd      	b.n	8006912 <_printf_i+0x126>
 8006996:	6833      	ldr	r3, [r6, #0]
 8006998:	6825      	ldr	r5, [r4, #0]
 800699a:	1d18      	adds	r0, r3, #4
 800699c:	6961      	ldr	r1, [r4, #20]
 800699e:	6030      	str	r0, [r6, #0]
 80069a0:	062e      	lsls	r6, r5, #24
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	d501      	bpl.n	80069aa <_printf_i+0x1be>
 80069a6:	6019      	str	r1, [r3, #0]
 80069a8:	e002      	b.n	80069b0 <_printf_i+0x1c4>
 80069aa:	0668      	lsls	r0, r5, #25
 80069ac:	d5fb      	bpl.n	80069a6 <_printf_i+0x1ba>
 80069ae:	8019      	strh	r1, [r3, #0]
 80069b0:	2300      	movs	r3, #0
 80069b2:	4616      	mov	r6, r2
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	e7bc      	b.n	8006932 <_printf_i+0x146>
 80069b8:	6833      	ldr	r3, [r6, #0]
 80069ba:	2100      	movs	r1, #0
 80069bc:	1d1a      	adds	r2, r3, #4
 80069be:	6032      	str	r2, [r6, #0]
 80069c0:	681e      	ldr	r6, [r3, #0]
 80069c2:	6862      	ldr	r2, [r4, #4]
 80069c4:	4630      	mov	r0, r6
 80069c6:	f000 f83f 	bl	8006a48 <memchr>
 80069ca:	b108      	cbz	r0, 80069d0 <_printf_i+0x1e4>
 80069cc:	1b80      	subs	r0, r0, r6
 80069ce:	6060      	str	r0, [r4, #4]
 80069d0:	6863      	ldr	r3, [r4, #4]
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	2300      	movs	r3, #0
 80069d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069da:	e7aa      	b.n	8006932 <_printf_i+0x146>
 80069dc:	4632      	mov	r2, r6
 80069de:	4649      	mov	r1, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	47d0      	blx	sl
 80069e6:	3001      	adds	r0, #1
 80069e8:	d0ad      	beq.n	8006946 <_printf_i+0x15a>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	079b      	lsls	r3, r3, #30
 80069ee:	d413      	bmi.n	8006a18 <_printf_i+0x22c>
 80069f0:	68e0      	ldr	r0, [r4, #12]
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	4298      	cmp	r0, r3
 80069f6:	bfb8      	it	lt
 80069f8:	4618      	movlt	r0, r3
 80069fa:	e7a6      	b.n	800694a <_printf_i+0x15e>
 80069fc:	2301      	movs	r3, #1
 80069fe:	4632      	mov	r2, r6
 8006a00:	4649      	mov	r1, r9
 8006a02:	4640      	mov	r0, r8
 8006a04:	47d0      	blx	sl
 8006a06:	3001      	adds	r0, #1
 8006a08:	d09d      	beq.n	8006946 <_printf_i+0x15a>
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	68e3      	ldr	r3, [r4, #12]
 8006a0e:	9903      	ldr	r1, [sp, #12]
 8006a10:	1a5b      	subs	r3, r3, r1
 8006a12:	42ab      	cmp	r3, r5
 8006a14:	dcf2      	bgt.n	80069fc <_printf_i+0x210>
 8006a16:	e7eb      	b.n	80069f0 <_printf_i+0x204>
 8006a18:	2500      	movs	r5, #0
 8006a1a:	f104 0619 	add.w	r6, r4, #25
 8006a1e:	e7f5      	b.n	8006a0c <_printf_i+0x220>
 8006a20:	08006c1b 	.word	0x08006c1b
 8006a24:	08006c2c 	.word	0x08006c2c

08006a28 <_sbrk_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4d05      	ldr	r5, [pc, #20]	@ (8006a44 <_sbrk_r+0x1c>)
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fb fcac 	bl	8002390 <_sbrk>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_sbrk_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_sbrk_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	20000438 	.word	0x20000438

08006a48 <memchr>:
 8006a48:	4603      	mov	r3, r0
 8006a4a:	b510      	push	{r4, lr}
 8006a4c:	b2c9      	uxtb	r1, r1
 8006a4e:	4402      	add	r2, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	4618      	mov	r0, r3
 8006a54:	d101      	bne.n	8006a5a <memchr+0x12>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e003      	b.n	8006a62 <memchr+0x1a>
 8006a5a:	7804      	ldrb	r4, [r0, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	428c      	cmp	r4, r1
 8006a60:	d1f6      	bne.n	8006a50 <memchr+0x8>
 8006a62:	bd10      	pop	{r4, pc}

08006a64 <memcpy>:
 8006a64:	440a      	add	r2, r1
 8006a66:	4291      	cmp	r1, r2
 8006a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a6c:	d100      	bne.n	8006a70 <memcpy+0xc>
 8006a6e:	4770      	bx	lr
 8006a70:	b510      	push	{r4, lr}
 8006a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a76:	4291      	cmp	r1, r2
 8006a78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a7c:	d1f9      	bne.n	8006a72 <memcpy+0xe>
 8006a7e:	bd10      	pop	{r4, pc}

08006a80 <_realloc_r>:
 8006a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a84:	4607      	mov	r7, r0
 8006a86:	4614      	mov	r4, r2
 8006a88:	460d      	mov	r5, r1
 8006a8a:	b921      	cbnz	r1, 8006a96 <_realloc_r+0x16>
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a92:	f7ff bc55 	b.w	8006340 <_malloc_r>
 8006a96:	b92a      	cbnz	r2, 8006aa4 <_realloc_r+0x24>
 8006a98:	f7ff fbe8 	bl	800626c <_free_r>
 8006a9c:	4625      	mov	r5, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa4:	f000 f81a 	bl	8006adc <_malloc_usable_size_r>
 8006aa8:	4284      	cmp	r4, r0
 8006aaa:	4606      	mov	r6, r0
 8006aac:	d802      	bhi.n	8006ab4 <_realloc_r+0x34>
 8006aae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ab2:	d8f4      	bhi.n	8006a9e <_realloc_r+0x1e>
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	f7ff fc42 	bl	8006340 <_malloc_r>
 8006abc:	4680      	mov	r8, r0
 8006abe:	b908      	cbnz	r0, 8006ac4 <_realloc_r+0x44>
 8006ac0:	4645      	mov	r5, r8
 8006ac2:	e7ec      	b.n	8006a9e <_realloc_r+0x1e>
 8006ac4:	42b4      	cmp	r4, r6
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	4629      	mov	r1, r5
 8006aca:	bf28      	it	cs
 8006acc:	4632      	movcs	r2, r6
 8006ace:	f7ff ffc9 	bl	8006a64 <memcpy>
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	f7ff fbc9 	bl	800626c <_free_r>
 8006ada:	e7f1      	b.n	8006ac0 <_realloc_r+0x40>

08006adc <_malloc_usable_size_r>:
 8006adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae0:	1f18      	subs	r0, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bfbc      	itt	lt
 8006ae6:	580b      	ldrlt	r3, [r1, r0]
 8006ae8:	18c0      	addlt	r0, r0, r3
 8006aea:	4770      	bx	lr

08006aec <_init>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr

08006af8 <_fini>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr
