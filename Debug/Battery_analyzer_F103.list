
Battery_analyzer_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000652c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800663c  0800663c  0000763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006750  08006750  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006750  08006750  00007750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006758  08006758  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006758  08006758  00007758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800675c  0800675c  0000775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006760  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000068  080067c8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000304  20000444  080067c8  00008444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c379  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002742  00000000  00000000  0001440a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00016b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c0  00000000  00000000  00017810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c7e  00000000  00000000  000181d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010335  00000000  00000000  00030e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ddd5  00000000  00000000  00041183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cef58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  000cef9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d29b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006624 	.word	0x08006624

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006624 	.word	0x08006624

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	@ 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	@ 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	@ 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__aeabi_f2iz>:
 8000e98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ea0:	d30f      	bcc.n	8000ec2 <__aeabi_f2iz+0x2a>
 8000ea2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ea6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eaa:	d90d      	bls.n	8000ec8 <__aeabi_f2iz+0x30>
 8000eac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000eb4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000eb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ebc:	bf18      	it	ne
 8000ebe:	4240      	negne	r0, r0
 8000ec0:	4770      	bx	lr
 8000ec2:	f04f 0000 	mov.w	r0, #0
 8000ec6:	4770      	bx	lr
 8000ec8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ecc:	d101      	bne.n	8000ed2 <__aeabi_f2iz+0x3a>
 8000ece:	0242      	lsls	r2, r0, #9
 8000ed0:	d105      	bne.n	8000ede <__aeabi_f2iz+0x46>
 8000ed2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000ed6:	bf08      	it	eq
 8000ed8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000edc:	4770      	bx	lr
 8000ede:	f04f 0000 	mov.w	r0, #0
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_f2uiz>:
 8000ee4:	0042      	lsls	r2, r0, #1
 8000ee6:	d20e      	bcs.n	8000f06 <__aeabi_f2uiz+0x22>
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000eec:	d30b      	bcc.n	8000f06 <__aeabi_f2uiz+0x22>
 8000eee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d409      	bmi.n	8000f0c <__aeabi_f2uiz+0x28>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	4770      	bx	lr
 8000f0c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f10:	d101      	bne.n	8000f16 <__aeabi_f2uiz+0x32>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	d102      	bne.n	8000f1c <__aeabi_f2uiz+0x38>
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	4770      	bx	lr
 8000f1c:	f04f 0000 	mov.w	r0, #0
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	615a      	str	r2, [r3, #20]
 8000f46:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f48:	4b2e      	ldr	r3, [pc, #184]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001008 <MX_ADC1_Init+0xe4>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000f50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f62:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000f64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000f70:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f76:	4823      	ldr	r0, [pc, #140]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000f78:	f001 fb4c 	bl	8002614 <HAL_ADC_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8000f82:	f001 f83d 	bl	8002000 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	481a      	ldr	r0, [pc, #104]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000f9a:	f001 fdc3 	bl	8002b24 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8000fa4:	f001 f82c 	bl	8002000 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4813      	ldr	r0, [pc, #76]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000fb8:	f001 fdb4 	bl	8002b24 <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8000fc2:	f001 f81d 	bl	8002000 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 8000fc6:	2311      	movs	r3, #17
 8000fc8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000fd6:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000fda:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_ADC1_Init+0xe0>)
 8000fee:	f002 f9f7 	bl	80033e0 <HAL_ADCEx_InjectedConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ff8:	f001 f802 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	@ 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000084 	.word	0x20000084
 8001008:	40012400 	.word	0x40012400

0800100c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a2c      	ldr	r2, [pc, #176]	@ (80010d8 <HAL_ADC_MspInit+0xcc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d151      	bne.n	80010d0 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102c:	4b2b      	ldr	r3, [pc, #172]	@ (80010dc <HAL_ADC_MspInit+0xd0>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a2a      	ldr	r2, [pc, #168]	@ (80010dc <HAL_ADC_MspInit+0xd0>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <HAL_ADC_MspInit+0xd0>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <HAL_ADC_MspInit+0xd0>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a24      	ldr	r2, [pc, #144]	@ (80010dc <HAL_ADC_MspInit+0xd0>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <HAL_ADC_MspInit+0xd0>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800105c:	2303      	movs	r3, #3
 800105e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001060:	2303      	movs	r3, #3
 8001062:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	481d      	ldr	r0, [pc, #116]	@ (80010e0 <HAL_ADC_MspInit+0xd4>)
 800106c:	f002 fe4e 	bl	8003d0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 8001072:	4a1d      	ldr	r2, [pc, #116]	@ (80010e8 <HAL_ADC_MspInit+0xdc>)
 8001074:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001076:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800107c:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001082:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 8001084:	2280      	movs	r2, #128	@ 0x80
 8001086:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001088:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 800108a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800108e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 8001092:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001096:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 800109a:	2220      	movs	r2, #32
 800109c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010a4:	480f      	ldr	r0, [pc, #60]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 80010a6:	f002 fc43 	bl	8003930 <HAL_DMA_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80010b0:	f000 ffa6 	bl	8002000 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a0b      	ldr	r2, [pc, #44]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 80010b8:	621a      	str	r2, [r3, #32]
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <HAL_ADC_MspInit+0xd8>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2012      	movs	r0, #18
 80010c6:	f002 fbfc 	bl	80038c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010ca:	2012      	movs	r0, #18
 80010cc:	f002 fc15 	bl	80038fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40012400 	.word	0x40012400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	200000b4 	.word	0x200000b4
 80010e8:	40020008 	.word	0x40020008

080010ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_DMA_Init+0x38>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <MX_DMA_Init+0x38>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_DMA_Init+0x38>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	200b      	movs	r0, #11
 8001110:	f002 fbd7 	bl	80038c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001114:	200b      	movs	r0, #11
 8001116:	f002 fbf0 	bl	80038fa <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	4b47      	ldr	r3, [pc, #284]	@ (800125c <MX_GPIO_Init+0x134>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a46      	ldr	r2, [pc, #280]	@ (800125c <MX_GPIO_Init+0x134>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b44      	ldr	r3, [pc, #272]	@ (800125c <MX_GPIO_Init+0x134>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	4b41      	ldr	r3, [pc, #260]	@ (800125c <MX_GPIO_Init+0x134>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a40      	ldr	r2, [pc, #256]	@ (800125c <MX_GPIO_Init+0x134>)
 800115a:	f043 0320 	orr.w	r3, r3, #32
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b3e      	ldr	r3, [pc, #248]	@ (800125c <MX_GPIO_Init+0x134>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b3b      	ldr	r3, [pc, #236]	@ (800125c <MX_GPIO_Init+0x134>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a3a      	ldr	r2, [pc, #232]	@ (800125c <MX_GPIO_Init+0x134>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <MX_GPIO_Init+0x134>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b35      	ldr	r3, [pc, #212]	@ (800125c <MX_GPIO_Init+0x134>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a34      	ldr	r2, [pc, #208]	@ (800125c <MX_GPIO_Init+0x134>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b32      	ldr	r3, [pc, #200]	@ (800125c <MX_GPIO_Init+0x134>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED_Pin|CHARGING_STATE_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80011a2:	482f      	ldr	r0, [pc, #188]	@ (8001260 <MX_GPIO_Init+0x138>)
 80011a4:	f002 ff4d 	bl	8004042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80011ae:	482d      	ldr	r0, [pc, #180]	@ (8001264 <MX_GPIO_Init+0x13c>)
 80011b0:	f002 ff47 	bl	8004042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80011ba:	482b      	ldr	r0, [pc, #172]	@ (8001268 <MX_GPIO_Init+0x140>)
 80011bc:	f002 ff41 	bl	8004042 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_LED_Pin CHARGING_STATE_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|CHARGING_STATE_Pin;
 80011c0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	4821      	ldr	r0, [pc, #132]	@ (8001260 <MX_GPIO_Init+0x138>)
 80011da:	f002 fd97 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_mode_Pin Button_sub_Pin Button_add_Pin */
  GPIO_InitStruct.Pin = Button_mode_Pin|Button_sub_Pin|Button_add_Pin;
 80011de:	f640 4302 	movw	r3, #3074	@ 0xc02
 80011e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <MX_GPIO_Init+0x144>)
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	481d      	ldr	r0, [pc, #116]	@ (8001268 <MX_GPIO_Init+0x140>)
 80011f4:	f002 fd8a 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 80011f8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80011fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	4814      	ldr	r0, [pc, #80]	@ (8001264 <MX_GPIO_Init+0x13c>)
 8001212:	f002 fd7b 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8001216:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	480e      	ldr	r0, [pc, #56]	@ (8001268 <MX_GPIO_Init+0x140>)
 8001230:	f002 fd6c 	bl	8003d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2007      	movs	r0, #7
 800123a:	f002 fb42 	bl	80038c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800123e:	2007      	movs	r0, #7
 8001240:	f002 fb5b 	bl	80038fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2028      	movs	r0, #40	@ 0x28
 800124a:	f002 fb3a 	bl	80038c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800124e:	2028      	movs	r0, #40	@ 0x28
 8001250:	f002 fb53 	bl	80038fa <HAL_NVIC_EnableIRQ>

}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	40011000 	.word	0x40011000
 8001264:	40010800 	.word	0x40010800
 8001268:	40010c00 	.word	0x40010c00
 800126c:	10110000 	.word	0x10110000

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001276:	f001 f947 	bl	8002508 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127a:	f000 fa91 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127e:	f7ff ff53 	bl	8001128 <MX_GPIO_Init>
  MX_DMA_Init();
 8001282:	f7ff ff33 	bl	80010ec <MX_DMA_Init>
  MX_TIM4_Init();
 8001286:	f001 f84f 	bl	8002328 <MX_TIM4_Init>
  MX_TIM3_Init();
 800128a:	f000 ffff 	bl	800228c <MX_TIM3_Init>
  MX_ADC1_Init();
 800128e:	f7ff fe49 	bl	8000f24 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001292:	f000 ff87 	bl	80021a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_ADCEx_Calibration_Start(&hadc1) !=HAL_OK)
 8001296:	48ac      	ldr	r0, [pc, #688]	@ (8001548 <main+0x2d8>)
 8001298:	f001 fe3e 	bl	8002f18 <HAL_ADCEx_Calibration_Start>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <main+0x42>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a8:	48a8      	ldr	r0, [pc, #672]	@ (800154c <main+0x2dc>)
 80012aa:	f002 feca 	bl	8004042 <HAL_GPIO_WritePin>
		Error_Handler();
 80012ae:	f000 fea7 	bl	8002000 <Error_Handler>
	}
	if(HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK)//TIM2 for DELAY_US
 80012b2:	48a7      	ldr	r0, [pc, #668]	@ (8001550 <main+0x2e0>)
 80012b4:	f003 fcae 	bl	8004c14 <HAL_TIM_Base_Start_IT>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <main+0x5e>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012c4:	48a1      	ldr	r0, [pc, #644]	@ (800154c <main+0x2dc>)
 80012c6:	f002 febc 	bl	8004042 <HAL_GPIO_WritePin>
		Error_Handler();
 80012ca:	f000 fe99 	bl	8002000 <Error_Handler>
	}

	HAL_Delay(500);// wait for DC point
 80012ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012d2:	f001 f97b 	bl	80025cc <HAL_Delay>

	//Read internal reference for VDDA
	HAL_ADCEx_InjectedStart(&hadc1);
 80012d6:	489c      	ldr	r0, [pc, #624]	@ (8001548 <main+0x2d8>)
 80012d8:	f001 fecc 	bl	8003074 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedPollForConversion(&hadc1, 500);
 80012dc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80012e0:	4899      	ldr	r0, [pc, #612]	@ (8001548 <main+0x2d8>)
 80012e2:	f001 ff4d 	bl	8003180 <HAL_ADCEx_InjectedPollForConversion>
	uint16_t Vadc = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80012e6:	2101      	movs	r1, #1
 80012e8:	4897      	ldr	r0, [pc, #604]	@ (8001548 <main+0x2d8>)
 80012ea:	f002 f841 	bl	8003370 <HAL_ADCEx_InjectedGetValue>
 80012ee:	4603      	mov	r3, r0
 80012f0:	81fb      	strh	r3, [r7, #14]
	Vdda = 1.0*ADC_steps/Vadc*Vrefint;
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f885 	bl	8000404 <__aeabi_i2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	f04f 0000 	mov.w	r0, #0
 8001302:	4994      	ldr	r1, [pc, #592]	@ (8001554 <main+0x2e4>)
 8001304:	f7ff fa12 	bl	800072c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001314:	4b90      	ldr	r3, [pc, #576]	@ (8001558 <main+0x2e8>)
 8001316:	f7ff f8df 	bl	80004d8 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fb0b 	bl	800093c <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	4a8c      	ldr	r2, [pc, #560]	@ (800155c <main+0x2ec>)
 800132a:	6013      	str	r3, [r2, #0]

	/*
	 * @brief Init in 4 bit LCD 16x2
	 */
	LCD_Init();
 800132c:	f004 fc38 	bl	8005ba0 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(updateScreenRequest)//only perform LCD switch states on gpio change
 8001330:	4b8b      	ldr	r3, [pc, #556]	@ (8001560 <main+0x2f0>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <main+0xce>
		{
			updateScreen();
 800133a:	f000 faad 	bl	8001898 <updateScreen>
		}

		switch(STATE_MCU_CURRENT)
 800133e:	4b89      	ldr	r3, [pc, #548]	@ (8001564 <main+0x2f4>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	3b01      	subs	r3, #1
 8001346:	2b03      	cmp	r3, #3
 8001348:	f200 80f7 	bhi.w	800153a <main+0x2ca>
 800134c:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <main+0xe4>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	0800153b 	.word	0x0800153b
 8001358:	08001365 	.word	0x08001365
 800135c:	0800153b 	.word	0x0800153b
 8001360:	0800153b 	.word	0x0800153b
			break;
		}
		case  DISCHARGE:
		{
			//ONCE TO DO
			if(STATE_MCU_CURRENT != STATE_MCU_PREVIOUS)
 8001364:	4b7f      	ldr	r3, [pc, #508]	@ (8001564 <main+0x2f4>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b7f      	ldr	r3, [pc, #508]	@ (8001568 <main+0x2f8>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	429a      	cmp	r2, r3
 8001372:	d040      	beq.n	80013f6 <main+0x186>
			{
				if(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK)//TIM3 for SAMPLING
 8001374:	487d      	ldr	r0, [pc, #500]	@ (800156c <main+0x2fc>)
 8001376:	f003 fc4d 	bl	8004c14 <HAL_TIM_Base_Start_IT>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <main+0x120>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001386:	4871      	ldr	r0, [pc, #452]	@ (800154c <main+0x2dc>)
 8001388:	f002 fe5b 	bl	8004042 <HAL_GPIO_WritePin>
					Error_Handler();
 800138c:	f000 fe38 	bl	8002000 <Error_Handler>
				}
				if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_DMA_SIZE)!=HAL_OK)//ADC SAMPLING DMA
 8001390:	2264      	movs	r2, #100	@ 0x64
 8001392:	4977      	ldr	r1, [pc, #476]	@ (8001570 <main+0x300>)
 8001394:	486c      	ldr	r0, [pc, #432]	@ (8001548 <main+0x2d8>)
 8001396:	f001 fa15 	bl	80027c4 <HAL_ADC_Start_DMA>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <main+0x140>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a6:	4869      	ldr	r0, [pc, #420]	@ (800154c <main+0x2dc>)
 80013a8:	f002 fe4b 	bl	8004042 <HAL_GPIO_WritePin>
					Error_Handler();
 80013ac:	f000 fe28 	bl	8002000 <Error_Handler>
				}
				if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4)!=HAL_OK)//TIM2 for MOSFET PWM
 80013b0:	210c      	movs	r1, #12
 80013b2:	4870      	ldr	r0, [pc, #448]	@ (8001574 <main+0x304>)
 80013b4:	f003 fcd8 	bl	8004d68 <HAL_TIM_PWM_Start>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <main+0x15e>
				{
					HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013c4:	4861      	ldr	r0, [pc, #388]	@ (800154c <main+0x2dc>)
 80013c6:	f002 fe3c 	bl	8004042 <HAL_GPIO_WritePin>
					Error_Handler();
 80013ca:	f000 fe19 	bl	8002000 <Error_Handler>
				}
				STATE_MCU_PREVIOUS = STATE_MCU_CURRENT;
 80013ce:	4b65      	ldr	r3, [pc, #404]	@ (8001564 <main+0x2f4>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b64      	ldr	r3, [pc, #400]	@ (8001568 <main+0x2f8>)
 80013d6:	701a      	strb	r2, [r3, #0]
				DischargeDisplayData.start_time = uwTick;
 80013d8:	4b67      	ldr	r3, [pc, #412]	@ (8001578 <main+0x308>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a67      	ldr	r2, [pc, #412]	@ (800157c <main+0x30c>)
 80013de:	60d3      	str	r3, [r2, #12]
				HAL_GPIO_WritePin(CHARGING_STATE_GPIO_Port, CHARGING_STATE_Pin,GPIO_PIN_SET); // indication for charging
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013e6:	4859      	ldr	r0, [pc, #356]	@ (800154c <main+0x2dc>)
 80013e8:	f002 fe2b 	bl	8004042 <HAL_GPIO_WritePin>
				last_tick = uwTick;
 80013ec:	4b62      	ldr	r3, [pc, #392]	@ (8001578 <main+0x308>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a63      	ldr	r2, [pc, #396]	@ (8001580 <main+0x310>)
 80013f2:	6013      	str	r3, [r2, #0]
				break;
 80013f4:	e0d3      	b.n	800159e <main+0x32e>
			}



			//PERIODIC UPDATE
			if(uwTick - last_tick > 500)// 0.5s refresh rate
 80013f6:	4b60      	ldr	r3, [pc, #384]	@ (8001578 <main+0x308>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b61      	ldr	r3, [pc, #388]	@ (8001580 <main+0x310>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001404:	f240 80ca 	bls.w	800159c <main+0x32c>
			{
				updateScreenRequest=1;
 8001408:	4b55      	ldr	r3, [pc, #340]	@ (8001560 <main+0x2f0>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140e:	b672      	cpsid	i
}
 8001410:	bf00      	nop
				uint32_t local_temp_volt;
				uint32_t local_temp_curr;
				uint16_t local_temp_count;

				__disable_irq();
				local_temp_volt = ADC_VOLTAGE_ACCUM;
 8001412:	4b5c      	ldr	r3, [pc, #368]	@ (8001584 <main+0x314>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60bb      	str	r3, [r7, #8]
				local_temp_curr = ADC_CURRENT_ACCUM;
 8001418:	4b5b      	ldr	r3, [pc, #364]	@ (8001588 <main+0x318>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	607b      	str	r3, [r7, #4]
				local_temp_count = ADC_READING_COUNTER;
 800141e:	4b5b      	ldr	r3, [pc, #364]	@ (800158c <main+0x31c>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	807b      	strh	r3, [r7, #2]

				ADC_READING_COUNTER=0;
 8001424:	4b59      	ldr	r3, [pc, #356]	@ (800158c <main+0x31c>)
 8001426:	2200      	movs	r2, #0
 8001428:	801a      	strh	r2, [r3, #0]
				ADC_CURRENT_ACCUM=0;
 800142a:	4b57      	ldr	r3, [pc, #348]	@ (8001588 <main+0x318>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
				ADC_VOLTAGE_ACCUM=0;
 8001430:	4b54      	ldr	r3, [pc, #336]	@ (8001584 <main+0x314>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001436:	b662      	cpsie	i
}
 8001438:	bf00      	nop
				__enable_irq();

				DischargeDisplayData.voltage = Vdda*local_temp_volt/local_temp_count/ADC_steps*R_divider_multiplier;//convert from ADC to Voltage
 800143a:	68b8      	ldr	r0, [r7, #8]
 800143c:	f7ff fb84 	bl	8000b48 <__aeabi_ui2f>
 8001440:	4602      	mov	r2, r0
 8001442:	4b46      	ldr	r3, [pc, #280]	@ (800155c <main+0x2ec>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	4610      	mov	r0, r2
 800144a:	f7ff fbd5 	bl	8000bf8 <__aeabi_fmul>
 800144e:	4603      	mov	r3, r0
 8001450:	461c      	mov	r4, r3
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb7b 	bl	8000b50 <__aeabi_i2f>
 800145a:	4603      	mov	r3, r0
 800145c:	4619      	mov	r1, r3
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff fc7e 	bl	8000d60 <__aeabi_fdiv>
 8001464:	4603      	mov	r3, r0
 8001466:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fc78 	bl	8000d60 <__aeabi_fdiv>
 8001470:	4603      	mov	r3, r0
 8001472:	4947      	ldr	r1, [pc, #284]	@ (8001590 <main+0x320>)
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc73 	bl	8000d60 <__aeabi_fdiv>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <main+0x30c>)
 8001480:	601a      	str	r2, [r3, #0]
				DischargeDisplayData.current_ma = Vdda*local_temp_curr/local_temp_count/R_load/ADC_steps*1000;//curr is voltage(XD)
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fb60 	bl	8000b48 <__aeabi_ui2f>
 8001488:	4602      	mov	r2, r0
 800148a:	4b34      	ldr	r3, [pc, #208]	@ (800155c <main+0x2ec>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	4610      	mov	r0, r2
 8001492:	f7ff fbb1 	bl	8000bf8 <__aeabi_fmul>
 8001496:	4603      	mov	r3, r0
 8001498:	461c      	mov	r4, r3
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fb57 	bl	8000b50 <__aeabi_i2f>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4619      	mov	r1, r3
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff fc5a 	bl	8000d60 <__aeabi_fdiv>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ffba 	bl	8000428 <__aeabi_f2d>
 80014b4:	a322      	add	r3, pc, #136	@ (adr r3, 8001540 <main+0x2d0>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f937 	bl	800072c <__aeabi_ddiv>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <main+0x2e4>)
 80014cc:	f7ff f92e 	bl	800072c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <main+0x324>)
 80014de:	f7fe fffb 	bl	80004d8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fa27 	bl	800093c <__aeabi_d2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a22      	ldr	r2, [pc, #136]	@ (800157c <main+0x30c>)
 80014f2:	6053      	str	r3, [r2, #4]

				last_tick = uwTick;
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <main+0x308>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a21      	ldr	r2, [pc, #132]	@ (8001580 <main+0x310>)
 80014fa:	6013      	str	r3, [r2, #0]

				if(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin)==GPIO_PIN_SET)
 80014fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001500:	4825      	ldr	r0, [pc, #148]	@ (8001598 <main+0x328>)
 8001502:	f002 fd87 	bl	8004014 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <main+0x2aa>
				{
					TIM2->CCR4 += 10;
 800150c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001516:	330a      	adds	r3, #10
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
				}

				if(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin)==GPIO_PIN_SET)
 800151a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800151e:	481e      	ldr	r0, [pc, #120]	@ (8001598 <main+0x328>)
 8001520:	f002 fd78 	bl	8004014 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	2b01      	cmp	r3, #1
 8001528:	d138      	bne.n	800159c <main+0x32c>
				{
					TIM2->CCR4 -= 10;
 800152a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001534:	3b0a      	subs	r3, #10
 8001536:	6413      	str	r3, [r2, #64]	@ 0x40
				}
			}
			break;
 8001538:	e030      	b.n	800159c <main+0x32c>
			break;
		}
		default:
		{

			break;
 800153a:	bf00      	nop
 800153c:	e02f      	b.n	800159e <main+0x32e>
 800153e:	bf00      	nop
 8001540:	c28f5c29 	.word	0xc28f5c29
 8001544:	3fcc28f5 	.word	0x3fcc28f5
 8001548:	20000084 	.word	0x20000084
 800154c:	40011000 	.word	0x40011000
 8001550:	200002ac 	.word	0x200002ac
 8001554:	40b00000 	.word	0x40b00000
 8001558:	3ff33333 	.word	0x3ff33333
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004
 8001564:	200000f8 	.word	0x200000f8
 8001568:	200000f9 	.word	0x200000f9
 800156c:	20000264 	.word	0x20000264
 8001570:	2000011c 	.word	0x2000011c
 8001574:	2000021c 	.word	0x2000021c
 8001578:	200002f4 	.word	0x200002f4
 800157c:	200001f8 	.word	0x200001f8
 8001580:	20000208 	.word	0x20000208
 8001584:	200001ec 	.word	0x200001ec
 8001588:	200001f0 	.word	0x200001f0
 800158c:	200001f4 	.word	0x200001f4
 8001590:	3e3da12f 	.word	0x3e3da12f
 8001594:	408f4000 	.word	0x408f4000
 8001598:	40010c00 	.word	0x40010c00
			break;
 800159c:	bf00      	nop
		}
		}

		if(button_activity)
 800159e:	4b76      	ldr	r3, [pc, #472]	@ (8001778 <main+0x508>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f43f aec3 	beq.w	8001330 <main+0xc0>
		{
			if(STATE_MCU_CURRENT == SETUP)
 80015aa:	4b74      	ldr	r3, [pc, #464]	@ (800177c <main+0x50c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f040 80dd 	bne.w	8001770 <main+0x500>
			{
				if(HAL_GPIO_ReadPin(Button_mode_GPIO_Port, Button_mode_Pin) == GPIO_PIN_SET)
 80015b6:	2102      	movs	r1, #2
 80015b8:	4871      	ldr	r0, [pc, #452]	@ (8001780 <main+0x510>)
 80015ba:	f002 fd2b 	bl	8004014 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d127      	bne.n	8001614 <main+0x3a4>
				{
					SETUP_CONFIGURATION = 	(SETUP_CONFIGURATION+1)%SETUP_PARAM_COUNT;
 80015c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001784 <main+0x514>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	3301      	adds	r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	bfb8      	it	lt
 80015d4:	425b      	neglt	r3, r3
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001784 <main+0x514>)
 80015da:	701a      	strb	r2, [r3, #0]
					while(HAL_GPIO_ReadPin(Button_mode_GPIO_Port, Button_mode_Pin) == GPIO_PIN_SET)
 80015dc:	e012      	b.n	8001604 <main+0x394>
					{
						if(uwTick-last_button_time > BUTTON_LONG_PRESS)
 80015de:	4b6a      	ldr	r3, [pc, #424]	@ (8001788 <main+0x518>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b6a      	ldr	r3, [pc, #424]	@ (800178c <main+0x51c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015ec:	d90a      	bls.n	8001604 <main+0x394>
						{
							STATE_MCU_CURRENT = DISCHARGE;
 80015ee:	4b63      	ldr	r3, [pc, #396]	@ (800177c <main+0x50c>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	701a      	strb	r2, [r3, #0]
							STATE_MCU_PREVIOUS = SETUP;
 80015f4:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <main+0x520>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
							last_button_time = uwTick;
 80015fa:	4b63      	ldr	r3, [pc, #396]	@ (8001788 <main+0x518>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a63      	ldr	r2, [pc, #396]	@ (800178c <main+0x51c>)
 8001600:	6013      	str	r3, [r2, #0]
							break;//stop the loop, since its in different state now
 8001602:	e0b2      	b.n	800176a <main+0x4fa>
					while(HAL_GPIO_ReadPin(Button_mode_GPIO_Port, Button_mode_Pin) == GPIO_PIN_SET)
 8001604:	2102      	movs	r1, #2
 8001606:	485e      	ldr	r0, [pc, #376]	@ (8001780 <main+0x510>)
 8001608:	f002 fd04 	bl	8004014 <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d0e5      	beq.n	80015de <main+0x36e>
 8001612:	e0aa      	b.n	800176a <main+0x4fa>
						}
					}
				}
				else if(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin) == GPIO_PIN_SET)
 8001614:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001618:	4859      	ldr	r0, [pc, #356]	@ (8001780 <main+0x510>)
 800161a:	f002 fcfb 	bl	8004014 <HAL_GPIO_ReadPin>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	d14d      	bne.n	80016c0 <main+0x450>
				{
					if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 8001624:	4b57      	ldr	r3, [pc, #348]	@ (8001784 <main+0x514>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <main+0x3ce>
					{
						Cutoff_voltage += 100;// 100 mV step
 800162e:	4b59      	ldr	r3, [pc, #356]	@ (8001794 <main+0x524>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	3364      	adds	r3, #100	@ 0x64
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b56      	ldr	r3, [pc, #344]	@ (8001794 <main+0x524>)
 800163a:	801a      	strh	r2, [r3, #0]
 800163c:	e033      	b.n	80016a6 <main+0x436>
					}
					else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 800163e:	4b51      	ldr	r3, [pc, #324]	@ (8001784 <main+0x514>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d12e      	bne.n	80016a6 <main+0x436>
					{
						Discharge_current+=10;// 10 mA step
 8001648:	4b53      	ldr	r3, [pc, #332]	@ (8001798 <main+0x528>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	330a      	adds	r3, #10
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b51      	ldr	r3, [pc, #324]	@ (8001798 <main+0x528>)
 8001654:	801a      	strh	r2, [r3, #0]
					}
					while(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin) == GPIO_PIN_SET)
 8001656:	e026      	b.n	80016a6 <main+0x436>
					{
						if(uwTick-last_button_time > BUTTON_LONG_PRESS)
 8001658:	4b4b      	ldr	r3, [pc, #300]	@ (8001788 <main+0x518>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b4b      	ldr	r3, [pc, #300]	@ (800178c <main+0x51c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001666:	d91e      	bls.n	80016a6 <main+0x436>
						{
							if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 8001668:	4b46      	ldr	r3, [pc, #280]	@ (8001784 <main+0x514>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d107      	bne.n	8001682 <main+0x412>
							{
								Cutoff_voltage += 100;// 100 mV step
 8001672:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <main+0x524>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	3364      	adds	r3, #100	@ 0x64
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b45      	ldr	r3, [pc, #276]	@ (8001794 <main+0x524>)
 800167e:	801a      	strh	r2, [r3, #0]
 8001680:	e00b      	b.n	800169a <main+0x42a>
							}
							else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 8001682:	4b40      	ldr	r3, [pc, #256]	@ (8001784 <main+0x514>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d106      	bne.n	800169a <main+0x42a>
							{
								Discharge_current+=10;// 10 mA step
 800168c:	4b42      	ldr	r3, [pc, #264]	@ (8001798 <main+0x528>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	330a      	adds	r3, #10
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <main+0x528>)
 8001698:	801a      	strh	r2, [r3, #0]
							}
							DELAY_US(10000);
 800169a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800169e:	f000 f8cf 	bl	8001840 <DELAY_US>
							updateScreen();//periodically update because of the auto increment
 80016a2:	f000 f8f9 	bl	8001898 <updateScreen>
					while(HAL_GPIO_ReadPin(Button_add_GPIO_Port, Button_add_Pin) == GPIO_PIN_SET)
 80016a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016aa:	4835      	ldr	r0, [pc, #212]	@ (8001780 <main+0x510>)
 80016ac:	f002 fcb2 	bl	8004014 <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d0d0      	beq.n	8001658 <main+0x3e8>
						}
					}
					last_button_time = uwTick;
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <main+0x518>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a34      	ldr	r2, [pc, #208]	@ (800178c <main+0x51c>)
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e054      	b.n	800176a <main+0x4fa>
				}
				else if(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin) == GPIO_PIN_SET)
 80016c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016c4:	482e      	ldr	r0, [pc, #184]	@ (8001780 <main+0x510>)
 80016c6:	f002 fca5 	bl	8004014 <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d14c      	bne.n	800176a <main+0x4fa>
				{
					if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 80016d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <main+0x514>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d107      	bne.n	80016ea <main+0x47a>
					{
						Cutoff_voltage -= 100;// 100 mV step
 80016da:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <main+0x524>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3b64      	subs	r3, #100	@ 0x64
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <main+0x524>)
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	e033      	b.n	8001752 <main+0x4e2>
					}
					else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <main+0x514>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d12e      	bne.n	8001752 <main+0x4e2>
					{
						Discharge_current-=10;// 10 mA step
 80016f4:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <main+0x528>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b0a      	subs	r3, #10
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <main+0x528>)
 8001700:	801a      	strh	r2, [r3, #0]
					}
					while(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin) == GPIO_PIN_SET)
 8001702:	e026      	b.n	8001752 <main+0x4e2>
					{
						if(uwTick-last_button_time > BUTTON_LONG_PRESS)
 8001704:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <main+0x518>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <main+0x51c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001712:	d91e      	bls.n	8001752 <main+0x4e2>
						{
							if(SETUP_CONFIGURATION == SETUP_PARAM_CUTOFF_VOLTAGE)
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <main+0x514>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <main+0x4be>
							{
								Cutoff_voltage -= 100;// 100 mV step
 800171e:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <main+0x524>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	3b64      	subs	r3, #100	@ 0x64
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <main+0x524>)
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	e00b      	b.n	8001746 <main+0x4d6>
							}
							else if(SETUP_CONFIGURATION == SETUP_PARAM_DISCHARGE_CURRENT)
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <main+0x514>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d106      	bne.n	8001746 <main+0x4d6>
							{
								Discharge_current-=10;// 10 mA step
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <main+0x528>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	3b0a      	subs	r3, #10
 8001740:	b29a      	uxth	r2, r3
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <main+0x528>)
 8001744:	801a      	strh	r2, [r3, #0]
							}
							DELAY_US(10000);
 8001746:	f242 7010 	movw	r0, #10000	@ 0x2710
 800174a:	f000 f879 	bl	8001840 <DELAY_US>
							updateScreen();//periodically update because of the auto increment
 800174e:	f000 f8a3 	bl	8001898 <updateScreen>
					while(HAL_GPIO_ReadPin(Button_sub_GPIO_Port, Button_sub_Pin) == GPIO_PIN_SET)
 8001752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001756:	480a      	ldr	r0, [pc, #40]	@ (8001780 <main+0x510>)
 8001758:	f002 fc5c 	bl	8004014 <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b01      	cmp	r3, #1
 8001760:	d0d0      	beq.n	8001704 <main+0x494>
						}
					}
					last_button_time = uwTick;
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <main+0x518>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a09      	ldr	r2, [pc, #36]	@ (800178c <main+0x51c>)
 8001768:	6013      	str	r3, [r2, #0]
				}
				updateScreenRequest = 1;
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <main+0x52c>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
			}
			button_activity = 0;
 8001770:	4b01      	ldr	r3, [pc, #4]	@ (8001778 <main+0x508>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
		if(updateScreenRequest)//only perform LCD switch states on gpio change
 8001776:	e5db      	b.n	8001330 <main+0xc0>
 8001778:	200001e4 	.word	0x200001e4
 800177c:	200000f8 	.word	0x200000f8
 8001780:	40010c00 	.word	0x40010c00
 8001784:	200000fa 	.word	0x200000fa
 8001788:	200002f4 	.word	0x200002f4
 800178c:	200001e8 	.word	0x200001e8
 8001790:	200000f9 	.word	0x200000f9
 8001794:	20000008 	.word	0x20000008
 8001798:	20000006 	.word	0x20000006
 800179c:	20000004 	.word	0x20000004

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	@ 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017aa:	2228      	movs	r2, #40	@ 0x28
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 fac4 	bl	8005d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017da:	2300      	movs	r3, #0
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fc5e 	bl	80040a4 <HAL_RCC_OscConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0x52>
  {
    Error_Handler();
 80017ee:	f000 fc07 	bl	8002000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f2:	230f      	movs	r3, #15
 80017f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fecb 	bl	80045a8 <HAL_RCC_ClockConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001818:	f000 fbf2 	bl	8002000 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800181c:	2302      	movs	r3, #2
 800181e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f003 f838 	bl	800489c <HAL_RCCEx_PeriphCLKConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001832:	f000 fbe5 	bl	8002000 <Error_Handler>
  }
}
 8001836:	bf00      	nop
 8001838:	3750      	adds	r7, #80	@ 0x50
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <DELAY_US>:

/* USER CODE BEGIN 4 */
void DELAY_US(uint16_t TIME_US)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
	uint32_t old_timer_value = TIM4->CNT;
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <DELAY_US+0x54>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	60fb      	str	r3, [r7, #12]
	uint32_t target_time = (old_timer_value + TIME_US) % (TIM4->ARR + 1);
 8001850:	88fa      	ldrh	r2, [r7, #6]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	4a0f      	ldr	r2, [pc, #60]	@ (8001894 <DELAY_US+0x54>)
 8001858:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800185a:	3201      	adds	r2, #1
 800185c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001860:	fb01 f202 	mul.w	r2, r1, r2
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	60bb      	str	r3, [r7, #8]

	if (target_time < old_timer_value)  // Handle timer overflow
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d205      	bcs.n	800187c <DELAY_US+0x3c>
	{
		while (TIM4->CNT >= old_timer_value);  // Wait for overflow
 8001870:	bf00      	nop
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <DELAY_US+0x54>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d9fa      	bls.n	8001872 <DELAY_US+0x32>
	}
	while (TIM4->CNT < target_time);  // Wait until target time is reached
 800187c:	bf00      	nop
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <DELAY_US+0x54>)
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8fa      	bhi.n	800187e <DELAY_US+0x3e>
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40000800 	.word	0x40000800

08001898 <updateScreen>:
void updateScreen()
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af02      	add	r7, sp, #8
	static uint32_t elapsed_time;
	updateScreenRequest = 0;
 800189e:	4ba4      	ldr	r3, [pc, #656]	@ (8001b30 <updateScreen+0x298>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
	switch(STATE_MCU_CURRENT)
 80018a4:	4ba3      	ldr	r3, [pc, #652]	@ (8001b34 <updateScreen+0x29c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	f200 8135 	bhi.w	8001b1a <updateScreen+0x282>
 80018b0:	a201      	add	r2, pc, #4	@ (adr r2, 80018b8 <updateScreen+0x20>)
 80018b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b6:	bf00      	nop
 80018b8:	080018cd 	.word	0x080018cd
 80018bc:	08001909 	.word	0x08001909
 80018c0:	080019b9 	.word	0x080019b9
 80018c4:	08001b1b 	.word	0x08001b1b
 80018c8:	08001af1 	.word	0x08001af1
	{
	case  START:
	{
		LCD_Init();
 80018cc:	f004 f968 	bl	8005ba0 <LCD_Init>

		sprintf(LCD_buffer,"Battery analyzer");
 80018d0:	4999      	ldr	r1, [pc, #612]	@ (8001b38 <updateScreen+0x2a0>)
 80018d2:	489a      	ldr	r0, [pc, #616]	@ (8001b3c <updateScreen+0x2a4>)
 80018d4:	f004 f9f6 	bl	8005cc4 <siprintf>
		formatCharToLCD(LCD_buffer,0,0,ALIGN_LEFT);
 80018d8:	2301      	movs	r3, #1
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	4897      	ldr	r0, [pc, #604]	@ (8001b3c <updateScreen+0x2a4>)
 80018e0:	f000 f95a 	bl	8001b98 <formatCharToLCD>

		sprintf(LCD_buffer,"BatLinux");
 80018e4:	4996      	ldr	r1, [pc, #600]	@ (8001b40 <updateScreen+0x2a8>)
 80018e6:	4895      	ldr	r0, [pc, #596]	@ (8001b3c <updateScreen+0x2a4>)
 80018e8:	f004 f9ec 	bl	8005cc4 <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 80018ec:	2303      	movs	r3, #3
 80018ee:	2201      	movs	r2, #1
 80018f0:	2100      	movs	r1, #0
 80018f2:	4892      	ldr	r0, [pc, #584]	@ (8001b3c <updateScreen+0x2a4>)
 80018f4:	f000 f950 	bl	8001b98 <formatCharToLCD>

		HAL_Delay(1000);
 80018f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018fc:	f000 fe66 	bl	80025cc <HAL_Delay>
		STATE_MCU_CURRENT = SETUP;
 8001900:	4b8c      	ldr	r3, [pc, #560]	@ (8001b34 <updateScreen+0x29c>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
		break;
 8001906:	e109      	b.n	8001b1c <updateScreen+0x284>
	}
	case  SETUP:
	{
		switch(SETUP_CONFIGURATION)
 8001908:	4b8e      	ldr	r3, [pc, #568]	@ (8001b44 <updateScreen+0x2ac>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <updateScreen+0x80>
 8001912:	2b01      	cmp	r3, #1
 8001914:	d019      	beq.n	800194a <updateScreen+0xb2>
 8001916:	e04b      	b.n	80019b0 <updateScreen+0x118>
		{
		case(SETUP_PARAM_DISCHARGE_CURRENT):
									{
			sprintf(LCD_buffer,"Current, mA");
 8001918:	498b      	ldr	r1, [pc, #556]	@ (8001b48 <updateScreen+0x2b0>)
 800191a:	4888      	ldr	r0, [pc, #544]	@ (8001b3c <updateScreen+0x2a4>)
 800191c:	f004 f9d2 	bl	8005cc4 <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001920:	2303      	movs	r3, #3
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	4885      	ldr	r0, [pc, #532]	@ (8001b3c <updateScreen+0x2a4>)
 8001928:	f000 f936 	bl	8001b98 <formatCharToLCD>

			sprintf(LCD_buffer,"%d",Discharge_current);
 800192c:	4b87      	ldr	r3, [pc, #540]	@ (8001b4c <updateScreen+0x2b4>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	4986      	ldr	r1, [pc, #536]	@ (8001b50 <updateScreen+0x2b8>)
 8001936:	4881      	ldr	r0, [pc, #516]	@ (8001b3c <updateScreen+0x2a4>)
 8001938:	f004 f9c4 	bl	8005cc4 <siprintf>
			formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 800193c:	2303      	movs	r3, #3
 800193e:	2201      	movs	r2, #1
 8001940:	2100      	movs	r1, #0
 8001942:	487e      	ldr	r0, [pc, #504]	@ (8001b3c <updateScreen+0x2a4>)
 8001944:	f000 f928 	bl	8001b98 <formatCharToLCD>
			break;
 8001948:	e035      	b.n	80019b6 <updateScreen+0x11e>
									}
		case(SETUP_PARAM_CUTOFF_VOLTAGE):
									{
			sprintf(LCD_buffer,"Voltage, V");
 800194a:	4982      	ldr	r1, [pc, #520]	@ (8001b54 <updateScreen+0x2bc>)
 800194c:	487b      	ldr	r0, [pc, #492]	@ (8001b3c <updateScreen+0x2a4>)
 800194e:	f004 f9b9 	bl	8005cc4 <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 8001952:	2303      	movs	r3, #3
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	4878      	ldr	r0, [pc, #480]	@ (8001b3c <updateScreen+0x2a4>)
 800195a:	f000 f91d 	bl	8001b98 <formatCharToLCD>

			//no float support (+10 kB flash)
			uint8_t temp1 = Cutoff_voltage/1000;
 800195e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b58 <updateScreen+0x2c0>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4a7d      	ldr	r2, [pc, #500]	@ (8001b5c <updateScreen+0x2c4>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	b29b      	uxth	r3, r3
 800196e:	71bb      	strb	r3, [r7, #6]
			uint8_t temp2 = (Cutoff_voltage/100)%10;
 8001970:	4b79      	ldr	r3, [pc, #484]	@ (8001b58 <updateScreen+0x2c0>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4a7a      	ldr	r2, [pc, #488]	@ (8001b60 <updateScreen+0x2c8>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	095b      	lsrs	r3, r3, #5
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b78      	ldr	r3, [pc, #480]	@ (8001b64 <updateScreen+0x2cc>)
 8001982:	fba3 1302 	umull	r1, r3, r3, r2
 8001986:	08d9      	lsrs	r1, r3, #3
 8001988:	460b      	mov	r3, r1
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	717b      	strb	r3, [r7, #5]
			sprintf(LCD_buffer,"%u.%u",temp1,temp2);
 8001996:	79ba      	ldrb	r2, [r7, #6]
 8001998:	797b      	ldrb	r3, [r7, #5]
 800199a:	4973      	ldr	r1, [pc, #460]	@ (8001b68 <updateScreen+0x2d0>)
 800199c:	4867      	ldr	r0, [pc, #412]	@ (8001b3c <updateScreen+0x2a4>)
 800199e:	f004 f991 	bl	8005cc4 <siprintf>
			formatCharToLCD(LCD_buffer,1,1,ALIGN_CENTER);
 80019a2:	2303      	movs	r3, #3
 80019a4:	2201      	movs	r2, #1
 80019a6:	2101      	movs	r1, #1
 80019a8:	4864      	ldr	r0, [pc, #400]	@ (8001b3c <updateScreen+0x2a4>)
 80019aa:	f000 f8f5 	bl	8001b98 <formatCharToLCD>
			break;
 80019ae:	e002      	b.n	80019b6 <updateScreen+0x11e>
									}
		default:
			LCD_CLEAR();
 80019b0:	f004 f8ee 	bl	8005b90 <LCD_CLEAR>
			break;
 80019b4:	bf00      	nop
		}
		break;
 80019b6:	e0b1      	b.n	8001b1c <updateScreen+0x284>
	}
	case  DISCHARGE:
	{
		if(STATE_MCU_CURRENT != STATE_MCU_PREVIOUS)
 80019b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <updateScreen+0x29c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b6b      	ldr	r3, [pc, #428]	@ (8001b6c <updateScreen+0x2d4>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d018      	beq.n	80019fa <updateScreen+0x162>
		{
			sprintf(LCD_buffer,"Starting");
 80019c8:	4969      	ldr	r1, [pc, #420]	@ (8001b70 <updateScreen+0x2d8>)
 80019ca:	485c      	ldr	r0, [pc, #368]	@ (8001b3c <updateScreen+0x2a4>)
 80019cc:	f004 f97a 	bl	8005cc4 <siprintf>
			formatCharToLCD(LCD_buffer,0,0,ALIGN_CENTER);
 80019d0:	2303      	movs	r3, #3
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	4859      	ldr	r0, [pc, #356]	@ (8001b3c <updateScreen+0x2a4>)
 80019d8:	f000 f8de 	bl	8001b98 <formatCharToLCD>

			sprintf(LCD_buffer,"the discharge...");
 80019dc:	4965      	ldr	r1, [pc, #404]	@ (8001b74 <updateScreen+0x2dc>)
 80019de:	4857      	ldr	r0, [pc, #348]	@ (8001b3c <updateScreen+0x2a4>)
 80019e0:	f004 f970 	bl	8005cc4 <siprintf>
			formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 80019e4:	2303      	movs	r3, #3
 80019e6:	2201      	movs	r2, #1
 80019e8:	2100      	movs	r1, #0
 80019ea:	4854      	ldr	r0, [pc, #336]	@ (8001b3c <updateScreen+0x2a4>)
 80019ec:	f000 f8d4 	bl	8001b98 <formatCharToLCD>

			HAL_Delay(2000);
 80019f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019f4:	f000 fdea 	bl	80025cc <HAL_Delay>
			break;
 80019f8:	e090      	b.n	8001b1c <updateScreen+0x284>
		}
		//Printing the reading values
		uint8_t separator = 10*(DischargeDisplayData.voltage+0.05)-10*(int)(DischargeDisplayData.voltage);
 80019fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001b78 <updateScreen+0x2e0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd12 	bl	8000428 <__aeabi_f2d>
 8001a04:	a348      	add	r3, pc, #288	@ (adr r3, 8001b28 <updateScreen+0x290>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fbaf 	bl	800016c <__adddf3>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <updateScreen+0x2e4>)
 8001a1c:	f7fe fd5c 	bl	80004d8 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4614      	mov	r4, r2
 8001a26:	461d      	mov	r5, r3
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <updateScreen+0x2e0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fa33 	bl	8000e98 <__aeabi_f2iz>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fce1 	bl	8000404 <__aeabi_i2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe fb8d 	bl	8000168 <__aeabi_dsub>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7fe ff51 	bl	80008fc <__aeabi_d2uiz>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
		sprintf(LCD_buffer,"%u.%u",(uint16_t)DischargeDisplayData.voltage,separator);
 8001a5e:	4b46      	ldr	r3, [pc, #280]	@ (8001b78 <updateScreen+0x2e0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fa3e 	bl	8000ee4 <__aeabi_f2uiz>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	493d      	ldr	r1, [pc, #244]	@ (8001b68 <updateScreen+0x2d0>)
 8001a72:	4832      	ldr	r0, [pc, #200]	@ (8001b3c <updateScreen+0x2a4>)
 8001a74:	f004 f926 	bl	8005cc4 <siprintf>
		sprintf(LCD_buffer,"%u mA, %u.%u V",(uint16_t)DischargeDisplayData.current_ma,(uint16_t)DischargeDisplayData.voltage,separator);
 8001a78:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <updateScreen+0x2e0>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fa31 	bl	8000ee4 <__aeabi_f2uiz>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	461c      	mov	r4, r3
 8001a88:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <updateScreen+0x2e0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fa29 	bl	8000ee4 <__aeabi_f2uiz>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	4937      	ldr	r1, [pc, #220]	@ (8001b80 <updateScreen+0x2e8>)
 8001aa2:	4826      	ldr	r0, [pc, #152]	@ (8001b3c <updateScreen+0x2a4>)
 8001aa4:	f004 f90e 	bl	8005cc4 <siprintf>
		formatCharToLCD(LCD_buffer,0,0,ALIGN_LEFT);
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	4823      	ldr	r0, [pc, #140]	@ (8001b3c <updateScreen+0x2a4>)
 8001ab0:	f000 f872 	bl	8001b98 <formatCharToLCD>

		elapsed_time = (uwTick-DischargeDisplayData.start_time)/1000;
 8001ab4:	4b33      	ldr	r3, [pc, #204]	@ (8001b84 <updateScreen+0x2ec>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <updateScreen+0x2e0>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <updateScreen+0x2c4>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	4a30      	ldr	r2, [pc, #192]	@ (8001b88 <updateScreen+0x2f0>)
 8001ac8:	6013      	str	r3, [r2, #0]
		sprintf(LCD_buffer,"%lu mAh, %lu s",(uint32_t)DischargeDisplayData.capacity_mah,elapsed_time);
 8001aca:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <updateScreen+0x2e0>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fa08 	bl	8000ee4 <__aeabi_f2uiz>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b88 <updateScreen+0x2f0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	492c      	ldr	r1, [pc, #176]	@ (8001b8c <updateScreen+0x2f4>)
 8001adc:	4817      	ldr	r0, [pc, #92]	@ (8001b3c <updateScreen+0x2a4>)
 8001ade:	f004 f8f1 	bl	8005cc4 <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_LEFT);
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4814      	ldr	r0, [pc, #80]	@ (8001b3c <updateScreen+0x2a4>)
 8001aea:	f000 f855 	bl	8001b98 <formatCharToLCD>

		break;
 8001aee:	e015      	b.n	8001b1c <updateScreen+0x284>
	}
	case  FINISH:
	{
		sprintf(LCD_buffer,"FINISHED");
 8001af0:	4927      	ldr	r1, [pc, #156]	@ (8001b90 <updateScreen+0x2f8>)
 8001af2:	4812      	ldr	r0, [pc, #72]	@ (8001b3c <updateScreen+0x2a4>)
 8001af4:	f004 f8e6 	bl	8005cc4 <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_CENTER);
 8001af8:	2303      	movs	r3, #3
 8001afa:	2201      	movs	r2, #1
 8001afc:	2100      	movs	r1, #0
 8001afe:	480f      	ldr	r0, [pc, #60]	@ (8001b3c <updateScreen+0x2a4>)
 8001b00:	f000 f84a 	bl	8001b98 <formatCharToLCD>

		sprintf(LCD_buffer,"WHAT TO PRINT?");
 8001b04:	4923      	ldr	r1, [pc, #140]	@ (8001b94 <updateScreen+0x2fc>)
 8001b06:	480d      	ldr	r0, [pc, #52]	@ (8001b3c <updateScreen+0x2a4>)
 8001b08:	f004 f8dc 	bl	8005cc4 <siprintf>
		formatCharToLCD(LCD_buffer,0,1,ALIGN_RIGHT);
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2100      	movs	r1, #0
 8001b12:	480a      	ldr	r0, [pc, #40]	@ (8001b3c <updateScreen+0x2a4>)
 8001b14:	f000 f840 	bl	8001b98 <formatCharToLCD>

		break;
 8001b18:	e000      	b.n	8001b1c <updateScreen+0x284>
		break;
	}
	default:
	{

		break;
 8001b1a:	bf00      	nop
	}
	}
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bdb0      	pop	{r4, r5, r7, pc}
 8001b24:	f3af 8000 	nop.w
 8001b28:	9999999a 	.word	0x9999999a
 8001b2c:	3fa99999 	.word	0x3fa99999
 8001b30:	20000004 	.word	0x20000004
 8001b34:	200000f8 	.word	0x200000f8
 8001b38:	0800663c 	.word	0x0800663c
 8001b3c:	200000fc 	.word	0x200000fc
 8001b40:	08006650 	.word	0x08006650
 8001b44:	200000fa 	.word	0x200000fa
 8001b48:	0800665c 	.word	0x0800665c
 8001b4c:	20000006 	.word	0x20000006
 8001b50:	08006668 	.word	0x08006668
 8001b54:	0800666c 	.word	0x0800666c
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	10624dd3 	.word	0x10624dd3
 8001b60:	51eb851f 	.word	0x51eb851f
 8001b64:	cccccccd 	.word	0xcccccccd
 8001b68:	08006678 	.word	0x08006678
 8001b6c:	200000f9 	.word	0x200000f9
 8001b70:	08006680 	.word	0x08006680
 8001b74:	0800668c 	.word	0x0800668c
 8001b78:	200001f8 	.word	0x200001f8
 8001b7c:	40240000 	.word	0x40240000
 8001b80:	080066a0 	.word	0x080066a0
 8001b84:	200002f4 	.word	0x200002f4
 8001b88:	2000020c 	.word	0x2000020c
 8001b8c:	080066b0 	.word	0x080066b0
 8001b90:	080066c0 	.word	0x080066c0
 8001b94:	080066cc 	.word	0x080066cc

08001b98 <formatCharToLCD>:
//Add padding for LCD display
//If padding is added, place is 0, level is dependant on LCD top(0) or bottom(1)
void formatCharToLCD(char* message, uint8_t place, uint8_t level, uint8_t Padding)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	70fb      	strb	r3, [r7, #3]
 8001baa:	460b      	mov	r3, r1
 8001bac:	70bb      	strb	r3, [r7, #2]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	707b      	strb	r3, [r7, #1]
	static uint8_t buffer_size;
	buffer_size = strlen(message);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe facc 	bl	8000150 <strlen>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <formatCharToLCD+0xbc>)
 8001bbe:	701a      	strb	r2, [r3, #0]
	if(buffer_size != 0 && buffer_size <= LCD_COLS)
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <formatCharToLCD+0xbc>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d041      	beq.n	8001c4c <formatCharToLCD+0xb4>
 8001bc8:	4b22      	ldr	r3, [pc, #136]	@ (8001c54 <formatCharToLCD+0xbc>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d83d      	bhi.n	8001c4c <formatCharToLCD+0xb4>
	{
		if(Padding==ALIGN_NO)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <formatCharToLCD+0x4c>
		{
			LCD_SEND_STR(message,place, level);
 8001bd6:	78ba      	ldrb	r2, [r7, #2]
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f004 f837 	bl	8005c50 <LCD_SEND_STR>
 8001be2:	e033      	b.n	8001c4c <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_LEFT)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10d      	bne.n	8001c06 <formatCharToLCD+0x6e>
		{
			charAddPadding(message, ALIGN_LEFT, buffer_size);
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <formatCharToLCD+0xbc>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f830 	bl	8001c58 <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001bf8:	78bb      	ldrb	r3, [r7, #2]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f004 f826 	bl	8005c50 <LCD_SEND_STR>
 8001c04:	e022      	b.n	8001c4c <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_RIGHT)
 8001c06:	787b      	ldrb	r3, [r7, #1]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d10d      	bne.n	8001c28 <formatCharToLCD+0x90>
		{
			charAddPadding(message, ALIGN_RIGHT, buffer_size);
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <formatCharToLCD+0xbc>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	2102      	movs	r1, #2
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f81f 	bl	8001c58 <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001c1a:	78bb      	ldrb	r3, [r7, #2]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f004 f815 	bl	8005c50 <LCD_SEND_STR>
 8001c26:	e011      	b.n	8001c4c <formatCharToLCD+0xb4>
		}
		else if(Padding==ALIGN_CENTER)
 8001c28:	787b      	ldrb	r3, [r7, #1]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d10d      	bne.n	8001c4a <formatCharToLCD+0xb2>
		{
			charAddPadding(message, ALIGN_CENTER, buffer_size);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <formatCharToLCD+0xbc>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	2103      	movs	r1, #3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f80e 	bl	8001c58 <charAddPadding>
			LCD_SEND_STR(message,0, level);
 8001c3c:	78bb      	ldrb	r3, [r7, #2]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f004 f804 	bl	8005c50 <LCD_SEND_STR>
 8001c48:	e000      	b.n	8001c4c <formatCharToLCD+0xb4>
		}
		else return;
 8001c4a:	bf00      	nop
	}
}
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000210 	.word	0x20000210

08001c58 <charAddPadding>:

void charAddPadding(char* buffer, uint8_t align,uint8_t size)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
 8001c64:	4613      	mov	r3, r2
 8001c66:	70bb      	strb	r3, [r7, #2]
	if(align == ALIGN_LEFT)
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d10e      	bne.n	8001c8c <charAddPadding+0x34>
	{
		for(uint8_t i = size;i<LCD_COLS;i++)
 8001c6e:	78bb      	ldrb	r3, [r7, #2]
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e007      	b.n	8001c84 <charAddPadding+0x2c>
		{
			buffer[i] = ' ';
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = size;i<LCD_COLS;i++)
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	3301      	adds	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	d9f4      	bls.n	8001c74 <charAddPadding+0x1c>
 8001c8a:	e054      	b.n	8001d36 <charAddPadding+0xde>
		}
	}
	else if(align == ALIGN_RIGHT)
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d11c      	bne.n	8001ccc <charAddPadding+0x74>
	{
		memmove(buffer+(LCD_COLS-size),buffer,size);// shift to the right
 8001c92:	78bb      	ldrb	r3, [r7, #2]
 8001c94:	f1c3 0310 	rsb	r3, r3, #16
 8001c98:	461a      	mov	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	78ba      	ldrb	r2, [r7, #2]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 f830 	bl	8005d08 <memmove>
		for(uint8_t i = 0;i<LCD_COLS-size;i++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73bb      	strb	r3, [r7, #14]
 8001cac:	e007      	b.n	8001cbe <charAddPadding+0x66>
		{
			buffer[i] = ' ';
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i<LCD_COLS-size;i++)
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	73bb      	strb	r3, [r7, #14]
 8001cbe:	7bba      	ldrb	r2, [r7, #14]
 8001cc0:	78bb      	ldrb	r3, [r7, #2]
 8001cc2:	f1c3 0310 	rsb	r3, r3, #16
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	dbf1      	blt.n	8001cae <charAddPadding+0x56>
 8001cca:	e034      	b.n	8001d36 <charAddPadding+0xde>
		}
	}
	else if(align == ALIGN_CENTER)
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d130      	bne.n	8001d34 <charAddPadding+0xdc>
	{
		uint8_t start_place = (LCD_COLS - size)/2;//left side
 8001cd2:	78bb      	ldrb	r3, [r7, #2]
 8001cd4:	f1c3 0310 	rsb	r3, r3, #16
 8001cd8:	0fda      	lsrs	r2, r3, #31
 8001cda:	4413      	add	r3, r2
 8001cdc:	105b      	asrs	r3, r3, #1
 8001cde:	72fb      	strb	r3, [r7, #11]
		memmove(buffer+start_place,buffer,size);// shift to the right
 8001ce0:	7afb      	ldrb	r3, [r7, #11]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	78ba      	ldrb	r2, [r7, #2]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 f80c 	bl	8005d08 <memmove>
		for(uint8_t i = 0;i<start_place;i++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	737b      	strb	r3, [r7, #13]
 8001cf4:	e007      	b.n	8001d06 <charAddPadding+0xae>
		{
			buffer[i] = ' ';
 8001cf6:	7b7b      	ldrb	r3, [r7, #13]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i<start_place;i++)
 8001d00:	7b7b      	ldrb	r3, [r7, #13]
 8001d02:	3301      	adds	r3, #1
 8001d04:	737b      	strb	r3, [r7, #13]
 8001d06:	7b7a      	ldrb	r2, [r7, #13]
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3f3      	bcc.n	8001cf6 <charAddPadding+0x9e>
		}
		start_place +=size;//right side
 8001d0e:	7afa      	ldrb	r2, [r7, #11]
 8001d10:	78bb      	ldrb	r3, [r7, #2]
 8001d12:	4413      	add	r3, r2
 8001d14:	72fb      	strb	r3, [r7, #11]
		for(uint8_t i = start_place;i<LCD_COLS;i++)
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	733b      	strb	r3, [r7, #12]
 8001d1a:	e007      	b.n	8001d2c <charAddPadding+0xd4>
		{
			buffer[i] = ' ';
 8001d1c:	7b3b      	ldrb	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	2220      	movs	r2, #32
 8001d24:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = start_place;i<LCD_COLS;i++)
 8001d26:	7b3b      	ldrb	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	733b      	strb	r3, [r7, #12]
 8001d2c:	7b3b      	ldrb	r3, [r7, #12]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	d9f4      	bls.n	8001d1c <charAddPadding+0xc4>
 8001d32:	e000      	b.n	8001d36 <charAddPadding+0xde>
		}
	}
	else
	{
		return;
 8001d34:	bf00      	nop
	}
}
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <PWM_Control_loop>:

void PWM_Control_loop(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	//	htim->Instance->CCR4 = 20;//ARR 200
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_GPIO_EXTI_Callback>:

//INTERRUPT CALLBACKS

//EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
	if(uwTick-last_button_time > BUTTON_DEBOUNCE_MS)
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_GPIO_EXTI_Callback+0x30>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0x34>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b1e      	cmp	r3, #30
 8001d66:	d906      	bls.n	8001d76 <HAL_GPIO_EXTI_Callback+0x26>
	{
		button_activity = 1;
 8001d68:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <HAL_GPIO_EXTI_Callback+0x38>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
		last_button_time = uwTick;
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <HAL_GPIO_EXTI_Callback+0x30>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0x34>)
 8001d74:	6013      	str	r3, [r2, #0]

	//IMPLEMENT THE STARTING PROCESS
	//	STATE_MCU_CURRENT = DISCHARGE;
	//	STATE_MCU_PREVIOUS = SETUP;

}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	200002f4 	.word	0x200002f4
 8001d84:	200001e8 	.word	0x200001e8
 8001d88:	200001e4 	.word	0x200001e4
 8001d8c:	00000000 	.word	0x00000000

08001d90 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum[2] = {0};
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
	static uint16_t Current_BATT;


	//AVERAGING
	for(uint16_t i = 0; i < (ADC_DMA_SIZE/2)-1; i=i+2)
 8001da2:	2300      	movs	r3, #0
 8001da4:	82fb      	strh	r3, [r7, #22]
 8001da6:	e011      	b.n	8001dcc <HAL_ADC_ConvHalfCpltCallback+0x3c>
	{
		adc_sum[0] += ADC_Values[i];//first channel
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8afa      	ldrh	r2, [r7, #22]
 8001dac:	493c      	ldr	r1, [pc, #240]	@ (8001ea0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001dae:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
		adc_sum[1] += ADC_Values[i+1];//second channel
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	8afa      	ldrh	r2, [r7, #22]
 8001dba:	3201      	adds	r2, #1
 8001dbc:	4938      	ldr	r1, [pc, #224]	@ (8001ea0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001dbe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
	for(uint16_t i = 0; i < (ADC_DMA_SIZE/2)-1; i=i+2)
 8001dc6:	8afb      	ldrh	r3, [r7, #22]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	82fb      	strh	r3, [r7, #22]
 8001dcc:	8afb      	ldrh	r3, [r7, #22]
 8001dce:	2b30      	cmp	r3, #48	@ 0x30
 8001dd0:	d9ea      	bls.n	8001da8 <HAL_ADC_ConvHalfCpltCallback+0x18>
	}
	adc_sum[0] = 4*adc_sum[0]/ADC_DMA_SIZE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4a33      	ldr	r2, [pc, #204]	@ (8001ea4 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	60fb      	str	r3, [r7, #12]
	adc_sum[1] = 4*adc_sum[1]/ADC_DMA_SIZE;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	613b      	str	r3, [r7, #16]

	//PWM CONTROL LOOP
	PWM_Control_loop(&htim2);
 8001dee:	482e      	ldr	r0, [pc, #184]	@ (8001ea8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001df0:	f7ff ffa4 	bl	8001d3c <PWM_Control_loop>


	//CURRENT AND MAH CONVERSION
	Current_BATT = 3300*adc_sum[1]/R_load/ADC_steps;//convert to mA
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe faf0 	bl	80003e4 <__aeabi_ui2d>
 8001e04:	a324      	add	r3, pc, #144	@ (adr r3, 8001e98 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fc8f 	bl	800072c <__aeabi_ddiv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8001e1c:	f7fe fc86 	bl	800072c <__aeabi_ddiv>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fd68 	bl	80008fc <__aeabi_d2uiz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8001e32:	801a      	strh	r2, [r3, #0]
	DischargeDisplayData.capacity_mah += Current_BATT*MAH_CONVERSION;
 8001e34:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8001e36:	689c      	ldr	r4, [r3, #8]
 8001e38:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fe87 	bl	8000b50 <__aeabi_i2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	491c      	ldr	r1, [pc, #112]	@ (8001eb8 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fed6 	bl	8000bf8 <__aeabi_fmul>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7fe fdc9 	bl	80009e8 <__addsf3>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8001e5c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5e:	b672      	cpsid	i
}
 8001e60:	bf00      	nop

	//defensive guard band
	__disable_irq();
	ADC_VOLTAGE_ACCUM += adc_sum[0];
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8001e6c:	6013      	str	r3, [r2, #0]
	ADC_CURRENT_ACCUM += adc_sum[1];
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 8001e78:	6013      	str	r3, [r2, #0]
	ADC_READING_COUNTER+=1;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3301      	adds	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8001e86:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e88:	b662      	cpsie	i
}
 8001e8a:	bf00      	nop
	__enable_irq();

	//printf("HalfCallback %lu",uwTick);
}
 8001e8c:	bf00      	nop
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	f3af 8000 	nop.w
 8001e98:	c28f5c29 	.word	0xc28f5c29
 8001e9c:	3fcc28f5 	.word	0x3fcc28f5
 8001ea0:	2000011c 	.word	0x2000011c
 8001ea4:	51eb851f 	.word	0x51eb851f
 8001ea8:	2000021c 	.word	0x2000021c
 8001eac:	40b00000 	.word	0x40b00000
 8001eb0:	20000212 	.word	0x20000212
 8001eb4:	200001f8 	.word	0x200001f8
 8001eb8:	36690453 	.word	0x36690453
 8001ebc:	200001ec 	.word	0x200001ec
 8001ec0:	200001f0 	.word	0x200001f0
 8001ec4:	200001f4 	.word	0x200001f4

08001ec8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum[2] = {0};
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
	static uint16_t Current_BATT;

	for(uint16_t i = (ADC_DMA_SIZE/2); i < ADC_DMA_SIZE; i=i+2)
 8001eda:	2332      	movs	r3, #50	@ 0x32
 8001edc:	82fb      	strh	r3, [r7, #22]
 8001ede:	e011      	b.n	8001f04 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		adc_sum[0] += ADC_Values[i];//first channel
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8afa      	ldrh	r2, [r7, #22]
 8001ee4:	493c      	ldr	r1, [pc, #240]	@ (8001fd8 <HAL_ADC_ConvCpltCallback+0x110>)
 8001ee6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
		adc_sum[1] += ADC_Values[i+1];//second channel
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	8afa      	ldrh	r2, [r7, #22]
 8001ef2:	3201      	adds	r2, #1
 8001ef4:	4938      	ldr	r1, [pc, #224]	@ (8001fd8 <HAL_ADC_ConvCpltCallback+0x110>)
 8001ef6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001efa:	4413      	add	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
	for(uint16_t i = (ADC_DMA_SIZE/2); i < ADC_DMA_SIZE; i=i+2)
 8001efe:	8afb      	ldrh	r3, [r7, #22]
 8001f00:	3302      	adds	r3, #2
 8001f02:	82fb      	strh	r3, [r7, #22]
 8001f04:	8afb      	ldrh	r3, [r7, #22]
 8001f06:	2b63      	cmp	r3, #99	@ 0x63
 8001f08:	d9ea      	bls.n	8001ee0 <HAL_ADC_ConvCpltCallback+0x18>
	}
	//AVERAGES
	adc_sum[0] = 4*adc_sum[0]/ADC_DMA_SIZE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4a33      	ldr	r2, [pc, #204]	@ (8001fdc <HAL_ADC_ConvCpltCallback+0x114>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	60fb      	str	r3, [r7, #12]
	adc_sum[1] = 4*adc_sum[1]/ADC_DMA_SIZE;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8001fdc <HAL_ADC_ConvCpltCallback+0x114>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	613b      	str	r3, [r7, #16]

	//PWM CONTROL LOOP
	PWM_Control_loop(&htim2);
 8001f26:	482e      	ldr	r0, [pc, #184]	@ (8001fe0 <HAL_ADC_ConvCpltCallback+0x118>)
 8001f28:	f7ff ff08 	bl	8001d3c <PWM_Control_loop>

	//CURRENT AND MAH CONVERSION
	Current_BATT = 3300*adc_sum[1]/R_load/ADC_steps;//convert to mA
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fa54 	bl	80003e4 <__aeabi_ui2d>
 8001f3c:	a324      	add	r3, pc, #144	@ (adr r3, 8001fd0 <HAL_ADC_ConvCpltCallback+0x108>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe fbf3 	bl	800072c <__aeabi_ddiv>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b24      	ldr	r3, [pc, #144]	@ (8001fe4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001f54:	f7fe fbea 	bl	800072c <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fccc 	bl	80008fc <__aeabi_d2uiz>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <HAL_ADC_ConvCpltCallback+0x120>)
 8001f6a:	801a      	strh	r2, [r3, #0]
	DischargeDisplayData.capacity_mah += Current_BATT*MAH_CONVERSION;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x124>)
 8001f6e:	689c      	ldr	r4, [r3, #8]
 8001f70:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_ADC_ConvCpltCallback+0x120>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fdeb 	bl	8000b50 <__aeabi_i2f>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	491c      	ldr	r1, [pc, #112]	@ (8001ff0 <HAL_ADC_ConvCpltCallback+0x128>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fe3a 	bl	8000bf8 <__aeabi_fmul>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4619      	mov	r1, r3
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7fe fd2d 	bl	80009e8 <__addsf3>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x124>)
 8001f94:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f96:	b672      	cpsid	i
}
 8001f98:	bf00      	nop

	//defensive guard band
	__disable_irq();
	ADC_VOLTAGE_ACCUM += adc_sum[0];
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001fa4:	6013      	str	r3, [r2, #0]
	ADC_CURRENT_ACCUM += adc_sum[1];
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x130>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a12      	ldr	r2, [pc, #72]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x130>)
 8001fb0:	6013      	str	r3, [r2, #0]
	ADC_READING_COUNTER+=1;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_ADC_ConvCpltCallback+0x134>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_ADC_ConvCpltCallback+0x134>)
 8001fbe:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fc0:	b662      	cpsie	i
}
 8001fc2:	bf00      	nop
	__enable_irq();

	//printf("FullCallback %lu",uwTick);
}
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	c28f5c29 	.word	0xc28f5c29
 8001fd4:	3fcc28f5 	.word	0x3fcc28f5
 8001fd8:	2000011c 	.word	0x2000011c
 8001fdc:	51eb851f 	.word	0x51eb851f
 8001fe0:	2000021c 	.word	0x2000021c
 8001fe4:	40b00000 	.word	0x40b00000
 8001fe8:	20000214 	.word	0x20000214
 8001fec:	200001f8 	.word	0x200001f8
 8001ff0:	36690453 	.word	0x36690453
 8001ff4:	200001ec 	.word	0x200001ec
 8001ff8:	200001f0 	.word	0x200001f0
 8001ffc:	200001f4 	.word	0x200001f4

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <Error_Handler+0x8>

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_MspInit+0x5c>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	4a14      	ldr	r2, [pc, #80]	@ (8002068 <HAL_MspInit+0x5c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6193      	str	r3, [r2, #24]
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_MspInit+0x5c>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <HAL_MspInit+0x5c>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a0e      	ldr	r2, [pc, #56]	@ (8002068 <HAL_MspInit+0x5c>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_MspInit+0x5c>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_MspInit+0x60>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_MspInit+0x60>)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <NMI_Handler+0x4>

08002078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <MemManage_Handler+0x4>

08002088 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <UsageFault_Handler+0x4>

08002098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c0:	f000 fa68 	bl	8002594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_mode_Pin);
 80020cc:	2002      	movs	r0, #2
 80020ce:	f001 ffd1 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <DMA1_Channel1_IRQHandler+0x10>)
 80020de:	f001 fce1 	bl	8003aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200000b4 	.word	0x200000b4

080020ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <ADC1_2_IRQHandler+0x10>)
 80020f2:	f000 fc45 	bl	8002980 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000084 	.word	0x20000084

08002100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <TIM3_IRQHandler+0x10>)
 8002106:	f002 fed1 	bl	8004eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000264 	.word	0x20000264

08002114 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_sub_Pin);
 8002118:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800211c:	f001 ffaa 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_add_Pin);
 8002120:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002124:	f001 ffa6 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002134:	4a14      	ldr	r2, [pc, #80]	@ (8002188 <_sbrk+0x5c>)
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <_sbrk+0x60>)
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002140:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002148:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <_sbrk+0x64>)
 800214a:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <_sbrk+0x68>)
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d207      	bcs.n	800216c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800215c:	f003 fdf6 	bl	8005d4c <__errno>
 8002160:	4603      	mov	r3, r0
 8002162:	220c      	movs	r2, #12
 8002164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e009      	b.n	8002180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800216c:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002172:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <_sbrk+0x64>)
 800217c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20005000 	.word	0x20005000
 800218c:	00000200 	.word	0x00000200
 8002190:	20000218 	.word	0x20000218
 8002194:	20000448 	.word	0x20000448

08002198 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08e      	sub	sp, #56	@ 0x38
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	f107 0320 	add.w	r3, r7, #32
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002288 <MX_TIM2_Init+0xe4>)
 80021d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002288 <MX_TIM2_Init+0xe4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e2:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <MX_TIM2_Init+0xe4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <MX_TIM2_Init+0xe4>)
 80021ea:	22c7      	movs	r2, #199	@ 0xc7
 80021ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ee:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <MX_TIM2_Init+0xe4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f4:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <MX_TIM2_Init+0xe4>)
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021fa:	4823      	ldr	r0, [pc, #140]	@ (8002288 <MX_TIM2_Init+0xe4>)
 80021fc:	f002 fcba 	bl	8004b74 <HAL_TIM_Base_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002206:	f7ff fefb 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002210:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002214:	4619      	mov	r1, r3
 8002216:	481c      	ldr	r0, [pc, #112]	@ (8002288 <MX_TIM2_Init+0xe4>)
 8002218:	f002 fffa 	bl	8005210 <HAL_TIM_ConfigClockSource>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002222:	f7ff feed 	bl	8002000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002226:	4818      	ldr	r0, [pc, #96]	@ (8002288 <MX_TIM2_Init+0xe4>)
 8002228:	f002 fd46 	bl	8004cb8 <HAL_TIM_PWM_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002232:	f7ff fee5 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800223e:	f107 0320 	add.w	r3, r7, #32
 8002242:	4619      	mov	r1, r3
 8002244:	4810      	ldr	r0, [pc, #64]	@ (8002288 <MX_TIM2_Init+0xe4>)
 8002246:	f003 fb87 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002250:	f7ff fed6 	bl	8002000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002254:	2360      	movs	r3, #96	@ 0x60
 8002256:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	220c      	movs	r2, #12
 8002268:	4619      	mov	r1, r3
 800226a:	4807      	ldr	r0, [pc, #28]	@ (8002288 <MX_TIM2_Init+0xe4>)
 800226c:	f002 ff0e 	bl	800508c <HAL_TIM_PWM_ConfigChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002276:	f7ff fec3 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800227a:	4803      	ldr	r0, [pc, #12]	@ (8002288 <MX_TIM2_Init+0xe4>)
 800227c:	f000 f8ee 	bl	800245c <HAL_TIM_MspPostInit>

}
 8002280:	bf00      	nop
 8002282:	3738      	adds	r7, #56	@ 0x38
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000021c 	.word	0x2000021c

0800228c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	463b      	mov	r3, r7
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <MX_TIM3_Init+0x94>)
 80022aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002324 <MX_TIM3_Init+0x98>)
 80022ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <MX_TIM3_Init+0x94>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <MX_TIM3_Init+0x94>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80022ba:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <MX_TIM3_Init+0x94>)
 80022bc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80022c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <MX_TIM3_Init+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c8:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <MX_TIM3_Init+0x94>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022ce:	4814      	ldr	r0, [pc, #80]	@ (8002320 <MX_TIM3_Init+0x94>)
 80022d0:	f002 fc50 	bl	8004b74 <HAL_TIM_Base_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80022da:	f7ff fe91 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4619      	mov	r1, r3
 80022ea:	480d      	ldr	r0, [pc, #52]	@ (8002320 <MX_TIM3_Init+0x94>)
 80022ec:	f002 ff90 	bl	8005210 <HAL_TIM_ConfigClockSource>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80022f6:	f7ff fe83 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022fa:	2320      	movs	r3, #32
 80022fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002302:	463b      	mov	r3, r7
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	@ (8002320 <MX_TIM3_Init+0x94>)
 8002308:	f003 fb26 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002312:	f7ff fe75 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000264 	.word	0x20000264
 8002324:	40000400 	.word	0x40000400

08002328 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	463b      	mov	r3, r7
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002344:	4b1d      	ldr	r3, [pc, #116]	@ (80023bc <MX_TIM4_Init+0x94>)
 8002346:	4a1e      	ldr	r2, [pc, #120]	@ (80023c0 <MX_TIM4_Init+0x98>)
 8002348:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 800234a:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <MX_TIM4_Init+0x94>)
 800234c:	2207      	movs	r2, #7
 800234e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <MX_TIM4_Init+0x94>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8002356:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <MX_TIM4_Init+0x94>)
 8002358:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800235c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235e:	4b17      	ldr	r3, [pc, #92]	@ (80023bc <MX_TIM4_Init+0x94>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002364:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <MX_TIM4_Init+0x94>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800236a:	4814      	ldr	r0, [pc, #80]	@ (80023bc <MX_TIM4_Init+0x94>)
 800236c:	f002 fc02 	bl	8004b74 <HAL_TIM_Base_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002376:	f7ff fe43 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	4619      	mov	r1, r3
 8002386:	480d      	ldr	r0, [pc, #52]	@ (80023bc <MX_TIM4_Init+0x94>)
 8002388:	f002 ff42 	bl	8005210 <HAL_TIM_ConfigClockSource>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002392:	f7ff fe35 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800239e:	463b      	mov	r3, r7
 80023a0:	4619      	mov	r1, r3
 80023a2:	4806      	ldr	r0, [pc, #24]	@ (80023bc <MX_TIM4_Init+0x94>)
 80023a4:	f003 fad8 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80023ae:	f7ff fe27 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200002ac 	.word	0x200002ac
 80023c0:	40000800 	.word	0x40000800

080023c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d4:	d10c      	bne.n	80023f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80023ee:	e02a      	b.n	8002446 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <HAL_TIM_Base_MspInit+0x90>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d114      	bne.n	8002424 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	201d      	movs	r0, #29
 8002418:	f001 fa53 	bl	80038c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800241c:	201d      	movs	r0, #29
 800241e:	f001 fa6c 	bl	80038fa <HAL_NVIC_EnableIRQ>
}
 8002422:	e010      	b.n	8002446 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0b      	ldr	r2, [pc, #44]	@ (8002458 <HAL_TIM_Base_MspInit+0x94>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10b      	bne.n	8002446 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	61d3      	str	r3, [r2, #28]
 800243a:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_TIM_Base_MspInit+0x8c>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800

0800245c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800247a:	d117      	bne.n	80024ac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247c:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <HAL_TIM_MspPostInit+0x58>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4a0c      	ldr	r2, [pc, #48]	@ (80024b4 <HAL_TIM_MspPostInit+0x58>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6193      	str	r3, [r2, #24]
 8002488:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_TIM_MspPostInit+0x58>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOSFET_PWM_Pin;
 8002494:	2308      	movs	r3, #8
 8002496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOSFET_PWM_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	4619      	mov	r1, r3
 80024a6:	4804      	ldr	r0, [pc, #16]	@ (80024b8 <HAL_TIM_MspPostInit+0x5c>)
 80024a8:	f001 fc30 	bl	8003d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024ac:	bf00      	nop
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010800 	.word	0x40010800

080024bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024bc:	f7ff fe6c 	bl	8002198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480b      	ldr	r0, [pc, #44]	@ (80024f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024c2:	490c      	ldr	r1, [pc, #48]	@ (80024f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024c4:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a09      	ldr	r2, [pc, #36]	@ (80024fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024d8:	4c09      	ldr	r4, [pc, #36]	@ (8002500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f003 fc37 	bl	8005d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ea:	f7fe fec1 	bl	8001270 <main>
  bx lr
 80024ee:	4770      	bx	lr
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80024f8:	08006760 	.word	0x08006760
  ldr r2, =_sbss
 80024fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002500:	20000444 	.word	0x20000444

08002504 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <CAN1_RX1_IRQHandler>
	...

08002508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_Init+0x28>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <HAL_Init+0x28>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002518:	2003      	movs	r0, #3
 800251a:	f001 f9c7 	bl	80038ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251e:	200f      	movs	r0, #15
 8002520:	f000 f808 	bl	8002534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002524:	f7ff fd72 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40022000 	.word	0x40022000

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800253c:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_InitTick+0x54>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_InitTick+0x58>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f001 f9df 	bl	8003916 <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e00e      	b.n	8002580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d80a      	bhi.n	800257e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002568:	2200      	movs	r2, #0
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f001 f9a7 	bl	80038c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002574:	4a06      	ldr	r2, [pc, #24]	@ (8002590 <HAL_InitTick+0x5c>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	2000000c 	.word	0x2000000c
 800258c:	20000014 	.word	0x20000014
 8002590:	20000010 	.word	0x20000010

08002594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_IncTick+0x1c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <HAL_IncTick+0x20>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a03      	ldr	r2, [pc, #12]	@ (80025b4 <HAL_IncTick+0x20>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000014 	.word	0x20000014
 80025b4:	200002f4 	.word	0x200002f4

080025b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b02      	ldr	r3, [pc, #8]	@ (80025c8 <HAL_GetTick+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	200002f4 	.word	0x200002f4

080025cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff fff0 	bl	80025b8 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d005      	beq.n	80025f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_Delay+0x44>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f2:	bf00      	nop
 80025f4:	f7ff ffe0 	bl	80025b8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f7      	bhi.n	80025f4 <HAL_Delay+0x28>
  {
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000014 	.word	0x20000014

08002614 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0be      	b.n	80027b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fcda 	bl	800100c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fbb5 	bl	8002dc8 <ADC_ConversionStop_Disable>
 800265e:	4603      	mov	r3, r0
 8002660:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 8099 	bne.w	80027a2 <HAL_ADC_Init+0x18e>
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8095 	bne.w	80027a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002680:	f023 0302 	bic.w	r3, r3, #2
 8002684:	f043 0202 	orr.w	r2, r3, #2
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002694:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7b1b      	ldrb	r3, [r3, #12]
 800269a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800269c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ac:	d003      	beq.n	80026b6 <HAL_ADC_Init+0xa2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d102      	bne.n	80026bc <HAL_ADC_Init+0xa8>
 80026b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ba:	e000      	b.n	80026be <HAL_ADC_Init+0xaa>
 80026bc:	2300      	movs	r3, #0
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7d1b      	ldrb	r3, [r3, #20]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d119      	bne.n	8002700 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7b1b      	ldrb	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	3b01      	subs	r3, #1
 80026da:	035a      	lsls	r2, r3, #13
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	e00b      	b.n	8002700 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <HAL_ADC_Init+0x1a8>)
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	430b      	orrs	r3, r1
 8002726:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002730:	d003      	beq.n	800273a <HAL_ADC_Init+0x126>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d104      	bne.n	8002744 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	3b01      	subs	r3, #1
 8002740:	051b      	lsls	r3, r3, #20
 8002742:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	430a      	orrs	r2, r1
 8002756:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	4b18      	ldr	r3, [pc, #96]	@ (80027c0 <HAL_ADC_Init+0x1ac>)
 8002760:	4013      	ands	r3, r2
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	429a      	cmp	r2, r3
 8002766:	d10b      	bne.n	8002780 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	f023 0303 	bic.w	r3, r3, #3
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800277e:	e018      	b.n	80027b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	f023 0312 	bic.w	r3, r3, #18
 8002788:	f043 0210 	orr.w	r2, r3, #16
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027a0:	e007      	b.n	80027b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	ffe1f7fd 	.word	0xffe1f7fd
 80027c0:	ff1f0efe 	.word	0xff1f0efe

080027c4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a64      	ldr	r2, [pc, #400]	@ (800296c <HAL_ADC_Start_DMA+0x1a8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_Start_DMA+0x24>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a63      	ldr	r2, [pc, #396]	@ (8002970 <HAL_ADC_Start_DMA+0x1ac>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d106      	bne.n	80027f6 <HAL_ADC_Start_DMA+0x32>
 80027e8:	4b60      	ldr	r3, [pc, #384]	@ (800296c <HAL_ADC_Start_DMA+0x1a8>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 80b3 	bne.w	800295c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_Start_DMA+0x40>
 8002800:	2302      	movs	r3, #2
 8002802:	e0ae      	b.n	8002962 <HAL_ADC_Start_DMA+0x19e>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fa81 	bl	8002d14 <ADC_Enable>
 8002812:	4603      	mov	r3, r0
 8002814:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f040 809a 	bne.w	8002952 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a4e      	ldr	r2, [pc, #312]	@ (8002970 <HAL_ADC_Start_DMA+0x1ac>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d105      	bne.n	8002848 <HAL_ADC_Start_DMA+0x84>
 800283c:	4b4b      	ldr	r3, [pc, #300]	@ (800296c <HAL_ADC_Start_DMA+0x1a8>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d115      	bne.n	8002874 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d026      	beq.n	80028b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800286a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002872:	e01d      	b.n	80028b0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a39      	ldr	r2, [pc, #228]	@ (800296c <HAL_ADC_Start_DMA+0x1a8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_ADC_Start_DMA+0xd0>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a38      	ldr	r2, [pc, #224]	@ (8002970 <HAL_ADC_Start_DMA+0x1ac>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d10d      	bne.n	80028b0 <HAL_ADC_Start_DMA+0xec>
 8002894:	4b35      	ldr	r3, [pc, #212]	@ (800296c <HAL_ADC_Start_DMA+0x1a8>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	f023 0206 	bic.w	r2, r3, #6
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028c8:	e002      	b.n	80028d0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a25      	ldr	r2, [pc, #148]	@ (8002974 <HAL_ADC_Start_DMA+0x1b0>)
 80028de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4a24      	ldr	r2, [pc, #144]	@ (8002978 <HAL_ADC_Start_DMA+0x1b4>)
 80028e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a23      	ldr	r2, [pc, #140]	@ (800297c <HAL_ADC_Start_DMA+0x1b8>)
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0202 	mvn.w	r2, #2
 80028f8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002908:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a18      	ldr	r0, [r3, #32]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	334c      	adds	r3, #76	@ 0x4c
 8002914:	4619      	mov	r1, r3
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f001 f863 	bl	80039e4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002928:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800292c:	d108      	bne.n	8002940 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800293c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800293e:	e00f      	b.n	8002960 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800294e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002950:	e006      	b.n	8002960 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800295a:	e001      	b.n	8002960 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002960:	7dfb      	ldrb	r3, [r7, #23]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40012400 	.word	0x40012400
 8002970:	40012800 	.word	0x40012800
 8002974:	08002e4b 	.word	0x08002e4b
 8002978:	08002ec7 	.word	0x08002ec7
 800297c:	08002ee3 	.word	0x08002ee3

08002980 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d03e      	beq.n	8002a20 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d039      	beq.n	8002a20 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80029ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029d2:	d11d      	bne.n	8002a10 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d119      	bne.n	8002a10 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0220 	bic.w	r2, r2, #32
 80029ea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fa59 	bl	8001ec8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f06f 0212 	mvn.w	r2, #18
 8002a1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d04d      	beq.n	8002ac6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d048      	beq.n	8002ac6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002a56:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002a5a:	d012      	beq.n	8002a82 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d125      	bne.n	8002ab6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002a74:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002a78:	d11d      	bne.n	8002ab6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d119      	bne.n	8002ab6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a90:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fc88 	bl	80033cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 020c 	mvn.w	r2, #12
 8002ac4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ade:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f809 	bl	8002afe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0201 	mvn.w	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x20>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e0dc      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1da>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d81c      	bhi.n	8002b8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	3b05      	subs	r3, #5
 8002b66:	221f      	movs	r2, #31
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	4019      	ands	r1, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b05      	subs	r3, #5
 8002b80:	fa00 f203 	lsl.w	r2, r0, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b8c:	e03c      	b.n	8002c08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d81c      	bhi.n	8002bd0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b23      	subs	r3, #35	@ 0x23
 8002ba8:	221f      	movs	r2, #31
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	4019      	ands	r1, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b23      	subs	r3, #35	@ 0x23
 8002bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bce:	e01b      	b.n	8002c08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	3b41      	subs	r3, #65	@ 0x41
 8002be2:	221f      	movs	r2, #31
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	4019      	ands	r1, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b41      	subs	r3, #65	@ 0x41
 8002bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b09      	cmp	r3, #9
 8002c0e:	d91c      	bls.n	8002c4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68d9      	ldr	r1, [r3, #12]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	3b1e      	subs	r3, #30
 8002c22:	2207      	movs	r2, #7
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	4019      	ands	r1, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6898      	ldr	r0, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b1e      	subs	r3, #30
 8002c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	e019      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6919      	ldr	r1, [r3, #16]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	4019      	ands	r1, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6898      	ldr	r0, [r3, #8]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	fa00 f203 	lsl.w	r2, r0, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d003      	beq.n	8002c8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c8a:	2b11      	cmp	r3, #17
 8002c8c:	d132      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d125      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d126      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002cb4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d11a      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cbe:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <HAL_ADC_ConfigChannel+0x1e8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	@ (8002d10 <HAL_ADC_ConfigChannel+0x1ec>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	0c9a      	lsrs	r2, r3, #18
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cd4:	e002      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f9      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ce2:	e007      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	40012400 	.word	0x40012400
 8002d0c:	2000000c 	.word	0x2000000c
 8002d10:	431bde83 	.word	0x431bde83

08002d14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d040      	beq.n	8002db4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d42:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <ADC_Enable+0xac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc4 <ADC_Enable+0xb0>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9b      	lsrs	r3, r3, #18
 8002d4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d50:	e002      	b.n	8002d58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f9      	bne.n	8002d52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d5e:	f7ff fc2b 	bl	80025b8 <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d64:	e01f      	b.n	8002da6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d66:	f7ff fc27 	bl	80025b8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d918      	bls.n	8002da6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d011      	beq.n	8002da6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d86:	f043 0210 	orr.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e007      	b.n	8002db6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d1d8      	bne.n	8002d66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000000c 	.word	0x2000000c
 8002dc4:	431bde83 	.word	0x431bde83

08002dc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d12e      	bne.n	8002e40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002df2:	f7ff fbe1 	bl	80025b8 <HAL_GetTick>
 8002df6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002df8:	e01b      	b.n	8002e32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dfa:	f7ff fbdd 	bl	80025b8 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d914      	bls.n	8002e32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d10d      	bne.n	8002e32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e007      	b.n	8002e42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d0dc      	beq.n	8002dfa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d127      	bne.n	8002eb4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e7a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e7e:	d115      	bne.n	8002eac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7ff f80b 	bl	8001ec8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002eb2:	e004      	b.n	8002ebe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7fe ff5b 	bl	8001d90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	f043 0204 	orr.w	r2, r3, #4
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff fe01 	bl	8002b10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_ADCEx_Calibration_Start+0x1e>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e097      	b.n	8003066 <HAL_ADCEx_Calibration_Start+0x14e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff42 	bl	8002dc8 <ADC_ConversionStop_Disable>
 8002f44:	4603      	mov	r3, r0
 8002f46:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fee3 	bl	8002d14 <ADC_Enable>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 8081 	bne.w	800305c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f62:	f023 0302 	bic.w	r3, r3, #2
 8002f66:	f043 0202 	orr.w	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f6e:	4b40      	ldr	r3, [pc, #256]	@ (8003070 <HAL_ADCEx_Calibration_Start+0x158>)
 8002f70:	681c      	ldr	r4, [r3, #0]
 8002f72:	2002      	movs	r0, #2
 8002f74:	f001 fd48 	bl	8004a08 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002f7e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002f80:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002f82:	e002      	b.n	8002f8a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f9      	bne.n	8002f84 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0208 	orr.w	r2, r2, #8
 8002f9e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002fa0:	f7ff fb0a 	bl	80025b8 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fa6:	e01b      	b.n	8002fe0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002fa8:	f7ff fb06 	bl	80025b8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b0a      	cmp	r3, #10
 8002fb4:	d914      	bls.n	8002fe0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	f023 0312 	bic.w	r3, r3, #18
 8002fcc:	f043 0210 	orr.w	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e042      	b.n	8003066 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1dc      	bne.n	8002fa8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0204 	orr.w	r2, r2, #4
 8002ffc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ffe:	f7ff fadb 	bl	80025b8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003004:	e01b      	b.n	800303e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003006:	f7ff fad7 	bl	80025b8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b0a      	cmp	r3, #10
 8003012:	d914      	bls.n	800303e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	f023 0312 	bic.w	r3, r3, #18
 800302a:	f043 0210 	orr.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e013      	b.n	8003066 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1dc      	bne.n	8003006 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	f023 0303 	bic.w	r3, r3, #3
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003064:	7dfb      	ldrb	r3, [r7, #23]
}
 8003066:	4618      	mov	r0, r3
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}
 800306e:	bf00      	nop
 8003070:	2000000c 	.word	0x2000000c

08003074 <HAL_ADCEx_InjectedStart>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_ADCEx_InjectedStart+0x1a>
 800308a:	2302      	movs	r3, #2
 800308c:	e070      	b.n	8003170 <HAL_ADCEx_InjectedStart+0xfc>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff fe3c 	bl	8002d14 <ADC_Enable>
 800309c:	4603      	mov	r3, r0
 800309e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d15f      	bne.n	8003166 <HAL_ADCEx_InjectedStart+0xf2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2e      	ldr	r2, [pc, #184]	@ (8003178 <HAL_ADCEx_InjectedStart+0x104>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d105      	bne.n	80030d0 <HAL_ADCEx_InjectedStart+0x5c>
 80030c4:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_ADCEx_InjectedStart+0x108>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_ADCEx_InjectedStart+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	@ 0x28
 80030dc:	e005      	b.n	80030ea <HAL_ADCEx_InjectedStart+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <HAL_ADCEx_InjectedStart+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0204 	mvn.w	r2, #4
 800310c:	601a      	str	r2, [r3, #0]
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
    /* slave, ADC is enabled only (conversion is not started). If ADC is      */
    /* master, ADC is enabled and conversion is started.                      */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d128      	bne.n	800316e <HAL_ADCEx_InjectedStart+0xfa>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003126:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800312a:	d113      	bne.n	8003154 <HAL_ADCEx_InjectedStart+0xe0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003130:	4a11      	ldr	r2, [pc, #68]	@ (8003178 <HAL_ADCEx_InjectedStart+0x104>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d105      	bne.n	8003142 <HAL_ADCEx_InjectedStart+0xce>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003136:	4b11      	ldr	r3, [pc, #68]	@ (800317c <HAL_ADCEx_InjectedStart+0x108>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800313e:	2b00      	cmp	r3, #0
 8003140:	d108      	bne.n	8003154 <HAL_ADCEx_InjectedStart+0xe0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 1202 	orr.w	r2, r2, #2129920	@ 0x208000
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	e00c      	b.n	800316e <HAL_ADCEx_InjectedStart+0xfa>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	e003      	b.n	800316e <HAL_ADCEx_InjectedStart+0xfa>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800316e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40012800 	.word	0x40012800
 800317c:	40012400 	.word	0x40012400

08003180 <HAL_ADCEx_InjectedPollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Get timeout */
  tickstart = HAL_GetTick();  
 8003192:	f7ff fa11 	bl	80025b8 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag JEOC is not set after each conversion, no timeout status can  */
  /*    be set.                                                               */
  if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d12a      	bne.n	80031fc <HAL_ADCEx_InjectedPollForConversion+0x7c>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80031a6:	e021      	b.n	80031ec <HAL_ADCEx_InjectedPollForConversion+0x6c>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d01d      	beq.n	80031ec <HAL_ADCEx_InjectedPollForConversion+0x6c>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_ADCEx_InjectedPollForConversion+0x46>
 80031b6:	f7ff f9ff 	bl	80025b8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d212      	bcs.n	80031ec <HAL_ADCEx_InjectedPollForConversion+0x6c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <HAL_ADCEx_InjectedPollForConversion+0x6c>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0b1      	b.n	8003350 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0d6      	beq.n	80031a8 <HAL_ADCEx_InjectedPollForConversion+0x28>
 80031fa:	e070      	b.n	80032de <HAL_ADCEx_InjectedPollForConversion+0x15e>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80031fc:	4b56      	ldr	r3, [pc, #344]	@ (8003358 <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 80031fe:	681c      	ldr	r4, [r3, #0]
 8003200:	2002      	movs	r0, #2
 8003202:	f001 fc01 	bl	8004a08 <HAL_RCCEx_GetPeriphCLKFreq>
 8003206:	4603      	mov	r3, r0
 8003208:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6919      	ldr	r1, [r3, #16]
 8003212:	4b52      	ldr	r3, [pc, #328]	@ (800335c <HAL_ADCEx_InjectedPollForConversion+0x1dc>)
 8003214:	400b      	ands	r3, r1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d118      	bne.n	800324c <HAL_ADCEx_InjectedPollForConversion+0xcc>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68d9      	ldr	r1, [r3, #12]
 8003220:	4b4f      	ldr	r3, [pc, #316]	@ (8003360 <HAL_ADCEx_InjectedPollForConversion+0x1e0>)
 8003222:	400b      	ands	r3, r1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d111      	bne.n	800324c <HAL_ADCEx_InjectedPollForConversion+0xcc>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6919      	ldr	r1, [r3, #16]
 800322e:	4b4d      	ldr	r3, [pc, #308]	@ (8003364 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 8003230:	400b      	ands	r3, r1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d108      	bne.n	8003248 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68d9      	ldr	r1, [r3, #12]
 800323c:	4b4a      	ldr	r3, [pc, #296]	@ (8003368 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 800323e:	400b      	ands	r3, r1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 8003244:	2314      	movs	r3, #20
 8003246:	e020      	b.n	800328a <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8003248:	2329      	movs	r3, #41	@ 0x29
 800324a:	e01e      	b.n	800328a <HAL_ADCEx_InjectedPollForConversion+0x10a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6919      	ldr	r1, [r3, #16]
 8003252:	4b44      	ldr	r3, [pc, #272]	@ (8003364 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 8003254:	400b      	ands	r3, r1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_ADCEx_InjectedPollForConversion+0xe8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	4b41      	ldr	r3, [pc, #260]	@ (8003368 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 8003262:	400b      	ands	r3, r1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <HAL_ADCEx_InjectedPollForConversion+0x104>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6919      	ldr	r1, [r3, #16]
 800326e:	4b3f      	ldr	r3, [pc, #252]	@ (800336c <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 8003270:	400b      	ands	r3, r1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68d9      	ldr	r1, [r3, #12]
 800327c:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 800327e:	400b      	ands	r3, r1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8003284:	2354      	movs	r3, #84	@ 0x54
 8003286:	e000      	b.n	800328a <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8003288:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	617b      	str	r3, [r7, #20]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003290:	e021      	b.n	80032d6 <HAL_ADCEx_InjectedPollForConversion+0x156>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d01a      	beq.n	80032d0 <HAL_ADCEx_InjectedPollForConversion+0x150>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <HAL_ADCEx_InjectedPollForConversion+0x130>
 80032a0:	f7ff f98a 	bl	80025b8 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d20f      	bcs.n	80032d0 <HAL_ADCEx_InjectedPollForConversion+0x150>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d90b      	bls.n	80032d0 <HAL_ADCEx_InjectedPollForConversion+0x150>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	f043 0204 	orr.w	r2, r3, #4
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e03f      	b.n	8003350 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3301      	adds	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d8d9      	bhi.n	8003292 <HAL_ADCEx_InjectedPollForConversion+0x112>
  }

  /* Clear injected group conversion flag */
  /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
  /* simultaneously.                                                          */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f06f 020e 	mvn.w	r2, #14
 80032e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80032fe:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003302:	d012      	beq.n	800332a <HAL_ADCEx_InjectedPollForConversion+0x1aa>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800330e:	2b00      	cmp	r3, #0
 8003310:	d11d      	bne.n	800334e <HAL_ADCEx_InjectedPollForConversion+0x1ce>
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800331c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003320:	d115      	bne.n	800334e <HAL_ADCEx_InjectedPollForConversion+0x1ce>
      (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7b1b      	ldrb	r3, [r3, #12]
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003326:	2b00      	cmp	r3, #0
 8003328:	d111      	bne.n	800334e <HAL_ADCEx_InjectedPollForConversion+0x1ce>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	629a      	str	r2, [r3, #40]	@ 0x28
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_ADCEx_InjectedPollForConversion+0x1ce>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	bd90      	pop	{r4, r7, pc}
 8003358:	2000000c 	.word	0x2000000c
 800335c:	24924924 	.word	0x24924924
 8003360:	00924924 	.word	0x00924924
 8003364:	12492492 	.word	0x12492492
 8003368:	00492492 	.word	0x00492492
 800336c:	00249249 	.word	0x00249249

08003370 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d009      	beq.n	8003398 <HAL_ADCEx_InjectedGetValue+0x28>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b04      	cmp	r3, #4
 8003388:	d815      	bhi.n	80033b6 <HAL_ADCEx_InjectedGetValue+0x46>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d00d      	beq.n	80033ac <HAL_ADCEx_InjectedGetValue+0x3c>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d005      	beq.n	80033a2 <HAL_ADCEx_InjectedGetValue+0x32>
 8003396:	e00e      	b.n	80033b6 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800339e:	60fb      	str	r3, [r7, #12]
      break;
 80033a0:	e00e      	b.n	80033c0 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a8:	60fb      	str	r3, [r7, #12]
      break;
 80033aa:	e009      	b.n	80033c0 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	60fb      	str	r3, [r7, #12]
      break;
 80033b4:	e004      	b.n	80033c0 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	60fb      	str	r3, [r7, #12]
      break;
 80033be:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80033c0:	68fb      	ldr	r3, [r7, #12]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80033e0:	b490      	push	{r4, r7}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x20>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e17d      	b.n	80036fc <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d119      	bne.n	8003444 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10c      	bne.n	8003432 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	0d9b      	lsrs	r3, r3, #22
 8003420:	059b      	lsls	r3, r3, #22
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	03d1      	lsls	r1, r2, #15
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	430b      	orrs	r3, r1
 800342e:	6393      	str	r3, [r2, #56]	@ 0x38
 8003430:	e04f      	b.n	80034d2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	f043 0220 	orr.w	r2, r3, #32
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
 8003442:	e046      	b.n	80034d2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	429a      	cmp	r2, r3
 800344e:	d82a      	bhi.n	80034a6 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	1ad2      	subs	r2, r2, r3
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	330f      	adds	r3, #15
 8003468:	221f      	movs	r2, #31
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003472:	43db      	mvns	r3, r3
 8003474:	4019      	ands	r1, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	3b01      	subs	r3, #1
 800347c:	0518      	lsls	r0, r3, #20
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681c      	ldr	r4, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	1ad2      	subs	r2, r2, r3
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	330f      	adds	r3, #15
 8003494:	fa04 f303 	lsl.w	r3, r4, r3
 8003498:	ea40 0203 	orr.w	r2, r0, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80034a4:	e015      	b.n	80034d2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	1ad2      	subs	r2, r2, r3
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	330f      	adds	r3, #15
 80034be:	221f      	movs	r2, #31
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80034c8:	43da      	mvns	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	400a      	ands	r2, r1
 80034d0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d00c      	beq.n	80034fa <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	6991      	ldr	r1, [r2, #24]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	430b      	orrs	r3, r1
 80034f8:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	7d5b      	ldrb	r3, [r3, #21]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d115      	bne.n	800352e <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800350a:	d108      	bne.n	800351e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	e007      	b.n	800352e <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	7d1b      	ldrb	r3, [r3, #20]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d114      	bne.n	8003560 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	7d5b      	ldrb	r3, [r3, #21]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d108      	bne.n	8003550 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	e007      	b.n	8003560 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b09      	cmp	r3, #9
 8003566:	d91c      	bls.n	80035a2 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68d9      	ldr	r1, [r3, #12]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	3b1e      	subs	r3, #30
 800357a:	2207      	movs	r2, #7
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	4019      	ands	r1, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6898      	ldr	r0, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	3b1e      	subs	r3, #30
 8003594:	fa00 f203 	lsl.w	r2, r0, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	e019      	b.n	80035d6 <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6919      	ldr	r1, [r3, #16]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	2207      	movs	r2, #7
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	4019      	ands	r1, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6898      	ldr	r0, [r3, #8]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	fa00 f203 	lsl.w	r2, r0, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d003      	beq.n	80035e6 <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80035e2:	2b11      	cmp	r3, #17
 80035e4:	d107      	bne.n	80035f6 <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80035f4:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d022      	beq.n	8003644 <HAL_ADCEx_InjectedConfigChannel+0x264>
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d82e      	bhi.n	8003660 <HAL_ADCEx_InjectedConfigChannel+0x280>
 8003602:	2b01      	cmp	r3, #1
 8003604:	d002      	beq.n	800360c <HAL_ADCEx_InjectedConfigChannel+0x22c>
 8003606:	2b02      	cmp	r3, #2
 8003608:	d00e      	beq.n	8003628 <HAL_ADCEx_InjectedConfigChannel+0x248>
 800360a:	e029      	b.n	8003660 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003616:	f023 030f 	bic.w	r3, r3, #15
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	68d1      	ldr	r1, [r2, #12]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	430b      	orrs	r3, r1
 8003624:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8003626:	e029      	b.n	800367c <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003632:	f023 030f 	bic.w	r3, r3, #15
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	68d1      	ldr	r1, [r2, #12]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	430b      	orrs	r3, r1
 8003640:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8003642:	e01b      	b.n	800367c <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800364e:	f023 030f 	bic.w	r3, r3, #15
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	68d1      	ldr	r1, [r2, #12]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	430b      	orrs	r3, r1
 800365c:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 800365e:	e00d      	b.n	800367c <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800366a:	f023 030f 	bic.w	r3, r3, #15
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	68d1      	ldr	r1, [r2, #12]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	430b      	orrs	r3, r1
 8003678:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 800367a:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b10      	cmp	r3, #16
 8003682:	d003      	beq.n	800368c <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003688:	2b11      	cmp	r3, #17
 800368a:	d132      	bne.n	80036f2 <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1d      	ldr	r2, [pc, #116]	@ (8003708 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d125      	bne.n	80036e2 <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d126      	bne.n	80036f2 <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80036b2:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d11a      	bne.n	80036f2 <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036bc:	4b13      	ldr	r3, [pc, #76]	@ (800370c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a13      	ldr	r2, [pc, #76]	@ (8003710 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0c9a      	lsrs	r2, r3, #18
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036d2:	e002      	b.n	80036da <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f9      	bne.n	80036d4 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 80036e0:	e007      	b.n	80036f2 <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bc90      	pop	{r4, r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40012400 	.word	0x40012400
 800370c:	2000000c 	.word	0x2000000c
 8003710:	431bde83 	.word	0x431bde83

08003714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003724:	4b0c      	ldr	r3, [pc, #48]	@ (8003758 <__NVIC_SetPriorityGrouping+0x44>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003730:	4013      	ands	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800373c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003746:	4a04      	ldr	r2, [pc, #16]	@ (8003758 <__NVIC_SetPriorityGrouping+0x44>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	60d3      	str	r3, [r2, #12]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003760:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <__NVIC_GetPriorityGrouping+0x18>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	f003 0307 	and.w	r3, r3, #7
}
 800376a:	4618      	mov	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	2b00      	cmp	r3, #0
 8003788:	db0b      	blt.n	80037a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	4906      	ldr	r1, [pc, #24]	@ (80037ac <__NVIC_EnableIRQ+0x34>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	2001      	movs	r0, #1
 800379a:	fa00 f202 	lsl.w	r2, r0, r2
 800379e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	490c      	ldr	r1, [pc, #48]	@ (80037fc <__NVIC_SetPriority+0x4c>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	0112      	lsls	r2, r2, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4908      	ldr	r1, [pc, #32]	@ (8003800 <__NVIC_SetPriority+0x50>)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3b04      	subs	r3, #4
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf28      	it	cs
 8003822:	2304      	movcs	r3, #4
 8003824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3304      	adds	r3, #4
 800382a:	2b06      	cmp	r3, #6
 800382c:	d902      	bls.n	8003834 <NVIC_EncodePriority+0x30>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b03      	subs	r3, #3
 8003832:	e000      	b.n	8003836 <NVIC_EncodePriority+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	401a      	ands	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384c:	f04f 31ff 	mov.w	r1, #4294967295
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	43d9      	mvns	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	4313      	orrs	r3, r2
         );
}
 800385e:	4618      	mov	r0, r3
 8003860:	3724      	adds	r7, #36	@ 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3b01      	subs	r3, #1
 8003874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003878:	d301      	bcc.n	800387e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800387a:	2301      	movs	r3, #1
 800387c:	e00f      	b.n	800389e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800387e:	4a0a      	ldr	r2, [pc, #40]	@ (80038a8 <SysTick_Config+0x40>)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003886:	210f      	movs	r1, #15
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	f7ff ff90 	bl	80037b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <SysTick_Config+0x40>)
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003896:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <SysTick_Config+0x40>)
 8003898:	2207      	movs	r2, #7
 800389a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	e000e010 	.word	0xe000e010

080038ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff2d 	bl	8003714 <__NVIC_SetPriorityGrouping>
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	4603      	mov	r3, r0
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d4:	f7ff ff42 	bl	800375c <__NVIC_GetPriorityGrouping>
 80038d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	6978      	ldr	r0, [r7, #20]
 80038e0:	f7ff ff90 	bl	8003804 <NVIC_EncodePriority>
 80038e4:	4602      	mov	r2, r0
 80038e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff5f 	bl	80037b0 <__NVIC_SetPriority>
}
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff35 	bl	8003778 <__NVIC_EnableIRQ>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ffa2 	bl	8003868 <SysTick_Config>
 8003924:	4603      	mov	r3, r0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e043      	b.n	80039ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	4b22      	ldr	r3, [pc, #136]	@ (80039d8 <HAL_DMA_Init+0xa8>)
 800394e:	4413      	add	r3, r2
 8003950:	4a22      	ldr	r2, [pc, #136]	@ (80039dc <HAL_DMA_Init+0xac>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	009a      	lsls	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1f      	ldr	r2, [pc, #124]	@ (80039e0 <HAL_DMA_Init+0xb0>)
 8003962:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800397a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800397e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	bffdfff8 	.word	0xbffdfff8
 80039dc:	cccccccd 	.word	0xcccccccd
 80039e0:	40020000 	.word	0x40020000

080039e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_Start_IT+0x20>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e04b      	b.n	8003a9c <HAL_DMA_Start_IT+0xb8>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d13a      	bne.n	8003a8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f937 	bl	8003cb0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 020e 	orr.w	r2, r2, #14
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e00f      	b.n	8003a7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 020a 	orr.w	r2, r2, #10
 8003a7a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e005      	b.n	8003a9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
 8003a98:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d04f      	beq.n	8003b6c <HAL_DMA_IRQHandler+0xc8>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d04a      	beq.n	8003b6c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d107      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0204 	bic.w	r2, r2, #4
 8003af2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a66      	ldr	r2, [pc, #408]	@ (8003c94 <HAL_DMA_IRQHandler+0x1f0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d029      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xae>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a65      	ldr	r2, [pc, #404]	@ (8003c98 <HAL_DMA_IRQHandler+0x1f4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d022      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xaa>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a63      	ldr	r2, [pc, #396]	@ (8003c9c <HAL_DMA_IRQHandler+0x1f8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01a      	beq.n	8003b48 <HAL_DMA_IRQHandler+0xa4>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a62      	ldr	r2, [pc, #392]	@ (8003ca0 <HAL_DMA_IRQHandler+0x1fc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d012      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x9e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a60      	ldr	r2, [pc, #384]	@ (8003ca4 <HAL_DMA_IRQHandler+0x200>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00a      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x98>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ca8 <HAL_DMA_IRQHandler+0x204>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d102      	bne.n	8003b36 <HAL_DMA_IRQHandler+0x92>
 8003b30:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b34:	e00e      	b.n	8003b54 <HAL_DMA_IRQHandler+0xb0>
 8003b36:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b3a:	e00b      	b.n	8003b54 <HAL_DMA_IRQHandler+0xb0>
 8003b3c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003b40:	e008      	b.n	8003b54 <HAL_DMA_IRQHandler+0xb0>
 8003b42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b46:	e005      	b.n	8003b54 <HAL_DMA_IRQHandler+0xb0>
 8003b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b4c:	e002      	b.n	8003b54 <HAL_DMA_IRQHandler+0xb0>
 8003b4e:	2340      	movs	r3, #64	@ 0x40
 8003b50:	e000      	b.n	8003b54 <HAL_DMA_IRQHandler+0xb0>
 8003b52:	2304      	movs	r3, #4
 8003b54:	4a55      	ldr	r2, [pc, #340]	@ (8003cac <HAL_DMA_IRQHandler+0x208>)
 8003b56:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8094 	beq.w	8003c8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b6a:	e08e      	b.n	8003c8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	2202      	movs	r2, #2
 8003b72:	409a      	lsls	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d056      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x186>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d051      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 020a 	bic.w	r2, r2, #10
 8003ba2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a38      	ldr	r2, [pc, #224]	@ (8003c94 <HAL_DMA_IRQHandler+0x1f0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d029      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x166>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a37      	ldr	r2, [pc, #220]	@ (8003c98 <HAL_DMA_IRQHandler+0x1f4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x162>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a35      	ldr	r2, [pc, #212]	@ (8003c9c <HAL_DMA_IRQHandler+0x1f8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01a      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x15c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a34      	ldr	r2, [pc, #208]	@ (8003ca0 <HAL_DMA_IRQHandler+0x1fc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d012      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x156>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a32      	ldr	r2, [pc, #200]	@ (8003ca4 <HAL_DMA_IRQHandler+0x200>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x150>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a31      	ldr	r2, [pc, #196]	@ (8003ca8 <HAL_DMA_IRQHandler+0x204>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d102      	bne.n	8003bee <HAL_DMA_IRQHandler+0x14a>
 8003be8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003bec:	e00e      	b.n	8003c0c <HAL_DMA_IRQHandler+0x168>
 8003bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bf2:	e00b      	b.n	8003c0c <HAL_DMA_IRQHandler+0x168>
 8003bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bf8:	e008      	b.n	8003c0c <HAL_DMA_IRQHandler+0x168>
 8003bfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bfe:	e005      	b.n	8003c0c <HAL_DMA_IRQHandler+0x168>
 8003c00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c04:	e002      	b.n	8003c0c <HAL_DMA_IRQHandler+0x168>
 8003c06:	2320      	movs	r3, #32
 8003c08:	e000      	b.n	8003c0c <HAL_DMA_IRQHandler+0x168>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	4a27      	ldr	r2, [pc, #156]	@ (8003cac <HAL_DMA_IRQHandler+0x208>)
 8003c0e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d034      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c28:	e02f      	b.n	8003c8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	2208      	movs	r2, #8
 8003c30:	409a      	lsls	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d028      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x1e8>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d023      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 020e 	bic.w	r2, r2, #14
 8003c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
    }
  }
  return;
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
}
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40020008 	.word	0x40020008
 8003c98:	4002001c 	.word	0x4002001c
 8003c9c:	40020030 	.word	0x40020030
 8003ca0:	40020044 	.word	0x40020044
 8003ca4:	40020058 	.word	0x40020058
 8003ca8:	4002006c 	.word	0x4002006c
 8003cac:	40020000 	.word	0x40020000

08003cb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d108      	bne.n	8003cf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cee:	e007      	b.n	8003d00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	60da      	str	r2, [r3, #12]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
	...

08003d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b08b      	sub	sp, #44	@ 0x2c
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d1e:	e169      	b.n	8003ff4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d20:	2201      	movs	r2, #1
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	f040 8158 	bne.w	8003fee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4a9a      	ldr	r2, [pc, #616]	@ (8003fac <HAL_GPIO_Init+0x2a0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d05e      	beq.n	8003e06 <HAL_GPIO_Init+0xfa>
 8003d48:	4a98      	ldr	r2, [pc, #608]	@ (8003fac <HAL_GPIO_Init+0x2a0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d875      	bhi.n	8003e3a <HAL_GPIO_Init+0x12e>
 8003d4e:	4a98      	ldr	r2, [pc, #608]	@ (8003fb0 <HAL_GPIO_Init+0x2a4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d058      	beq.n	8003e06 <HAL_GPIO_Init+0xfa>
 8003d54:	4a96      	ldr	r2, [pc, #600]	@ (8003fb0 <HAL_GPIO_Init+0x2a4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d86f      	bhi.n	8003e3a <HAL_GPIO_Init+0x12e>
 8003d5a:	4a96      	ldr	r2, [pc, #600]	@ (8003fb4 <HAL_GPIO_Init+0x2a8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d052      	beq.n	8003e06 <HAL_GPIO_Init+0xfa>
 8003d60:	4a94      	ldr	r2, [pc, #592]	@ (8003fb4 <HAL_GPIO_Init+0x2a8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d869      	bhi.n	8003e3a <HAL_GPIO_Init+0x12e>
 8003d66:	4a94      	ldr	r2, [pc, #592]	@ (8003fb8 <HAL_GPIO_Init+0x2ac>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d04c      	beq.n	8003e06 <HAL_GPIO_Init+0xfa>
 8003d6c:	4a92      	ldr	r2, [pc, #584]	@ (8003fb8 <HAL_GPIO_Init+0x2ac>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d863      	bhi.n	8003e3a <HAL_GPIO_Init+0x12e>
 8003d72:	4a92      	ldr	r2, [pc, #584]	@ (8003fbc <HAL_GPIO_Init+0x2b0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d046      	beq.n	8003e06 <HAL_GPIO_Init+0xfa>
 8003d78:	4a90      	ldr	r2, [pc, #576]	@ (8003fbc <HAL_GPIO_Init+0x2b0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d85d      	bhi.n	8003e3a <HAL_GPIO_Init+0x12e>
 8003d7e:	2b12      	cmp	r3, #18
 8003d80:	d82a      	bhi.n	8003dd8 <HAL_GPIO_Init+0xcc>
 8003d82:	2b12      	cmp	r3, #18
 8003d84:	d859      	bhi.n	8003e3a <HAL_GPIO_Init+0x12e>
 8003d86:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <HAL_GPIO_Init+0x80>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003e07 	.word	0x08003e07
 8003d90:	08003de1 	.word	0x08003de1
 8003d94:	08003df3 	.word	0x08003df3
 8003d98:	08003e35 	.word	0x08003e35
 8003d9c:	08003e3b 	.word	0x08003e3b
 8003da0:	08003e3b 	.word	0x08003e3b
 8003da4:	08003e3b 	.word	0x08003e3b
 8003da8:	08003e3b 	.word	0x08003e3b
 8003dac:	08003e3b 	.word	0x08003e3b
 8003db0:	08003e3b 	.word	0x08003e3b
 8003db4:	08003e3b 	.word	0x08003e3b
 8003db8:	08003e3b 	.word	0x08003e3b
 8003dbc:	08003e3b 	.word	0x08003e3b
 8003dc0:	08003e3b 	.word	0x08003e3b
 8003dc4:	08003e3b 	.word	0x08003e3b
 8003dc8:	08003e3b 	.word	0x08003e3b
 8003dcc:	08003e3b 	.word	0x08003e3b
 8003dd0:	08003de9 	.word	0x08003de9
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	4a79      	ldr	r2, [pc, #484]	@ (8003fc0 <HAL_GPIO_Init+0x2b4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dde:	e02c      	b.n	8003e3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	623b      	str	r3, [r7, #32]
          break;
 8003de6:	e029      	b.n	8003e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	3304      	adds	r3, #4
 8003dee:	623b      	str	r3, [r7, #32]
          break;
 8003df0:	e024      	b.n	8003e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	3308      	adds	r3, #8
 8003df8:	623b      	str	r3, [r7, #32]
          break;
 8003dfa:	e01f      	b.n	8003e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	330c      	adds	r3, #12
 8003e02:	623b      	str	r3, [r7, #32]
          break;
 8003e04:	e01a      	b.n	8003e3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e0e:	2304      	movs	r3, #4
 8003e10:	623b      	str	r3, [r7, #32]
          break;
 8003e12:	e013      	b.n	8003e3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	611a      	str	r2, [r3, #16]
          break;
 8003e26:	e009      	b.n	8003e3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e28:	2308      	movs	r3, #8
 8003e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	615a      	str	r2, [r3, #20]
          break;
 8003e32:	e003      	b.n	8003e3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e34:	2300      	movs	r3, #0
 8003e36:	623b      	str	r3, [r7, #32]
          break;
 8003e38:	e000      	b.n	8003e3c <HAL_GPIO_Init+0x130>
          break;
 8003e3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2bff      	cmp	r3, #255	@ 0xff
 8003e40:	d801      	bhi.n	8003e46 <HAL_GPIO_Init+0x13a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	e001      	b.n	8003e4a <HAL_GPIO_Init+0x13e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2bff      	cmp	r3, #255	@ 0xff
 8003e50:	d802      	bhi.n	8003e58 <HAL_GPIO_Init+0x14c>
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	e002      	b.n	8003e5e <HAL_GPIO_Init+0x152>
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	3b08      	subs	r3, #8
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	210f      	movs	r1, #15
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	401a      	ands	r2, r3
 8003e70:	6a39      	ldr	r1, [r7, #32]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80b1 	beq.w	8003fee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc4 <HAL_GPIO_Init+0x2b8>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	4a4c      	ldr	r2, [pc, #304]	@ (8003fc4 <HAL_GPIO_Init+0x2b8>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6193      	str	r3, [r2, #24]
 8003e98:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc4 <HAL_GPIO_Init+0x2b8>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ea4:	4a48      	ldr	r2, [pc, #288]	@ (8003fc8 <HAL_GPIO_Init+0x2bc>)
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	220f      	movs	r2, #15
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a40      	ldr	r2, [pc, #256]	@ (8003fcc <HAL_GPIO_Init+0x2c0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <HAL_GPIO_Init+0x1ec>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8003fd0 <HAL_GPIO_Init+0x2c4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_GPIO_Init+0x1e8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd4 <HAL_GPIO_Init+0x2c8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <HAL_GPIO_Init+0x1e4>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a3d      	ldr	r2, [pc, #244]	@ (8003fd8 <HAL_GPIO_Init+0x2cc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <HAL_GPIO_Init+0x1e0>
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e006      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003eec:	2304      	movs	r3, #4
 8003eee:	e004      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e002      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_GPIO_Init+0x1ee>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efc:	f002 0203 	and.w	r2, r2, #3
 8003f00:	0092      	lsls	r2, r2, #2
 8003f02:	4093      	lsls	r3, r2
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f0a:	492f      	ldr	r1, [pc, #188]	@ (8003fc8 <HAL_GPIO_Init+0x2bc>)
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	089b      	lsrs	r3, r3, #2
 8003f10:	3302      	adds	r3, #2
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f24:	4b2d      	ldr	r3, [pc, #180]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	492c      	ldr	r1, [pc, #176]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	608b      	str	r3, [r1, #8]
 8003f30:	e006      	b.n	8003f40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f32:	4b2a      	ldr	r3, [pc, #168]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	4928      	ldr	r1, [pc, #160]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f4c:	4b23      	ldr	r3, [pc, #140]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	4922      	ldr	r1, [pc, #136]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60cb      	str	r3, [r1, #12]
 8003f58:	e006      	b.n	8003f68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f5a:	4b20      	ldr	r3, [pc, #128]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	491e      	ldr	r1, [pc, #120]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d006      	beq.n	8003f82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f74:	4b19      	ldr	r3, [pc, #100]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	4918      	ldr	r1, [pc, #96]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
 8003f80:	e006      	b.n	8003f90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f82:	4b16      	ldr	r3, [pc, #88]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	4914      	ldr	r1, [pc, #80]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d021      	beq.n	8003fe0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	490e      	ldr	r1, [pc, #56]	@ (8003fdc <HAL_GPIO_Init+0x2d0>)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]
 8003fa8:	e021      	b.n	8003fee <HAL_GPIO_Init+0x2e2>
 8003faa:	bf00      	nop
 8003fac:	10320000 	.word	0x10320000
 8003fb0:	10310000 	.word	0x10310000
 8003fb4:	10220000 	.word	0x10220000
 8003fb8:	10210000 	.word	0x10210000
 8003fbc:	10120000 	.word	0x10120000
 8003fc0:	10110000 	.word	0x10110000
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40010800 	.word	0x40010800
 8003fd0:	40010c00 	.word	0x40010c00
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	40011400 	.word	0x40011400
 8003fdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <HAL_GPIO_Init+0x304>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	4909      	ldr	r1, [pc, #36]	@ (8004010 <HAL_GPIO_Init+0x304>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f47f ae8e 	bne.w	8003d20 <HAL_GPIO_Init+0x14>
  }
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	372c      	adds	r7, #44	@ 0x2c
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	40010400 	.word	0x40010400

08004014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	887b      	ldrh	r3, [r7, #2]
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	e001      	b.n	8004036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	807b      	strh	r3, [r7, #2]
 800404e:	4613      	mov	r3, r2
 8004050:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004052:	787b      	ldrb	r3, [r7, #1]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004058:	887a      	ldrh	r2, [r7, #2]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800405e:	e003      	b.n	8004068 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004060:	887b      	ldrh	r3, [r7, #2]
 8004062:	041a      	lsls	r2, r3, #16
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	611a      	str	r2, [r3, #16]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
	...

08004074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800407e:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800408a:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd fe5c 	bl	8001d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40010400 	.word	0x40010400

080040a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e272      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8087 	beq.w	80041d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040c4:	4b92      	ldr	r3, [pc, #584]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d00c      	beq.n	80040ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d112      	bne.n	8004102 <HAL_RCC_OscConfig+0x5e>
 80040dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e8:	d10b      	bne.n	8004102 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ea:	4b89      	ldr	r3, [pc, #548]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d06c      	beq.n	80041d0 <HAL_RCC_OscConfig+0x12c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d168      	bne.n	80041d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e24c      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x76>
 800410c:	4b80      	ldr	r3, [pc, #512]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a7f      	ldr	r2, [pc, #508]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e02e      	b.n	8004178 <HAL_RCC_OscConfig+0xd4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x98>
 8004122:	4b7b      	ldr	r3, [pc, #492]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a7a      	ldr	r2, [pc, #488]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b78      	ldr	r3, [pc, #480]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a77      	ldr	r2, [pc, #476]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e01d      	b.n	8004178 <HAL_RCC_OscConfig+0xd4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0xbc>
 8004146:	4b72      	ldr	r3, [pc, #456]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a71      	ldr	r2, [pc, #452]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 800414c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b6f      	ldr	r3, [pc, #444]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a6e      	ldr	r2, [pc, #440]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0xd4>
 8004160:	4b6b      	ldr	r3, [pc, #428]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a6a      	ldr	r2, [pc, #424]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	4b68      	ldr	r3, [pc, #416]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a67      	ldr	r2, [pc, #412]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004176:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe fa1a 	bl	80025b8 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fe fa16 	bl	80025b8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	@ 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e200      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b5d      	ldr	r3, [pc, #372]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0xe4>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fe fa06 	bl	80025b8 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b0:	f7fe fa02 	bl	80025b8 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	@ 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1ec      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	4b53      	ldr	r3, [pc, #332]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x10c>
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d063      	beq.n	80042a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041de:	4b4c      	ldr	r3, [pc, #304]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041ea:	4b49      	ldr	r3, [pc, #292]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x18c>
 80041f6:	4b46      	ldr	r3, [pc, #280]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	4b43      	ldr	r3, [pc, #268]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x176>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1c0      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421a:	4b3d      	ldr	r3, [pc, #244]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4939      	ldr	r1, [pc, #228]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	e03a      	b.n	80042a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004238:	4b36      	ldr	r3, [pc, #216]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fe f9bb 	bl	80025b8 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004246:	f7fe f9b7 	bl	80025b8 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1a1      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	4b2d      	ldr	r3, [pc, #180]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b2a      	ldr	r3, [pc, #168]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4927      	ldr	r1, [pc, #156]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b26      	ldr	r3, [pc, #152]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe f99a 	bl	80025b8 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004288:	f7fe f996 	bl	80025b8 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e180      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	4b1d      	ldr	r3, [pc, #116]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03a      	beq.n	8004328 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d019      	beq.n	80042ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	4b17      	ldr	r3, [pc, #92]	@ (8004318 <HAL_RCC_OscConfig+0x274>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c0:	f7fe f97a 	bl	80025b8 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fe f976 	bl	80025b8 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e160      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042e6:	2001      	movs	r0, #1
 80042e8:	f000 faba 	bl	8004860 <RCC_Delay>
 80042ec:	e01c      	b.n	8004328 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004318 <HAL_RCC_OscConfig+0x274>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f4:	f7fe f960 	bl	80025b8 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fa:	e00f      	b.n	800431c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fc:	f7fe f95c 	bl	80025b8 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d908      	bls.n	800431c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e146      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	42420000 	.word	0x42420000
 8004318:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b92      	ldr	r3, [pc, #584]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e9      	bne.n	80042fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a6 	beq.w	8004482 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b8b      	ldr	r3, [pc, #556]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	4b88      	ldr	r3, [pc, #544]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4a87      	ldr	r2, [pc, #540]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004350:	61d3      	str	r3, [r2, #28]
 8004352:	4b85      	ldr	r3, [pc, #532]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b82      	ldr	r3, [pc, #520]	@ (800456c <HAL_RCC_OscConfig+0x4c8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d118      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436e:	4b7f      	ldr	r3, [pc, #508]	@ (800456c <HAL_RCC_OscConfig+0x4c8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7e      	ldr	r2, [pc, #504]	@ (800456c <HAL_RCC_OscConfig+0x4c8>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437a:	f7fe f91d 	bl	80025b8 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004382:	f7fe f919 	bl	80025b8 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b64      	cmp	r3, #100	@ 0x64
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e103      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	4b75      	ldr	r3, [pc, #468]	@ (800456c <HAL_RCC_OscConfig+0x4c8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x312>
 80043a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6213      	str	r3, [r2, #32]
 80043b4:	e02d      	b.n	8004412 <HAL_RCC_OscConfig+0x36e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x334>
 80043be:	4b6a      	ldr	r3, [pc, #424]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4a69      	ldr	r2, [pc, #420]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	6213      	str	r3, [r2, #32]
 80043ca:	4b67      	ldr	r3, [pc, #412]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4a66      	ldr	r2, [pc, #408]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	6213      	str	r3, [r2, #32]
 80043d6:	e01c      	b.n	8004412 <HAL_RCC_OscConfig+0x36e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d10c      	bne.n	80043fa <HAL_RCC_OscConfig+0x356>
 80043e0:	4b61      	ldr	r3, [pc, #388]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4a60      	ldr	r2, [pc, #384]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	6213      	str	r3, [r2, #32]
 80043ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6213      	str	r3, [r2, #32]
 80043f8:	e00b      	b.n	8004412 <HAL_RCC_OscConfig+0x36e>
 80043fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a5a      	ldr	r2, [pc, #360]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6213      	str	r3, [r2, #32]
 8004406:	4b58      	ldr	r3, [pc, #352]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4a57      	ldr	r2, [pc, #348]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d015      	beq.n	8004446 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441a:	f7fe f8cd 	bl	80025b8 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fe f8c9 	bl	80025b8 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0b1      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	4b4b      	ldr	r3, [pc, #300]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ee      	beq.n	8004422 <HAL_RCC_OscConfig+0x37e>
 8004444:	e014      	b.n	8004470 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004446:	f7fe f8b7 	bl	80025b8 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fe f8b3 	bl	80025b8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e09b      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004464:	4b40      	ldr	r3, [pc, #256]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004476:	4b3c      	ldr	r3, [pc, #240]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4a3b      	ldr	r2, [pc, #236]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800447c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004480:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8087 	beq.w	800459a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800448c:	4b36      	ldr	r3, [pc, #216]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b08      	cmp	r3, #8
 8004496:	d061      	beq.n	800455c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d146      	bne.n	800452e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a0:	4b33      	ldr	r3, [pc, #204]	@ (8004570 <HAL_RCC_OscConfig+0x4cc>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fe f887 	bl	80025b8 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ae:	f7fe f883 	bl	80025b8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e06d      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c0:	4b29      	ldr	r3, [pc, #164]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d4:	d108      	bne.n	80044e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044d6:	4b24      	ldr	r3, [pc, #144]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4921      	ldr	r1, [pc, #132]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a19      	ldr	r1, [r3, #32]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	430b      	orrs	r3, r1
 80044fa:	491b      	ldr	r1, [pc, #108]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004500:	4b1b      	ldr	r3, [pc, #108]	@ (8004570 <HAL_RCC_OscConfig+0x4cc>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fe f857 	bl	80025b8 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fe f853 	bl	80025b8 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e03d      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004520:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x46a>
 800452c:	e035      	b.n	800459a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452e:	4b10      	ldr	r3, [pc, #64]	@ (8004570 <HAL_RCC_OscConfig+0x4cc>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fe f840 	bl	80025b8 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453c:	f7fe f83c 	bl	80025b8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e026      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800454e:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x498>
 800455a:	e01e      	b.n	800459a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d107      	bne.n	8004574 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e019      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
 8004568:	40021000 	.word	0x40021000
 800456c:	40007000 	.word	0x40007000
 8004570:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004574:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <HAL_RCC_OscConfig+0x500>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	429a      	cmp	r2, r3
 8004586:	d106      	bne.n	8004596 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d001      	beq.n	800459a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0d0      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d910      	bls.n	80045ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b67      	ldr	r3, [pc, #412]	@ (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 0207 	bic.w	r2, r3, #7
 80045d2:	4965      	ldr	r1, [pc, #404]	@ (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b63      	ldr	r3, [pc, #396]	@ (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0b8      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d020      	beq.n	800463a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004604:	4b59      	ldr	r3, [pc, #356]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a58      	ldr	r2, [pc, #352]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800460e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800461c:	4b53      	ldr	r3, [pc, #332]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a52      	ldr	r2, [pc, #328]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004626:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004628:	4b50      	ldr	r3, [pc, #320]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	494d      	ldr	r1, [pc, #308]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d040      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464e:	4b47      	ldr	r3, [pc, #284]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d115      	bne.n	8004686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e07f      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d107      	bne.n	8004676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004666:	4b41      	ldr	r3, [pc, #260]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e073      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004676:	4b3d      	ldr	r3, [pc, #244]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e06b      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004686:	4b39      	ldr	r3, [pc, #228]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f023 0203 	bic.w	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4936      	ldr	r1, [pc, #216]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004698:	f7fd ff8e 	bl	80025b8 <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a0:	f7fd ff8a 	bl	80025b8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e053      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	4b2d      	ldr	r3, [pc, #180]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 020c 	and.w	r2, r3, #12
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d1eb      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c8:	4b27      	ldr	r3, [pc, #156]	@ (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d210      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b24      	ldr	r3, [pc, #144]	@ (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 0207 	bic.w	r2, r3, #7
 80046de:	4922      	ldr	r1, [pc, #136]	@ (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b20      	ldr	r3, [pc, #128]	@ (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e032      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004704:	4b19      	ldr	r3, [pc, #100]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4916      	ldr	r1, [pc, #88]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004722:	4b12      	ldr	r3, [pc, #72]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	490e      	ldr	r1, [pc, #56]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004736:	f000 f821 	bl	800477c <HAL_RCC_GetSysClockFreq>
 800473a:	4602      	mov	r2, r0
 800473c:	4b0b      	ldr	r3, [pc, #44]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	490a      	ldr	r1, [pc, #40]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004748:	5ccb      	ldrb	r3, [r1, r3]
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	4a09      	ldr	r2, [pc, #36]	@ (8004774 <HAL_RCC_ClockConfig+0x1cc>)
 8004750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004752:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <HAL_RCC_ClockConfig+0x1d0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fd feec 	bl	8002534 <HAL_InitTick>

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40022000 	.word	0x40022000
 800476c:	40021000 	.word	0x40021000
 8004770:	080066dc 	.word	0x080066dc
 8004774:	2000000c 	.word	0x2000000c
 8004778:	20000010 	.word	0x20000010

0800477c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	2300      	movs	r3, #0
 8004790:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004796:	4b1e      	ldr	r3, [pc, #120]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x94>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d002      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x30>
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d003      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x36>
 80047aa:	e027      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047ac:	4b19      	ldr	r3, [pc, #100]	@ (8004814 <HAL_RCC_GetSysClockFreq+0x98>)
 80047ae:	613b      	str	r3, [r7, #16]
      break;
 80047b0:	e027      	b.n	8004802 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	0c9b      	lsrs	r3, r3, #18
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	4a17      	ldr	r2, [pc, #92]	@ (8004818 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047bc:	5cd3      	ldrb	r3, [r2, r3]
 80047be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047ca:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x94>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	0c5b      	lsrs	r3, r3, #17
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	4a11      	ldr	r2, [pc, #68]	@ (800481c <HAL_RCC_GetSysClockFreq+0xa0>)
 80047d6:	5cd3      	ldrb	r3, [r2, r3]
 80047d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004814 <HAL_RCC_GetSysClockFreq+0x98>)
 80047de:	fb03 f202 	mul.w	r2, r3, r2
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e004      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004820 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047f0:	fb02 f303 	mul.w	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	613b      	str	r3, [r7, #16]
      break;
 80047fa:	e002      	b.n	8004802 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047fc:	4b05      	ldr	r3, [pc, #20]	@ (8004814 <HAL_RCC_GetSysClockFreq+0x98>)
 80047fe:	613b      	str	r3, [r7, #16]
      break;
 8004800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004802:	693b      	ldr	r3, [r7, #16]
}
 8004804:	4618      	mov	r0, r3
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
 8004814:	007a1200 	.word	0x007a1200
 8004818:	080066f4 	.word	0x080066f4
 800481c:	08006704 	.word	0x08006704
 8004820:	003d0900 	.word	0x003d0900

08004824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004828:	4b02      	ldr	r3, [pc, #8]	@ (8004834 <HAL_RCC_GetHCLKFreq+0x10>)
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	2000000c 	.word	0x2000000c

08004838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800483c:	f7ff fff2 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b05      	ldr	r3, [pc, #20]	@ (8004858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	0adb      	lsrs	r3, r3, #11
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4903      	ldr	r1, [pc, #12]	@ (800485c <HAL_RCC_GetPCLK2Freq+0x24>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40021000 	.word	0x40021000
 800485c:	080066ec 	.word	0x080066ec

08004860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004868:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <RCC_Delay+0x34>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0a      	ldr	r2, [pc, #40]	@ (8004898 <RCC_Delay+0x38>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	0a5b      	lsrs	r3, r3, #9
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800487c:	bf00      	nop
  }
  while (Delay --);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1e5a      	subs	r2, r3, #1
 8004882:	60fa      	str	r2, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f9      	bne.n	800487c <RCC_Delay+0x1c>
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr
 8004894:	2000000c 	.word	0x2000000c
 8004898:	10624dd3 	.word	0x10624dd3

0800489c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d07d      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80048b8:	2300      	movs	r3, #0
 80048ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048bc:	4b4f      	ldr	r3, [pc, #316]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c8:	4b4c      	ldr	r3, [pc, #304]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	4a4b      	ldr	r2, [pc, #300]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048d2:	61d3      	str	r3, [r2, #28]
 80048d4:	4b49      	ldr	r3, [pc, #292]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	4b46      	ldr	r3, [pc, #280]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d118      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048f0:	4b43      	ldr	r3, [pc, #268]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a42      	ldr	r2, [pc, #264]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fc:	f7fd fe5c 	bl	80025b8 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	e008      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004904:	f7fd fe58 	bl	80025b8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	@ 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e06d      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004916:	4b3a      	ldr	r3, [pc, #232]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004922:	4b36      	ldr	r3, [pc, #216]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d02e      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	429a      	cmp	r2, r3
 800493e:	d027      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004940:	4b2e      	ldr	r3, [pc, #184]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004948:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800494a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800494c:	2201      	movs	r2, #1
 800494e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004950:	4b2c      	ldr	r3, [pc, #176]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004956:	4a29      	ldr	r2, [pc, #164]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d014      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fd fe27 	bl	80025b8 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496c:	e00a      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fd fe23 	bl	80025b8 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e036      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	4b1d      	ldr	r3, [pc, #116]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ee      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004990:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	4917      	ldr	r1, [pc, #92]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d105      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a8:	4b14      	ldr	r3, [pc, #80]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	4a13      	ldr	r2, [pc, #76]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049c0:	4b0e      	ldr	r3, [pc, #56]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	490b      	ldr	r1, [pc, #44]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049de:	4b07      	ldr	r3, [pc, #28]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	4904      	ldr	r1, [pc, #16]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40007000 	.word	0x40007000
 8004a04:	42420440 	.word	0x42420440

08004a08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d00a      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	f200 808a 	bhi.w	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d045      	beq.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d075      	beq.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004a3e:	e082      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004a40:	4b46      	ldr	r3, [pc, #280]	@ (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004a46:	4b45      	ldr	r3, [pc, #276]	@ (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d07b      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	0c9b      	lsrs	r3, r3, #18
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	4a41      	ldr	r2, [pc, #260]	@ (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004a5c:	5cd3      	ldrb	r3, [r2, r3]
 8004a5e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d015      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	0c5b      	lsrs	r3, r3, #17
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	4a3b      	ldr	r2, [pc, #236]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004a76:	5cd3      	ldrb	r3, [r2, r3]
 8004a78:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00d      	beq.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004a84:	4a38      	ldr	r2, [pc, #224]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	e004      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4a34      	ldr	r2, [pc, #208]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aac:	d102      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	61bb      	str	r3, [r7, #24]
      break;
 8004ab2:	e04a      	b.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	61bb      	str	r3, [r7, #24]
      break;
 8004ac2:	e042      	b.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004ac4:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad4:	d108      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004ae0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	e01f      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af2:	d109      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004af4:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004b00:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e00f      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b12:	d11c      	bne.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b14:	4b11      	ldr	r3, [pc, #68]	@ (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004b20:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004b24:	61bb      	str	r3, [r7, #24]
      break;
 8004b26:	e012      	b.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b28:	e011      	b.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004b2a:	f7ff fe85 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	0b9b      	lsrs	r3, r3, #14
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	61bb      	str	r3, [r7, #24]
      break;
 8004b44:	e004      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b4e:	bf00      	nop
    }
  }
  return (frequency);
 8004b50:	69bb      	ldr	r3, [r7, #24]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	08006708 	.word	0x08006708
 8004b64:	08006718 	.word	0x08006718
 8004b68:	007a1200 	.word	0x007a1200
 8004b6c:	003d0900 	.word	0x003d0900
 8004b70:	aaaaaaab 	.word	0xaaaaaaab

08004b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e041      	b.n	8004c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fd fc12 	bl	80023c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f000 fc20 	bl	80053f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d001      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e03a      	b.n	8004ca2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a18      	ldr	r2, [pc, #96]	@ (8004cac <HAL_TIM_Base_Start_IT+0x98>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x58>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c56:	d009      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x58>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a14      	ldr	r2, [pc, #80]	@ (8004cb0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x58>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a13      	ldr	r2, [pc, #76]	@ (8004cb4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d111      	bne.n	8004c90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b06      	cmp	r3, #6
 8004c7c:	d010      	beq.n	8004ca0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	e007      	b.n	8004ca0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800

08004cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e041      	b.n	8004d4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f839 	bl	8004d56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f000 fb7e 	bl	80053f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_TIM_PWM_Start+0x24>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e022      	b.n	8004dd2 <HAL_TIM_PWM_Start+0x6a>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d109      	bne.n	8004da6 <HAL_TIM_PWM_Start+0x3e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	bf14      	ite	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	2300      	moveq	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	e015      	b.n	8004dd2 <HAL_TIM_PWM_Start+0x6a>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d109      	bne.n	8004dc0 <HAL_TIM_PWM_Start+0x58>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e008      	b.n	8004dd2 <HAL_TIM_PWM_Start+0x6a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	bf14      	ite	ne
 8004dcc:	2301      	movne	r3, #1
 8004dce:	2300      	moveq	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e05e      	b.n	8004e98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <HAL_TIM_PWM_Start+0x82>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de8:	e013      	b.n	8004e12 <HAL_TIM_PWM_Start+0xaa>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_PWM_Start+0x92>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df8:	e00b      	b.n	8004e12 <HAL_TIM_PWM_Start+0xaa>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_PWM_Start+0xa2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e08:	e003      	b.n	8004e12 <HAL_TIM_PWM_Start+0xaa>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2201      	movs	r2, #1
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fd78 	bl	8005910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea0 <HAL_TIM_PWM_Start+0x138>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d107      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ea0 <HAL_TIM_PWM_Start+0x138>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00e      	beq.n	8004e62 <HAL_TIM_PWM_Start+0xfa>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4c:	d009      	beq.n	8004e62 <HAL_TIM_PWM_Start+0xfa>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a14      	ldr	r2, [pc, #80]	@ (8004ea4 <HAL_TIM_PWM_Start+0x13c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d004      	beq.n	8004e62 <HAL_TIM_PWM_Start+0xfa>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a12      	ldr	r2, [pc, #72]	@ (8004ea8 <HAL_TIM_PWM_Start+0x140>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d111      	bne.n	8004e86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b06      	cmp	r3, #6
 8004e72:	d010      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e84:	e007      	b.n	8004e96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800

08004eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d020      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01b      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0202 	mvn.w	r2, #2
 8004ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa63 	bl	80053c2 <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fa56 	bl	80053b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fa65 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d020      	beq.n	8004f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01b      	beq.n	8004f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0204 	mvn.w	r2, #4
 8004f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fa3d 	bl	80053c2 <HAL_TIM_IC_CaptureCallback>
 8004f48:	e005      	b.n	8004f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa30 	bl	80053b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fa3f 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d020      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01b      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0208 	mvn.w	r2, #8
 8004f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fa17 	bl	80053c2 <HAL_TIM_IC_CaptureCallback>
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa0a 	bl	80053b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fa19 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d020      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01b      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0210 	mvn.w	r2, #16
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9f1 	bl	80053c2 <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f9e4 	bl	80053b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f9f3 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0201 	mvn.w	r2, #1
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f9c3 	bl	800539e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fcf5 	bl	8005a26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f9c3 	bl	80053e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0220 	mvn.w	r2, #32
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fcc8 	bl	8005a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e0ae      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	f200 809f 	bhi.w	80051f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050ba:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	080051f9 	.word	0x080051f9
 80050c8:	080051f9 	.word	0x080051f9
 80050cc:	080051f9 	.word	0x080051f9
 80050d0:	08005135 	.word	0x08005135
 80050d4:	080051f9 	.word	0x080051f9
 80050d8:	080051f9 	.word	0x080051f9
 80050dc:	080051f9 	.word	0x080051f9
 80050e0:	08005177 	.word	0x08005177
 80050e4:	080051f9 	.word	0x080051f9
 80050e8:	080051f9 	.word	0x080051f9
 80050ec:	080051f9 	.word	0x080051f9
 80050f0:	080051b7 	.word	0x080051b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 f9ea 	bl	80054d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0208 	orr.w	r2, r2, #8
 800510e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0204 	bic.w	r2, r2, #4
 800511e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6999      	ldr	r1, [r3, #24]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	619a      	str	r2, [r3, #24]
      break;
 8005132:	e064      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fa30 	bl	80055a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800514e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800515e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6999      	ldr	r1, [r3, #24]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	021a      	lsls	r2, r3, #8
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	619a      	str	r2, [r3, #24]
      break;
 8005174:	e043      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fa79 	bl	8005674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0208 	orr.w	r2, r2, #8
 8005190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0204 	bic.w	r2, r2, #4
 80051a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69d9      	ldr	r1, [r3, #28]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	61da      	str	r2, [r3, #28]
      break;
 80051b4:	e023      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fac3 	bl	8005748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69d9      	ldr	r1, [r3, #28]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	021a      	lsls	r2, r3, #8
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	61da      	str	r2, [r3, #28]
      break;
 80051f6:	e002      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	75fb      	strb	r3, [r7, #23]
      break;
 80051fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005206:	7dfb      	ldrb	r3, [r7, #23]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIM_ConfigClockSource+0x1c>
 8005228:	2302      	movs	r3, #2
 800522a:	e0b4      	b.n	8005396 <HAL_TIM_ConfigClockSource+0x186>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800524a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005264:	d03e      	beq.n	80052e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800526a:	f200 8087 	bhi.w	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005272:	f000 8086 	beq.w	8005382 <HAL_TIM_ConfigClockSource+0x172>
 8005276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527a:	d87f      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b70      	cmp	r3, #112	@ 0x70
 800527e:	d01a      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005280:	2b70      	cmp	r3, #112	@ 0x70
 8005282:	d87b      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b60      	cmp	r3, #96	@ 0x60
 8005286:	d050      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x11a>
 8005288:	2b60      	cmp	r3, #96	@ 0x60
 800528a:	d877      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b50      	cmp	r3, #80	@ 0x50
 800528e:	d03c      	beq.n	800530a <HAL_TIM_ConfigClockSource+0xfa>
 8005290:	2b50      	cmp	r3, #80	@ 0x50
 8005292:	d873      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b40      	cmp	r3, #64	@ 0x40
 8005296:	d058      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x13a>
 8005298:	2b40      	cmp	r3, #64	@ 0x40
 800529a:	d86f      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	2b30      	cmp	r3, #48	@ 0x30
 800529e:	d064      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	2b30      	cmp	r3, #48	@ 0x30
 80052a2:	d86b      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d060      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d867      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d05c      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d05a      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	e062      	b.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052c6:	f000 fb04 	bl	80058d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	609a      	str	r2, [r3, #8]
      break;
 80052e2:	e04f      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052f4:	f000 faed 	bl	80058d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005306:	609a      	str	r2, [r3, #8]
      break;
 8005308:	e03c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	461a      	mov	r2, r3
 8005318:	f000 fa64 	bl	80057e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2150      	movs	r1, #80	@ 0x50
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fabb 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005328:	e02c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005336:	461a      	mov	r2, r3
 8005338:	f000 fa82 	bl	8005840 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2160      	movs	r1, #96	@ 0x60
 8005342:	4618      	mov	r0, r3
 8005344:	f000 faab 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005348:	e01c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	461a      	mov	r2, r3
 8005358:	f000 fa44 	bl	80057e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2140      	movs	r1, #64	@ 0x40
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fa9b 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005368:	e00c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f000 fa92 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 800537a:	e003      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      break;
 8005380:	e000      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a2f      	ldr	r2, [pc, #188]	@ (80054c8 <TIM_Base_SetConfig+0xd0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00b      	beq.n	8005428 <TIM_Base_SetConfig+0x30>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005416:	d007      	beq.n	8005428 <TIM_Base_SetConfig+0x30>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a2c      	ldr	r2, [pc, #176]	@ (80054cc <TIM_Base_SetConfig+0xd4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d003      	beq.n	8005428 <TIM_Base_SetConfig+0x30>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a2b      	ldr	r2, [pc, #172]	@ (80054d0 <TIM_Base_SetConfig+0xd8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d108      	bne.n	800543a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800542e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a22      	ldr	r2, [pc, #136]	@ (80054c8 <TIM_Base_SetConfig+0xd0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00b      	beq.n	800545a <TIM_Base_SetConfig+0x62>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005448:	d007      	beq.n	800545a <TIM_Base_SetConfig+0x62>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1f      	ldr	r2, [pc, #124]	@ (80054cc <TIM_Base_SetConfig+0xd4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_Base_SetConfig+0x62>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1e      	ldr	r2, [pc, #120]	@ (80054d0 <TIM_Base_SetConfig+0xd8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d108      	bne.n	800546c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a0d      	ldr	r2, [pc, #52]	@ (80054c8 <TIM_Base_SetConfig+0xd0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d103      	bne.n	80054a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f023 0201 	bic.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	611a      	str	r2, [r3, #16]
  }
}
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800

080054d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f023 0201 	bic.w	r2, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 0302 	bic.w	r3, r3, #2
 800551c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <TIM_OC1_SetConfig+0xc8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10c      	bne.n	800554a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f023 0308 	bic.w	r3, r3, #8
 8005536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f023 0304 	bic.w	r3, r3, #4
 8005548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a13      	ldr	r2, [pc, #76]	@ (800559c <TIM_OC1_SetConfig+0xc8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d111      	bne.n	8005576 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	621a      	str	r2, [r3, #32]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40012c00 	.word	0x40012c00

080055a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	f023 0210 	bic.w	r2, r3, #16
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0320 	bic.w	r3, r3, #32
 80055ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005670 <TIM_OC2_SetConfig+0xd0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10d      	bne.n	800561c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800561a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a14      	ldr	r2, [pc, #80]	@ (8005670 <TIM_OC2_SetConfig+0xd0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d113      	bne.n	800564c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800562a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr
 8005670:	40012c00 	.word	0x40012c00

08005674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005744 <TIM_OC3_SetConfig+0xd0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10d      	bne.n	80056ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a14      	ldr	r2, [pc, #80]	@ (8005744 <TIM_OC3_SetConfig+0xd0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d113      	bne.n	800571e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	621a      	str	r2, [r3, #32]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40012c00 	.word	0x40012c00

08005748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	031b      	lsls	r3, r3, #12
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a0f      	ldr	r2, [pc, #60]	@ (80057e0 <TIM_OC4_SetConfig+0x98>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d109      	bne.n	80057bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	019b      	lsls	r3, r3, #6
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00

080057e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0201 	bic.w	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800580e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f023 030a 	bic.w	r3, r3, #10
 8005820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	621a      	str	r2, [r3, #32]
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f023 0210 	bic.w	r2, r3, #16
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800586a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	031b      	lsls	r3, r3, #12
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800587c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	621a      	str	r2, [r3, #32]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f043 0307 	orr.w	r3, r3, #7
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr

080058d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b087      	sub	sp, #28
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	021a      	lsls	r2, r3, #8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	609a      	str	r2, [r3, #8]
}
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	2201      	movs	r2, #1
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1a      	ldr	r2, [r3, #32]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	43db      	mvns	r3, r3
 8005932:	401a      	ands	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	431a      	orrs	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	621a      	str	r2, [r3, #32]
}
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800596c:	2302      	movs	r3, #2
 800596e:	e046      	b.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a16      	ldr	r2, [pc, #88]	@ (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00e      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059bc:	d009      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a12      	ldr	r2, [pc, #72]	@ (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a10      	ldr	r2, [pc, #64]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d10c      	bne.n	80059ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800

08005a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr

08005a26 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <SEND_4_BIT>:
 */

#include "LCD_16x2_PARALLEL.h"

void SEND_4_BIT(char data, uint8_t rsPin)//rs=0 yra instruction register o HIGH(1) data register
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	460a      	mov	r2, r1
 8005a42:	71fb      	strb	r3, [r7, #7]
 8005a44:	4613      	mov	r3, r2
 8005a46:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rsPin);
 8005a48:	79bb      	ldrb	r3, [r7, #6]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a50:	4823      	ldr	r0, [pc, #140]	@ (8005ae0 <SEND_4_BIT+0xa8>)
 8005a52:	f7fe faf6 	bl	8004042 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8005a56:	2200      	movs	r2, #0
 8005a58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a5c:	4820      	ldr	r0, [pc, #128]	@ (8005ae0 <SEND_4_BIT+0xa8>)
 8005a5e:	f7fe faf0 	bl	8004042 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data>>0)&0x1);
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2120      	movs	r1, #32
 8005a6e:	481d      	ldr	r0, [pc, #116]	@ (8005ae4 <SEND_4_BIT+0xac>)
 8005a70:	f7fe fae7 	bl	8004042 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data>>1)&0x1);
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	2140      	movs	r1, #64	@ 0x40
 8005a84:	4817      	ldr	r0, [pc, #92]	@ (8005ae4 <SEND_4_BIT+0xac>)
 8005a86:	f7fe fadc 	bl	8004042 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data>>2)&0x1);
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	2180      	movs	r1, #128	@ 0x80
 8005a9a:	4812      	ldr	r0, [pc, #72]	@ (8005ae4 <SEND_4_BIT+0xac>)
 8005a9c:	f7fe fad1 	bl	8004042 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data>>3)&0x1);
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	08db      	lsrs	r3, r3, #3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ab2:	480c      	ldr	r0, [pc, #48]	@ (8005ae4 <SEND_4_BIT+0xac>)
 8005ab4:	f7fe fac5 	bl	8004042 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005abe:	4808      	ldr	r0, [pc, #32]	@ (8005ae0 <SEND_4_BIT+0xa8>)
 8005ac0:	f7fe fabf 	bl	8004042 <HAL_GPIO_WritePin>
	DELAY_US(500); // Allow LCD to latch
 8005ac4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005ac8:	f7fb feba 	bl	8001840 <DELAY_US>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8005acc:	2200      	movs	r2, #0
 8005ace:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ad2:	4803      	ldr	r0, [pc, #12]	@ (8005ae0 <SEND_4_BIT+0xa8>)
 8005ad4:	f7fe fab5 	bl	8004042 <HAL_GPIO_WritePin>

}
 8005ad8:	bf00      	nop
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40010800 	.word	0x40010800
 8005ae4:	40010c00 	.word	0x40010c00

08005ae8 <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(char komanda)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	4b13      	ldr	r3, [pc, #76]	@ (8005b48 <LCD_SEND_COMMAND+0x60>)
 8005afa:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8005afc:	4b12      	ldr	r3, [pc, #72]	@ (8005b48 <LCD_SEND_COMMAND+0x60>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff ff98 	bl	8005a38 <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <LCD_SEND_COMMAND+0x60>)
 8005b12:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8005b14:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <LCD_SEND_COMMAND+0x60>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff ff8c 	bl	8005a38 <SEND_4_BIT>
	if (komanda == 0x01 || komanda == 0x02) {
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d002      	beq.n	8005b2c <LCD_SEND_COMMAND+0x44>
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d103      	bne.n	8005b34 <LCD_SEND_COMMAND+0x4c>
		HAL_Delay(2); // These are extra slow
 8005b2c:	2002      	movs	r0, #2
 8005b2e:	f7fc fd4d 	bl	80025cc <HAL_Delay>
 8005b32:	e004      	b.n	8005b3e <LCD_SEND_COMMAND+0x56>
	} else {
		DELAY_US(300); // All other commands
 8005b34:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005b38:	f7fb fe82 	bl	8001840 <DELAY_US>
	}
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200002f8 	.word	0x200002f8

08005b4c <LCD_SEND_DATA>:
void LCD_SEND_DATA(char komanda)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	091b      	lsrs	r3, r3, #4
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <LCD_SEND_DATA+0x40>)
 8005b5e:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8005b60:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <LCD_SEND_DATA+0x40>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2101      	movs	r1, #1
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff ff66 	bl	8005a38 <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	4b05      	ldr	r3, [pc, #20]	@ (8005b8c <LCD_SEND_DATA+0x40>)
 8005b76:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8005b78:	4b04      	ldr	r3, [pc, #16]	@ (8005b8c <LCD_SEND_DATA+0x40>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff ff5a 	bl	8005a38 <SEND_4_BIT>
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	200002f9 	.word	0x200002f9

08005b90 <LCD_CLEAR>:

void LCD_CLEAR()
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_DISPLAY_CLEAR);
 8005b94:	2001      	movs	r0, #1
 8005b96:	f7ff ffa7 	bl	8005ae8 <LCD_SEND_COMMAND>
}
 8005b9a:	bf00      	nop
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <LCD_Init>:
	}
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
}

void LCD_Init()
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin,GPIO_PIN_RESET);
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005baa:	4827      	ldr	r0, [pc, #156]	@ (8005c48 <LCD_Init+0xa8>)
 8005bac:	f7fe fa49 	bl	8004042 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin,GPIO_PIN_RESET);
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005bb6:	4824      	ldr	r0, [pc, #144]	@ (8005c48 <LCD_Init+0xa8>)
 8005bb8:	f7fe fa43 	bl	8004042 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2120      	movs	r1, #32
 8005bc0:	4822      	ldr	r0, [pc, #136]	@ (8005c4c <LCD_Init+0xac>)
 8005bc2:	f7fe fa3e 	bl	8004042 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2140      	movs	r1, #64	@ 0x40
 8005bca:	4820      	ldr	r0, [pc, #128]	@ (8005c4c <LCD_Init+0xac>)
 8005bcc:	f7fe fa39 	bl	8004042 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2180      	movs	r1, #128	@ 0x80
 8005bd4:	481d      	ldr	r0, [pc, #116]	@ (8005c4c <LCD_Init+0xac>)
 8005bd6:	f7fe fa34 	bl	8004042 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005be0:	481a      	ldr	r0, [pc, #104]	@ (8005c4c <LCD_Init+0xac>)
 8005be2:	f7fe fa2e 	bl	8004042 <HAL_GPIO_WritePin>

    HAL_Delay(200); // Wait >40ms after power-on
 8005be6:	20c8      	movs	r0, #200	@ 0xc8
 8005be8:	f7fc fcf0 	bl	80025cc <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 8005bec:	2100      	movs	r1, #0
 8005bee:	2003      	movs	r0, #3
 8005bf0:	f7ff ff22 	bl	8005a38 <SEND_4_BIT>
    HAL_Delay(2);
 8005bf4:	2002      	movs	r0, #2
 8005bf6:	f7fc fce9 	bl	80025cc <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	2003      	movs	r0, #3
 8005bfe:	f7ff ff1b 	bl	8005a38 <SEND_4_BIT>
    HAL_Delay(2);
 8005c02:	2002      	movs	r0, #2
 8005c04:	f7fc fce2 	bl	80025cc <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 8005c08:	2100      	movs	r1, #0
 8005c0a:	2003      	movs	r0, #3
 8005c0c:	f7ff ff14 	bl	8005a38 <SEND_4_BIT>
    HAL_Delay(2);
 8005c10:	2002      	movs	r0, #2
 8005c12:	f7fc fcdb 	bl	80025cc <HAL_Delay>
    SEND_4_BIT(0x2, LCD_RS_INSTRUCTION);
 8005c16:	2100      	movs	r1, #0
 8005c18:	2002      	movs	r0, #2
 8005c1a:	f7ff ff0d 	bl	8005a38 <SEND_4_BIT>
    HAL_Delay(10);
 8005c1e:	200a      	movs	r0, #10
 8005c20:	f7fc fcd4 	bl	80025cc <HAL_Delay>

    //4 bit interface started
    LCD_SEND_COMMAND(0x28);  // Function Set: 4-bit, 2 lines, 5x8 dots
 8005c24:	2028      	movs	r0, #40	@ 0x28
 8005c26:	f7ff ff5f 	bl	8005ae8 <LCD_SEND_COMMAND>
	// From now on: full commands (2 x 4-bit transfers)
    LCD_SEND_COMMAND(0x08);  // Display OFF (D=0, C=0, B=0)
 8005c2a:	2008      	movs	r0, #8
 8005c2c:	f7ff ff5c 	bl	8005ae8 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x01);  // Clear Display
 8005c30:	2001      	movs	r0, #1
 8005c32:	f7ff ff59 	bl	8005ae8 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x06);  // Entry Mode Set: Increment, No shift
 8005c36:	2006      	movs	r0, #6
 8005c38:	f7ff ff56 	bl	8005ae8 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x0C);  // Display ON, Cursor OFF, Blink OFF
 8005c3c:	200c      	movs	r0, #12
 8005c3e:	f7ff ff53 	bl	8005ae8 <LCD_SEND_COMMAND>
}
 8005c42:	bf00      	nop
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40010800 	.word	0x40010800
 8005c4c:	40010c00 	.word	0x40010c00

08005c50 <LCD_SEND_STR>:

void LCD_SEND_STR(const char data[], uint8_t place, uint8_t level)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	70bb      	strb	r3, [r7, #2]
	/*
	 * @brief Offset from left side and level 0 - top and 1 - bottom
	 */
	if(level==1)
 8005c60:	78bb      	ldrb	r3, [r7, #2]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d106      	bne.n	8005c74 <LCD_SEND_STR+0x24>
	{
		LCD_SEND_COMMAND(0xC0+place);
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	3b40      	subs	r3, #64	@ 0x40
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ff3b 	bl	8005ae8 <LCD_SEND_COMMAND>
 8005c72:	e005      	b.n	8005c80 <LCD_SEND_STR+0x30>
	}
	else LCD_SEND_COMMAND(0x80+place);
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	3b80      	subs	r3, #128	@ 0x80
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff ff34 	bl	8005ae8 <LCD_SEND_COMMAND>
	//kai N=high 2 line tai 1 line 0-4F o 2 0-27h   40-67h
	// KAI level 0 tai pirmas kai 1 tai antras levelis
	static uint8_t x;
	x = 0;
 8005c80:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc0 <LCD_SEND_STR+0x70>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8005c86:	e00e      	b.n	8005ca6 <LCD_SEND_STR+0x56>
	{
		LCD_SEND_DATA(data[x]);
 8005c88:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc0 <LCD_SEND_STR+0x70>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff ff59 	bl	8005b4c <LCD_SEND_DATA>
		x++;
 8005c9a:	4b09      	ldr	r3, [pc, #36]	@ (8005cc0 <LCD_SEND_STR+0x70>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	4b07      	ldr	r3, [pc, #28]	@ (8005cc0 <LCD_SEND_STR+0x70>)
 8005ca4:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8005ca6:	4b06      	ldr	r3, [pc, #24]	@ (8005cc0 <LCD_SEND_STR+0x70>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e8      	bne.n	8005c88 <LCD_SEND_STR+0x38>
	}
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	200002fa 	.word	0x200002fa

08005cc4 <siprintf>:
 8005cc4:	b40e      	push	{r1, r2, r3}
 8005cc6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	2400      	movs	r4, #0
 8005cce:	b09d      	sub	sp, #116	@ 0x74
 8005cd0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005cd2:	9002      	str	r0, [sp, #8]
 8005cd4:	9006      	str	r0, [sp, #24]
 8005cd6:	9107      	str	r1, [sp, #28]
 8005cd8:	9104      	str	r1, [sp, #16]
 8005cda:	4809      	ldr	r0, [pc, #36]	@ (8005d00 <siprintf+0x3c>)
 8005cdc:	4909      	ldr	r1, [pc, #36]	@ (8005d04 <siprintf+0x40>)
 8005cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce2:	9105      	str	r1, [sp, #20]
 8005ce4:	6800      	ldr	r0, [r0, #0]
 8005ce6:	a902      	add	r1, sp, #8
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005cec:	f000 f9ac 	bl	8006048 <_svfiprintf_r>
 8005cf0:	9b02      	ldr	r3, [sp, #8]
 8005cf2:	701c      	strb	r4, [r3, #0]
 8005cf4:	b01d      	add	sp, #116	@ 0x74
 8005cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cfa:	b003      	add	sp, #12
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000018 	.word	0x20000018
 8005d04:	ffff0208 	.word	0xffff0208

08005d08 <memmove>:
 8005d08:	4288      	cmp	r0, r1
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	eb01 0402 	add.w	r4, r1, r2
 8005d10:	d902      	bls.n	8005d18 <memmove+0x10>
 8005d12:	4284      	cmp	r4, r0
 8005d14:	4623      	mov	r3, r4
 8005d16:	d807      	bhi.n	8005d28 <memmove+0x20>
 8005d18:	1e43      	subs	r3, r0, #1
 8005d1a:	42a1      	cmp	r1, r4
 8005d1c:	d008      	beq.n	8005d30 <memmove+0x28>
 8005d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d26:	e7f8      	b.n	8005d1a <memmove+0x12>
 8005d28:	4601      	mov	r1, r0
 8005d2a:	4402      	add	r2, r0
 8005d2c:	428a      	cmp	r2, r1
 8005d2e:	d100      	bne.n	8005d32 <memmove+0x2a>
 8005d30:	bd10      	pop	{r4, pc}
 8005d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d3a:	e7f7      	b.n	8005d2c <memmove+0x24>

08005d3c <memset>:
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4402      	add	r2, r0
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d100      	bne.n	8005d46 <memset+0xa>
 8005d44:	4770      	bx	lr
 8005d46:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4a:	e7f9      	b.n	8005d40 <memset+0x4>

08005d4c <__errno>:
 8005d4c:	4b01      	ldr	r3, [pc, #4]	@ (8005d54 <__errno+0x8>)
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20000018 	.word	0x20000018

08005d58 <__libc_init_array>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	2600      	movs	r6, #0
 8005d5c:	4d0c      	ldr	r5, [pc, #48]	@ (8005d90 <__libc_init_array+0x38>)
 8005d5e:	4c0d      	ldr	r4, [pc, #52]	@ (8005d94 <__libc_init_array+0x3c>)
 8005d60:	1b64      	subs	r4, r4, r5
 8005d62:	10a4      	asrs	r4, r4, #2
 8005d64:	42a6      	cmp	r6, r4
 8005d66:	d109      	bne.n	8005d7c <__libc_init_array+0x24>
 8005d68:	f000 fc5c 	bl	8006624 <_init>
 8005d6c:	2600      	movs	r6, #0
 8005d6e:	4d0a      	ldr	r5, [pc, #40]	@ (8005d98 <__libc_init_array+0x40>)
 8005d70:	4c0a      	ldr	r4, [pc, #40]	@ (8005d9c <__libc_init_array+0x44>)
 8005d72:	1b64      	subs	r4, r4, r5
 8005d74:	10a4      	asrs	r4, r4, #2
 8005d76:	42a6      	cmp	r6, r4
 8005d78:	d105      	bne.n	8005d86 <__libc_init_array+0x2e>
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d80:	4798      	blx	r3
 8005d82:	3601      	adds	r6, #1
 8005d84:	e7ee      	b.n	8005d64 <__libc_init_array+0xc>
 8005d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8a:	4798      	blx	r3
 8005d8c:	3601      	adds	r6, #1
 8005d8e:	e7f2      	b.n	8005d76 <__libc_init_array+0x1e>
 8005d90:	08006758 	.word	0x08006758
 8005d94:	08006758 	.word	0x08006758
 8005d98:	08006758 	.word	0x08006758
 8005d9c:	0800675c 	.word	0x0800675c

08005da0 <__retarget_lock_acquire_recursive>:
 8005da0:	4770      	bx	lr

08005da2 <__retarget_lock_release_recursive>:
 8005da2:	4770      	bx	lr

08005da4 <_free_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4605      	mov	r5, r0
 8005da8:	2900      	cmp	r1, #0
 8005daa:	d040      	beq.n	8005e2e <_free_r+0x8a>
 8005dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db0:	1f0c      	subs	r4, r1, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bfb8      	it	lt
 8005db6:	18e4      	addlt	r4, r4, r3
 8005db8:	f000 f8de 	bl	8005f78 <__malloc_lock>
 8005dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e30 <_free_r+0x8c>)
 8005dbe:	6813      	ldr	r3, [r2, #0]
 8005dc0:	b933      	cbnz	r3, 8005dd0 <_free_r+0x2c>
 8005dc2:	6063      	str	r3, [r4, #4]
 8005dc4:	6014      	str	r4, [r2, #0]
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dcc:	f000 b8da 	b.w	8005f84 <__malloc_unlock>
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	d908      	bls.n	8005de6 <_free_r+0x42>
 8005dd4:	6820      	ldr	r0, [r4, #0]
 8005dd6:	1821      	adds	r1, r4, r0
 8005dd8:	428b      	cmp	r3, r1
 8005dda:	bf01      	itttt	eq
 8005ddc:	6819      	ldreq	r1, [r3, #0]
 8005dde:	685b      	ldreq	r3, [r3, #4]
 8005de0:	1809      	addeq	r1, r1, r0
 8005de2:	6021      	streq	r1, [r4, #0]
 8005de4:	e7ed      	b.n	8005dc2 <_free_r+0x1e>
 8005de6:	461a      	mov	r2, r3
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	b10b      	cbz	r3, 8005df0 <_free_r+0x4c>
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	d9fa      	bls.n	8005de6 <_free_r+0x42>
 8005df0:	6811      	ldr	r1, [r2, #0]
 8005df2:	1850      	adds	r0, r2, r1
 8005df4:	42a0      	cmp	r0, r4
 8005df6:	d10b      	bne.n	8005e10 <_free_r+0x6c>
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	4401      	add	r1, r0
 8005dfc:	1850      	adds	r0, r2, r1
 8005dfe:	4283      	cmp	r3, r0
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	d1e0      	bne.n	8005dc6 <_free_r+0x22>
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4408      	add	r0, r1
 8005e0a:	6010      	str	r0, [r2, #0]
 8005e0c:	6053      	str	r3, [r2, #4]
 8005e0e:	e7da      	b.n	8005dc6 <_free_r+0x22>
 8005e10:	d902      	bls.n	8005e18 <_free_r+0x74>
 8005e12:	230c      	movs	r3, #12
 8005e14:	602b      	str	r3, [r5, #0]
 8005e16:	e7d6      	b.n	8005dc6 <_free_r+0x22>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	1821      	adds	r1, r4, r0
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf01      	itttt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	1809      	addeq	r1, r1, r0
 8005e26:	6021      	streq	r1, [r4, #0]
 8005e28:	6063      	str	r3, [r4, #4]
 8005e2a:	6054      	str	r4, [r2, #4]
 8005e2c:	e7cb      	b.n	8005dc6 <_free_r+0x22>
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	20000440 	.word	0x20000440

08005e34 <sbrk_aligned>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	4e0f      	ldr	r6, [pc, #60]	@ (8005e74 <sbrk_aligned+0x40>)
 8005e38:	460c      	mov	r4, r1
 8005e3a:	6831      	ldr	r1, [r6, #0]
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	b911      	cbnz	r1, 8005e46 <sbrk_aligned+0x12>
 8005e40:	f000 fb8e 	bl	8006560 <_sbrk_r>
 8005e44:	6030      	str	r0, [r6, #0]
 8005e46:	4621      	mov	r1, r4
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f000 fb89 	bl	8006560 <_sbrk_r>
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	d103      	bne.n	8005e5a <sbrk_aligned+0x26>
 8005e52:	f04f 34ff 	mov.w	r4, #4294967295
 8005e56:	4620      	mov	r0, r4
 8005e58:	bd70      	pop	{r4, r5, r6, pc}
 8005e5a:	1cc4      	adds	r4, r0, #3
 8005e5c:	f024 0403 	bic.w	r4, r4, #3
 8005e60:	42a0      	cmp	r0, r4
 8005e62:	d0f8      	beq.n	8005e56 <sbrk_aligned+0x22>
 8005e64:	1a21      	subs	r1, r4, r0
 8005e66:	4628      	mov	r0, r5
 8005e68:	f000 fb7a 	bl	8006560 <_sbrk_r>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d1f2      	bne.n	8005e56 <sbrk_aligned+0x22>
 8005e70:	e7ef      	b.n	8005e52 <sbrk_aligned+0x1e>
 8005e72:	bf00      	nop
 8005e74:	2000043c 	.word	0x2000043c

08005e78 <_malloc_r>:
 8005e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e7c:	1ccd      	adds	r5, r1, #3
 8005e7e:	f025 0503 	bic.w	r5, r5, #3
 8005e82:	3508      	adds	r5, #8
 8005e84:	2d0c      	cmp	r5, #12
 8005e86:	bf38      	it	cc
 8005e88:	250c      	movcc	r5, #12
 8005e8a:	2d00      	cmp	r5, #0
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	db01      	blt.n	8005e94 <_malloc_r+0x1c>
 8005e90:	42a9      	cmp	r1, r5
 8005e92:	d904      	bls.n	8005e9e <_malloc_r+0x26>
 8005e94:	230c      	movs	r3, #12
 8005e96:	6033      	str	r3, [r6, #0]
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f74 <_malloc_r+0xfc>
 8005ea2:	f000 f869 	bl	8005f78 <__malloc_lock>
 8005ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8005eaa:	461c      	mov	r4, r3
 8005eac:	bb44      	cbnz	r4, 8005f00 <_malloc_r+0x88>
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f7ff ffbf 	bl	8005e34 <sbrk_aligned>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	4604      	mov	r4, r0
 8005eba:	d158      	bne.n	8005f6e <_malloc_r+0xf6>
 8005ebc:	f8d8 4000 	ldr.w	r4, [r8]
 8005ec0:	4627      	mov	r7, r4
 8005ec2:	2f00      	cmp	r7, #0
 8005ec4:	d143      	bne.n	8005f4e <_malloc_r+0xd6>
 8005ec6:	2c00      	cmp	r4, #0
 8005ec8:	d04b      	beq.n	8005f62 <_malloc_r+0xea>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	4639      	mov	r1, r7
 8005ece:	4630      	mov	r0, r6
 8005ed0:	eb04 0903 	add.w	r9, r4, r3
 8005ed4:	f000 fb44 	bl	8006560 <_sbrk_r>
 8005ed8:	4581      	cmp	r9, r0
 8005eda:	d142      	bne.n	8005f62 <_malloc_r+0xea>
 8005edc:	6821      	ldr	r1, [r4, #0]
 8005ede:	4630      	mov	r0, r6
 8005ee0:	1a6d      	subs	r5, r5, r1
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	f7ff ffa6 	bl	8005e34 <sbrk_aligned>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d03a      	beq.n	8005f62 <_malloc_r+0xea>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	442b      	add	r3, r5
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	bb62      	cbnz	r2, 8005f54 <_malloc_r+0xdc>
 8005efa:	f8c8 7000 	str.w	r7, [r8]
 8005efe:	e00f      	b.n	8005f20 <_malloc_r+0xa8>
 8005f00:	6822      	ldr	r2, [r4, #0]
 8005f02:	1b52      	subs	r2, r2, r5
 8005f04:	d420      	bmi.n	8005f48 <_malloc_r+0xd0>
 8005f06:	2a0b      	cmp	r2, #11
 8005f08:	d917      	bls.n	8005f3a <_malloc_r+0xc2>
 8005f0a:	1961      	adds	r1, r4, r5
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	6025      	str	r5, [r4, #0]
 8005f10:	bf18      	it	ne
 8005f12:	6059      	strne	r1, [r3, #4]
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	bf08      	it	eq
 8005f18:	f8c8 1000 	streq.w	r1, [r8]
 8005f1c:	5162      	str	r2, [r4, r5]
 8005f1e:	604b      	str	r3, [r1, #4]
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 f82f 	bl	8005f84 <__malloc_unlock>
 8005f26:	f104 000b 	add.w	r0, r4, #11
 8005f2a:	1d23      	adds	r3, r4, #4
 8005f2c:	f020 0007 	bic.w	r0, r0, #7
 8005f30:	1ac2      	subs	r2, r0, r3
 8005f32:	bf1c      	itt	ne
 8005f34:	1a1b      	subne	r3, r3, r0
 8005f36:	50a3      	strne	r3, [r4, r2]
 8005f38:	e7af      	b.n	8005e9a <_malloc_r+0x22>
 8005f3a:	6862      	ldr	r2, [r4, #4]
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	bf0c      	ite	eq
 8005f40:	f8c8 2000 	streq.w	r2, [r8]
 8005f44:	605a      	strne	r2, [r3, #4]
 8005f46:	e7eb      	b.n	8005f20 <_malloc_r+0xa8>
 8005f48:	4623      	mov	r3, r4
 8005f4a:	6864      	ldr	r4, [r4, #4]
 8005f4c:	e7ae      	b.n	8005eac <_malloc_r+0x34>
 8005f4e:	463c      	mov	r4, r7
 8005f50:	687f      	ldr	r7, [r7, #4]
 8005f52:	e7b6      	b.n	8005ec2 <_malloc_r+0x4a>
 8005f54:	461a      	mov	r2, r3
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d1fb      	bne.n	8005f54 <_malloc_r+0xdc>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	6053      	str	r3, [r2, #4]
 8005f60:	e7de      	b.n	8005f20 <_malloc_r+0xa8>
 8005f62:	230c      	movs	r3, #12
 8005f64:	4630      	mov	r0, r6
 8005f66:	6033      	str	r3, [r6, #0]
 8005f68:	f000 f80c 	bl	8005f84 <__malloc_unlock>
 8005f6c:	e794      	b.n	8005e98 <_malloc_r+0x20>
 8005f6e:	6005      	str	r5, [r0, #0]
 8005f70:	e7d6      	b.n	8005f20 <_malloc_r+0xa8>
 8005f72:	bf00      	nop
 8005f74:	20000440 	.word	0x20000440

08005f78 <__malloc_lock>:
 8005f78:	4801      	ldr	r0, [pc, #4]	@ (8005f80 <__malloc_lock+0x8>)
 8005f7a:	f7ff bf11 	b.w	8005da0 <__retarget_lock_acquire_recursive>
 8005f7e:	bf00      	nop
 8005f80:	20000438 	.word	0x20000438

08005f84 <__malloc_unlock>:
 8005f84:	4801      	ldr	r0, [pc, #4]	@ (8005f8c <__malloc_unlock+0x8>)
 8005f86:	f7ff bf0c 	b.w	8005da2 <__retarget_lock_release_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	20000438 	.word	0x20000438

08005f90 <__ssputs_r>:
 8005f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f94:	461f      	mov	r7, r3
 8005f96:	688e      	ldr	r6, [r1, #8]
 8005f98:	4682      	mov	sl, r0
 8005f9a:	42be      	cmp	r6, r7
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	4690      	mov	r8, r2
 8005fa0:	680b      	ldr	r3, [r1, #0]
 8005fa2:	d82d      	bhi.n	8006000 <__ssputs_r+0x70>
 8005fa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fa8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fac:	d026      	beq.n	8005ffc <__ssputs_r+0x6c>
 8005fae:	6965      	ldr	r5, [r4, #20]
 8005fb0:	6909      	ldr	r1, [r1, #16]
 8005fb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fb6:	eba3 0901 	sub.w	r9, r3, r1
 8005fba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fbe:	1c7b      	adds	r3, r7, #1
 8005fc0:	444b      	add	r3, r9
 8005fc2:	106d      	asrs	r5, r5, #1
 8005fc4:	429d      	cmp	r5, r3
 8005fc6:	bf38      	it	cc
 8005fc8:	461d      	movcc	r5, r3
 8005fca:	0553      	lsls	r3, r2, #21
 8005fcc:	d527      	bpl.n	800601e <__ssputs_r+0x8e>
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7ff ff52 	bl	8005e78 <_malloc_r>
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	b360      	cbz	r0, 8006032 <__ssputs_r+0xa2>
 8005fd8:	464a      	mov	r2, r9
 8005fda:	6921      	ldr	r1, [r4, #16]
 8005fdc:	f000 fade 	bl	800659c <memcpy>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fea:	81a3      	strh	r3, [r4, #12]
 8005fec:	6126      	str	r6, [r4, #16]
 8005fee:	444e      	add	r6, r9
 8005ff0:	6026      	str	r6, [r4, #0]
 8005ff2:	463e      	mov	r6, r7
 8005ff4:	6165      	str	r5, [r4, #20]
 8005ff6:	eba5 0509 	sub.w	r5, r5, r9
 8005ffa:	60a5      	str	r5, [r4, #8]
 8005ffc:	42be      	cmp	r6, r7
 8005ffe:	d900      	bls.n	8006002 <__ssputs_r+0x72>
 8006000:	463e      	mov	r6, r7
 8006002:	4632      	mov	r2, r6
 8006004:	4641      	mov	r1, r8
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	f7ff fe7e 	bl	8005d08 <memmove>
 800600c:	2000      	movs	r0, #0
 800600e:	68a3      	ldr	r3, [r4, #8]
 8006010:	1b9b      	subs	r3, r3, r6
 8006012:	60a3      	str	r3, [r4, #8]
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	4433      	add	r3, r6
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601e:	462a      	mov	r2, r5
 8006020:	f000 faca 	bl	80065b8 <_realloc_r>
 8006024:	4606      	mov	r6, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	d1e0      	bne.n	8005fec <__ssputs_r+0x5c>
 800602a:	4650      	mov	r0, sl
 800602c:	6921      	ldr	r1, [r4, #16]
 800602e:	f7ff feb9 	bl	8005da4 <_free_r>
 8006032:	230c      	movs	r3, #12
 8006034:	f8ca 3000 	str.w	r3, [sl]
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	f04f 30ff 	mov.w	r0, #4294967295
 800603e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	e7e9      	b.n	800601a <__ssputs_r+0x8a>
	...

08006048 <_svfiprintf_r>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	4698      	mov	r8, r3
 800604e:	898b      	ldrh	r3, [r1, #12]
 8006050:	4607      	mov	r7, r0
 8006052:	061b      	lsls	r3, r3, #24
 8006054:	460d      	mov	r5, r1
 8006056:	4614      	mov	r4, r2
 8006058:	b09d      	sub	sp, #116	@ 0x74
 800605a:	d510      	bpl.n	800607e <_svfiprintf_r+0x36>
 800605c:	690b      	ldr	r3, [r1, #16]
 800605e:	b973      	cbnz	r3, 800607e <_svfiprintf_r+0x36>
 8006060:	2140      	movs	r1, #64	@ 0x40
 8006062:	f7ff ff09 	bl	8005e78 <_malloc_r>
 8006066:	6028      	str	r0, [r5, #0]
 8006068:	6128      	str	r0, [r5, #16]
 800606a:	b930      	cbnz	r0, 800607a <_svfiprintf_r+0x32>
 800606c:	230c      	movs	r3, #12
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	b01d      	add	sp, #116	@ 0x74
 8006076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607a:	2340      	movs	r3, #64	@ 0x40
 800607c:	616b      	str	r3, [r5, #20]
 800607e:	2300      	movs	r3, #0
 8006080:	9309      	str	r3, [sp, #36]	@ 0x24
 8006082:	2320      	movs	r3, #32
 8006084:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006088:	2330      	movs	r3, #48	@ 0x30
 800608a:	f04f 0901 	mov.w	r9, #1
 800608e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006092:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800622c <_svfiprintf_r+0x1e4>
 8006096:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800609a:	4623      	mov	r3, r4
 800609c:	469a      	mov	sl, r3
 800609e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060a2:	b10a      	cbz	r2, 80060a8 <_svfiprintf_r+0x60>
 80060a4:	2a25      	cmp	r2, #37	@ 0x25
 80060a6:	d1f9      	bne.n	800609c <_svfiprintf_r+0x54>
 80060a8:	ebba 0b04 	subs.w	fp, sl, r4
 80060ac:	d00b      	beq.n	80060c6 <_svfiprintf_r+0x7e>
 80060ae:	465b      	mov	r3, fp
 80060b0:	4622      	mov	r2, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	4638      	mov	r0, r7
 80060b6:	f7ff ff6b 	bl	8005f90 <__ssputs_r>
 80060ba:	3001      	adds	r0, #1
 80060bc:	f000 80a7 	beq.w	800620e <_svfiprintf_r+0x1c6>
 80060c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060c2:	445a      	add	r2, fp
 80060c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80060c6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 809f 	beq.w	800620e <_svfiprintf_r+0x1c6>
 80060d0:	2300      	movs	r3, #0
 80060d2:	f04f 32ff 	mov.w	r2, #4294967295
 80060d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060da:	f10a 0a01 	add.w	sl, sl, #1
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	9307      	str	r3, [sp, #28]
 80060e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80060e8:	4654      	mov	r4, sl
 80060ea:	2205      	movs	r2, #5
 80060ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f0:	484e      	ldr	r0, [pc, #312]	@ (800622c <_svfiprintf_r+0x1e4>)
 80060f2:	f000 fa45 	bl	8006580 <memchr>
 80060f6:	9a04      	ldr	r2, [sp, #16]
 80060f8:	b9d8      	cbnz	r0, 8006132 <_svfiprintf_r+0xea>
 80060fa:	06d0      	lsls	r0, r2, #27
 80060fc:	bf44      	itt	mi
 80060fe:	2320      	movmi	r3, #32
 8006100:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006104:	0711      	lsls	r1, r2, #28
 8006106:	bf44      	itt	mi
 8006108:	232b      	movmi	r3, #43	@ 0x2b
 800610a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800610e:	f89a 3000 	ldrb.w	r3, [sl]
 8006112:	2b2a      	cmp	r3, #42	@ 0x2a
 8006114:	d015      	beq.n	8006142 <_svfiprintf_r+0xfa>
 8006116:	4654      	mov	r4, sl
 8006118:	2000      	movs	r0, #0
 800611a:	f04f 0c0a 	mov.w	ip, #10
 800611e:	9a07      	ldr	r2, [sp, #28]
 8006120:	4621      	mov	r1, r4
 8006122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006126:	3b30      	subs	r3, #48	@ 0x30
 8006128:	2b09      	cmp	r3, #9
 800612a:	d94b      	bls.n	80061c4 <_svfiprintf_r+0x17c>
 800612c:	b1b0      	cbz	r0, 800615c <_svfiprintf_r+0x114>
 800612e:	9207      	str	r2, [sp, #28]
 8006130:	e014      	b.n	800615c <_svfiprintf_r+0x114>
 8006132:	eba0 0308 	sub.w	r3, r0, r8
 8006136:	fa09 f303 	lsl.w	r3, r9, r3
 800613a:	4313      	orrs	r3, r2
 800613c:	46a2      	mov	sl, r4
 800613e:	9304      	str	r3, [sp, #16]
 8006140:	e7d2      	b.n	80060e8 <_svfiprintf_r+0xa0>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	9103      	str	r1, [sp, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	bfbb      	ittet	lt
 800614e:	425b      	neglt	r3, r3
 8006150:	f042 0202 	orrlt.w	r2, r2, #2
 8006154:	9307      	strge	r3, [sp, #28]
 8006156:	9307      	strlt	r3, [sp, #28]
 8006158:	bfb8      	it	lt
 800615a:	9204      	strlt	r2, [sp, #16]
 800615c:	7823      	ldrb	r3, [r4, #0]
 800615e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006160:	d10a      	bne.n	8006178 <_svfiprintf_r+0x130>
 8006162:	7863      	ldrb	r3, [r4, #1]
 8006164:	2b2a      	cmp	r3, #42	@ 0x2a
 8006166:	d132      	bne.n	80061ce <_svfiprintf_r+0x186>
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	3402      	adds	r4, #2
 800616c:	1d1a      	adds	r2, r3, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	9203      	str	r2, [sp, #12]
 8006172:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006176:	9305      	str	r3, [sp, #20]
 8006178:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006230 <_svfiprintf_r+0x1e8>
 800617c:	2203      	movs	r2, #3
 800617e:	4650      	mov	r0, sl
 8006180:	7821      	ldrb	r1, [r4, #0]
 8006182:	f000 f9fd 	bl	8006580 <memchr>
 8006186:	b138      	cbz	r0, 8006198 <_svfiprintf_r+0x150>
 8006188:	2240      	movs	r2, #64	@ 0x40
 800618a:	9b04      	ldr	r3, [sp, #16]
 800618c:	eba0 000a 	sub.w	r0, r0, sl
 8006190:	4082      	lsls	r2, r0
 8006192:	4313      	orrs	r3, r2
 8006194:	3401      	adds	r4, #1
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800619c:	2206      	movs	r2, #6
 800619e:	4825      	ldr	r0, [pc, #148]	@ (8006234 <_svfiprintf_r+0x1ec>)
 80061a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061a4:	f000 f9ec 	bl	8006580 <memchr>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d036      	beq.n	800621a <_svfiprintf_r+0x1d2>
 80061ac:	4b22      	ldr	r3, [pc, #136]	@ (8006238 <_svfiprintf_r+0x1f0>)
 80061ae:	bb1b      	cbnz	r3, 80061f8 <_svfiprintf_r+0x1b0>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	3307      	adds	r3, #7
 80061b4:	f023 0307 	bic.w	r3, r3, #7
 80061b8:	3308      	adds	r3, #8
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061be:	4433      	add	r3, r6
 80061c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80061c2:	e76a      	b.n	800609a <_svfiprintf_r+0x52>
 80061c4:	460c      	mov	r4, r1
 80061c6:	2001      	movs	r0, #1
 80061c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80061cc:	e7a8      	b.n	8006120 <_svfiprintf_r+0xd8>
 80061ce:	2300      	movs	r3, #0
 80061d0:	f04f 0c0a 	mov.w	ip, #10
 80061d4:	4619      	mov	r1, r3
 80061d6:	3401      	adds	r4, #1
 80061d8:	9305      	str	r3, [sp, #20]
 80061da:	4620      	mov	r0, r4
 80061dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061e0:	3a30      	subs	r2, #48	@ 0x30
 80061e2:	2a09      	cmp	r2, #9
 80061e4:	d903      	bls.n	80061ee <_svfiprintf_r+0x1a6>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0c6      	beq.n	8006178 <_svfiprintf_r+0x130>
 80061ea:	9105      	str	r1, [sp, #20]
 80061ec:	e7c4      	b.n	8006178 <_svfiprintf_r+0x130>
 80061ee:	4604      	mov	r4, r0
 80061f0:	2301      	movs	r3, #1
 80061f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80061f6:	e7f0      	b.n	80061da <_svfiprintf_r+0x192>
 80061f8:	ab03      	add	r3, sp, #12
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	462a      	mov	r2, r5
 80061fe:	4638      	mov	r0, r7
 8006200:	4b0e      	ldr	r3, [pc, #56]	@ (800623c <_svfiprintf_r+0x1f4>)
 8006202:	a904      	add	r1, sp, #16
 8006204:	f3af 8000 	nop.w
 8006208:	1c42      	adds	r2, r0, #1
 800620a:	4606      	mov	r6, r0
 800620c:	d1d6      	bne.n	80061bc <_svfiprintf_r+0x174>
 800620e:	89ab      	ldrh	r3, [r5, #12]
 8006210:	065b      	lsls	r3, r3, #25
 8006212:	f53f af2d 	bmi.w	8006070 <_svfiprintf_r+0x28>
 8006216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006218:	e72c      	b.n	8006074 <_svfiprintf_r+0x2c>
 800621a:	ab03      	add	r3, sp, #12
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	462a      	mov	r2, r5
 8006220:	4638      	mov	r0, r7
 8006222:	4b06      	ldr	r3, [pc, #24]	@ (800623c <_svfiprintf_r+0x1f4>)
 8006224:	a904      	add	r1, sp, #16
 8006226:	f000 f87d 	bl	8006324 <_printf_i>
 800622a:	e7ed      	b.n	8006208 <_svfiprintf_r+0x1c0>
 800622c:	0800671a 	.word	0x0800671a
 8006230:	08006720 	.word	0x08006720
 8006234:	08006724 	.word	0x08006724
 8006238:	00000000 	.word	0x00000000
 800623c:	08005f91 	.word	0x08005f91

08006240 <_printf_common>:
 8006240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	4616      	mov	r6, r2
 8006246:	4698      	mov	r8, r3
 8006248:	688a      	ldr	r2, [r1, #8]
 800624a:	690b      	ldr	r3, [r1, #16]
 800624c:	4607      	mov	r7, r0
 800624e:	4293      	cmp	r3, r2
 8006250:	bfb8      	it	lt
 8006252:	4613      	movlt	r3, r2
 8006254:	6033      	str	r3, [r6, #0]
 8006256:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800625a:	460c      	mov	r4, r1
 800625c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006260:	b10a      	cbz	r2, 8006266 <_printf_common+0x26>
 8006262:	3301      	adds	r3, #1
 8006264:	6033      	str	r3, [r6, #0]
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	0699      	lsls	r1, r3, #26
 800626a:	bf42      	ittt	mi
 800626c:	6833      	ldrmi	r3, [r6, #0]
 800626e:	3302      	addmi	r3, #2
 8006270:	6033      	strmi	r3, [r6, #0]
 8006272:	6825      	ldr	r5, [r4, #0]
 8006274:	f015 0506 	ands.w	r5, r5, #6
 8006278:	d106      	bne.n	8006288 <_printf_common+0x48>
 800627a:	f104 0a19 	add.w	sl, r4, #25
 800627e:	68e3      	ldr	r3, [r4, #12]
 8006280:	6832      	ldr	r2, [r6, #0]
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	42ab      	cmp	r3, r5
 8006286:	dc2b      	bgt.n	80062e0 <_printf_common+0xa0>
 8006288:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	3b00      	subs	r3, #0
 8006290:	bf18      	it	ne
 8006292:	2301      	movne	r3, #1
 8006294:	0692      	lsls	r2, r2, #26
 8006296:	d430      	bmi.n	80062fa <_printf_common+0xba>
 8006298:	4641      	mov	r1, r8
 800629a:	4638      	mov	r0, r7
 800629c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062a0:	47c8      	blx	r9
 80062a2:	3001      	adds	r0, #1
 80062a4:	d023      	beq.n	80062ee <_printf_common+0xae>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	6922      	ldr	r2, [r4, #16]
 80062aa:	f003 0306 	and.w	r3, r3, #6
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	bf14      	ite	ne
 80062b2:	2500      	movne	r5, #0
 80062b4:	6833      	ldreq	r3, [r6, #0]
 80062b6:	f04f 0600 	mov.w	r6, #0
 80062ba:	bf08      	it	eq
 80062bc:	68e5      	ldreq	r5, [r4, #12]
 80062be:	f104 041a 	add.w	r4, r4, #26
 80062c2:	bf08      	it	eq
 80062c4:	1aed      	subeq	r5, r5, r3
 80062c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062ca:	bf08      	it	eq
 80062cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bfc4      	itt	gt
 80062d4:	1a9b      	subgt	r3, r3, r2
 80062d6:	18ed      	addgt	r5, r5, r3
 80062d8:	42b5      	cmp	r5, r6
 80062da:	d11a      	bne.n	8006312 <_printf_common+0xd2>
 80062dc:	2000      	movs	r0, #0
 80062de:	e008      	b.n	80062f2 <_printf_common+0xb2>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4652      	mov	r2, sl
 80062e4:	4641      	mov	r1, r8
 80062e6:	4638      	mov	r0, r7
 80062e8:	47c8      	blx	r9
 80062ea:	3001      	adds	r0, #1
 80062ec:	d103      	bne.n	80062f6 <_printf_common+0xb6>
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295
 80062f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f6:	3501      	adds	r5, #1
 80062f8:	e7c1      	b.n	800627e <_printf_common+0x3e>
 80062fa:	2030      	movs	r0, #48	@ 0x30
 80062fc:	18e1      	adds	r1, r4, r3
 80062fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006308:	4422      	add	r2, r4
 800630a:	3302      	adds	r3, #2
 800630c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006310:	e7c2      	b.n	8006298 <_printf_common+0x58>
 8006312:	2301      	movs	r3, #1
 8006314:	4622      	mov	r2, r4
 8006316:	4641      	mov	r1, r8
 8006318:	4638      	mov	r0, r7
 800631a:	47c8      	blx	r9
 800631c:	3001      	adds	r0, #1
 800631e:	d0e6      	beq.n	80062ee <_printf_common+0xae>
 8006320:	3601      	adds	r6, #1
 8006322:	e7d9      	b.n	80062d8 <_printf_common+0x98>

08006324 <_printf_i>:
 8006324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006328:	7e0f      	ldrb	r7, [r1, #24]
 800632a:	4691      	mov	r9, r2
 800632c:	2f78      	cmp	r7, #120	@ 0x78
 800632e:	4680      	mov	r8, r0
 8006330:	460c      	mov	r4, r1
 8006332:	469a      	mov	sl, r3
 8006334:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800633a:	d807      	bhi.n	800634c <_printf_i+0x28>
 800633c:	2f62      	cmp	r7, #98	@ 0x62
 800633e:	d80a      	bhi.n	8006356 <_printf_i+0x32>
 8006340:	2f00      	cmp	r7, #0
 8006342:	f000 80d1 	beq.w	80064e8 <_printf_i+0x1c4>
 8006346:	2f58      	cmp	r7, #88	@ 0x58
 8006348:	f000 80b8 	beq.w	80064bc <_printf_i+0x198>
 800634c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006354:	e03a      	b.n	80063cc <_printf_i+0xa8>
 8006356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800635a:	2b15      	cmp	r3, #21
 800635c:	d8f6      	bhi.n	800634c <_printf_i+0x28>
 800635e:	a101      	add	r1, pc, #4	@ (adr r1, 8006364 <_printf_i+0x40>)
 8006360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006364:	080063bd 	.word	0x080063bd
 8006368:	080063d1 	.word	0x080063d1
 800636c:	0800634d 	.word	0x0800634d
 8006370:	0800634d 	.word	0x0800634d
 8006374:	0800634d 	.word	0x0800634d
 8006378:	0800634d 	.word	0x0800634d
 800637c:	080063d1 	.word	0x080063d1
 8006380:	0800634d 	.word	0x0800634d
 8006384:	0800634d 	.word	0x0800634d
 8006388:	0800634d 	.word	0x0800634d
 800638c:	0800634d 	.word	0x0800634d
 8006390:	080064cf 	.word	0x080064cf
 8006394:	080063fb 	.word	0x080063fb
 8006398:	08006489 	.word	0x08006489
 800639c:	0800634d 	.word	0x0800634d
 80063a0:	0800634d 	.word	0x0800634d
 80063a4:	080064f1 	.word	0x080064f1
 80063a8:	0800634d 	.word	0x0800634d
 80063ac:	080063fb 	.word	0x080063fb
 80063b0:	0800634d 	.word	0x0800634d
 80063b4:	0800634d 	.word	0x0800634d
 80063b8:	08006491 	.word	0x08006491
 80063bc:	6833      	ldr	r3, [r6, #0]
 80063be:	1d1a      	adds	r2, r3, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6032      	str	r2, [r6, #0]
 80063c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063cc:	2301      	movs	r3, #1
 80063ce:	e09c      	b.n	800650a <_printf_i+0x1e6>
 80063d0:	6833      	ldr	r3, [r6, #0]
 80063d2:	6820      	ldr	r0, [r4, #0]
 80063d4:	1d19      	adds	r1, r3, #4
 80063d6:	6031      	str	r1, [r6, #0]
 80063d8:	0606      	lsls	r6, r0, #24
 80063da:	d501      	bpl.n	80063e0 <_printf_i+0xbc>
 80063dc:	681d      	ldr	r5, [r3, #0]
 80063de:	e003      	b.n	80063e8 <_printf_i+0xc4>
 80063e0:	0645      	lsls	r5, r0, #25
 80063e2:	d5fb      	bpl.n	80063dc <_printf_i+0xb8>
 80063e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	da03      	bge.n	80063f4 <_printf_i+0xd0>
 80063ec:	232d      	movs	r3, #45	@ 0x2d
 80063ee:	426d      	negs	r5, r5
 80063f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063f4:	230a      	movs	r3, #10
 80063f6:	4858      	ldr	r0, [pc, #352]	@ (8006558 <_printf_i+0x234>)
 80063f8:	e011      	b.n	800641e <_printf_i+0xfa>
 80063fa:	6821      	ldr	r1, [r4, #0]
 80063fc:	6833      	ldr	r3, [r6, #0]
 80063fe:	0608      	lsls	r0, r1, #24
 8006400:	f853 5b04 	ldr.w	r5, [r3], #4
 8006404:	d402      	bmi.n	800640c <_printf_i+0xe8>
 8006406:	0649      	lsls	r1, r1, #25
 8006408:	bf48      	it	mi
 800640a:	b2ad      	uxthmi	r5, r5
 800640c:	2f6f      	cmp	r7, #111	@ 0x6f
 800640e:	6033      	str	r3, [r6, #0]
 8006410:	bf14      	ite	ne
 8006412:	230a      	movne	r3, #10
 8006414:	2308      	moveq	r3, #8
 8006416:	4850      	ldr	r0, [pc, #320]	@ (8006558 <_printf_i+0x234>)
 8006418:	2100      	movs	r1, #0
 800641a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800641e:	6866      	ldr	r6, [r4, #4]
 8006420:	2e00      	cmp	r6, #0
 8006422:	60a6      	str	r6, [r4, #8]
 8006424:	db05      	blt.n	8006432 <_printf_i+0x10e>
 8006426:	6821      	ldr	r1, [r4, #0]
 8006428:	432e      	orrs	r6, r5
 800642a:	f021 0104 	bic.w	r1, r1, #4
 800642e:	6021      	str	r1, [r4, #0]
 8006430:	d04b      	beq.n	80064ca <_printf_i+0x1a6>
 8006432:	4616      	mov	r6, r2
 8006434:	fbb5 f1f3 	udiv	r1, r5, r3
 8006438:	fb03 5711 	mls	r7, r3, r1, r5
 800643c:	5dc7      	ldrb	r7, [r0, r7]
 800643e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006442:	462f      	mov	r7, r5
 8006444:	42bb      	cmp	r3, r7
 8006446:	460d      	mov	r5, r1
 8006448:	d9f4      	bls.n	8006434 <_printf_i+0x110>
 800644a:	2b08      	cmp	r3, #8
 800644c:	d10b      	bne.n	8006466 <_printf_i+0x142>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	07df      	lsls	r7, r3, #31
 8006452:	d508      	bpl.n	8006466 <_printf_i+0x142>
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	6861      	ldr	r1, [r4, #4]
 8006458:	4299      	cmp	r1, r3
 800645a:	bfde      	ittt	le
 800645c:	2330      	movle	r3, #48	@ 0x30
 800645e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006462:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006466:	1b92      	subs	r2, r2, r6
 8006468:	6122      	str	r2, [r4, #16]
 800646a:	464b      	mov	r3, r9
 800646c:	4621      	mov	r1, r4
 800646e:	4640      	mov	r0, r8
 8006470:	f8cd a000 	str.w	sl, [sp]
 8006474:	aa03      	add	r2, sp, #12
 8006476:	f7ff fee3 	bl	8006240 <_printf_common>
 800647a:	3001      	adds	r0, #1
 800647c:	d14a      	bne.n	8006514 <_printf_i+0x1f0>
 800647e:	f04f 30ff 	mov.w	r0, #4294967295
 8006482:	b004      	add	sp, #16
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	f043 0320 	orr.w	r3, r3, #32
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	2778      	movs	r7, #120	@ 0x78
 8006492:	4832      	ldr	r0, [pc, #200]	@ (800655c <_printf_i+0x238>)
 8006494:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	6831      	ldr	r1, [r6, #0]
 800649c:	061f      	lsls	r7, r3, #24
 800649e:	f851 5b04 	ldr.w	r5, [r1], #4
 80064a2:	d402      	bmi.n	80064aa <_printf_i+0x186>
 80064a4:	065f      	lsls	r7, r3, #25
 80064a6:	bf48      	it	mi
 80064a8:	b2ad      	uxthmi	r5, r5
 80064aa:	6031      	str	r1, [r6, #0]
 80064ac:	07d9      	lsls	r1, r3, #31
 80064ae:	bf44      	itt	mi
 80064b0:	f043 0320 	orrmi.w	r3, r3, #32
 80064b4:	6023      	strmi	r3, [r4, #0]
 80064b6:	b11d      	cbz	r5, 80064c0 <_printf_i+0x19c>
 80064b8:	2310      	movs	r3, #16
 80064ba:	e7ad      	b.n	8006418 <_printf_i+0xf4>
 80064bc:	4826      	ldr	r0, [pc, #152]	@ (8006558 <_printf_i+0x234>)
 80064be:	e7e9      	b.n	8006494 <_printf_i+0x170>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	f023 0320 	bic.w	r3, r3, #32
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	e7f6      	b.n	80064b8 <_printf_i+0x194>
 80064ca:	4616      	mov	r6, r2
 80064cc:	e7bd      	b.n	800644a <_printf_i+0x126>
 80064ce:	6833      	ldr	r3, [r6, #0]
 80064d0:	6825      	ldr	r5, [r4, #0]
 80064d2:	1d18      	adds	r0, r3, #4
 80064d4:	6961      	ldr	r1, [r4, #20]
 80064d6:	6030      	str	r0, [r6, #0]
 80064d8:	062e      	lsls	r6, r5, #24
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	d501      	bpl.n	80064e2 <_printf_i+0x1be>
 80064de:	6019      	str	r1, [r3, #0]
 80064e0:	e002      	b.n	80064e8 <_printf_i+0x1c4>
 80064e2:	0668      	lsls	r0, r5, #25
 80064e4:	d5fb      	bpl.n	80064de <_printf_i+0x1ba>
 80064e6:	8019      	strh	r1, [r3, #0]
 80064e8:	2300      	movs	r3, #0
 80064ea:	4616      	mov	r6, r2
 80064ec:	6123      	str	r3, [r4, #16]
 80064ee:	e7bc      	b.n	800646a <_printf_i+0x146>
 80064f0:	6833      	ldr	r3, [r6, #0]
 80064f2:	2100      	movs	r1, #0
 80064f4:	1d1a      	adds	r2, r3, #4
 80064f6:	6032      	str	r2, [r6, #0]
 80064f8:	681e      	ldr	r6, [r3, #0]
 80064fa:	6862      	ldr	r2, [r4, #4]
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 f83f 	bl	8006580 <memchr>
 8006502:	b108      	cbz	r0, 8006508 <_printf_i+0x1e4>
 8006504:	1b80      	subs	r0, r0, r6
 8006506:	6060      	str	r0, [r4, #4]
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	6123      	str	r3, [r4, #16]
 800650c:	2300      	movs	r3, #0
 800650e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006512:	e7aa      	b.n	800646a <_printf_i+0x146>
 8006514:	4632      	mov	r2, r6
 8006516:	4649      	mov	r1, r9
 8006518:	4640      	mov	r0, r8
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	47d0      	blx	sl
 800651e:	3001      	adds	r0, #1
 8006520:	d0ad      	beq.n	800647e <_printf_i+0x15a>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	079b      	lsls	r3, r3, #30
 8006526:	d413      	bmi.n	8006550 <_printf_i+0x22c>
 8006528:	68e0      	ldr	r0, [r4, #12]
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	4298      	cmp	r0, r3
 800652e:	bfb8      	it	lt
 8006530:	4618      	movlt	r0, r3
 8006532:	e7a6      	b.n	8006482 <_printf_i+0x15e>
 8006534:	2301      	movs	r3, #1
 8006536:	4632      	mov	r2, r6
 8006538:	4649      	mov	r1, r9
 800653a:	4640      	mov	r0, r8
 800653c:	47d0      	blx	sl
 800653e:	3001      	adds	r0, #1
 8006540:	d09d      	beq.n	800647e <_printf_i+0x15a>
 8006542:	3501      	adds	r5, #1
 8006544:	68e3      	ldr	r3, [r4, #12]
 8006546:	9903      	ldr	r1, [sp, #12]
 8006548:	1a5b      	subs	r3, r3, r1
 800654a:	42ab      	cmp	r3, r5
 800654c:	dcf2      	bgt.n	8006534 <_printf_i+0x210>
 800654e:	e7eb      	b.n	8006528 <_printf_i+0x204>
 8006550:	2500      	movs	r5, #0
 8006552:	f104 0619 	add.w	r6, r4, #25
 8006556:	e7f5      	b.n	8006544 <_printf_i+0x220>
 8006558:	0800672b 	.word	0x0800672b
 800655c:	0800673c 	.word	0x0800673c

08006560 <_sbrk_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	2300      	movs	r3, #0
 8006564:	4d05      	ldr	r5, [pc, #20]	@ (800657c <_sbrk_r+0x1c>)
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	f7fb fdde 	bl	800212c <_sbrk>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_sbrk_r+0x1a>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_sbrk_r+0x1a>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	20000434 	.word	0x20000434

08006580 <memchr>:
 8006580:	4603      	mov	r3, r0
 8006582:	b510      	push	{r4, lr}
 8006584:	b2c9      	uxtb	r1, r1
 8006586:	4402      	add	r2, r0
 8006588:	4293      	cmp	r3, r2
 800658a:	4618      	mov	r0, r3
 800658c:	d101      	bne.n	8006592 <memchr+0x12>
 800658e:	2000      	movs	r0, #0
 8006590:	e003      	b.n	800659a <memchr+0x1a>
 8006592:	7804      	ldrb	r4, [r0, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	428c      	cmp	r4, r1
 8006598:	d1f6      	bne.n	8006588 <memchr+0x8>
 800659a:	bd10      	pop	{r4, pc}

0800659c <memcpy>:
 800659c:	440a      	add	r2, r1
 800659e:	4291      	cmp	r1, r2
 80065a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a4:	d100      	bne.n	80065a8 <memcpy+0xc>
 80065a6:	4770      	bx	lr
 80065a8:	b510      	push	{r4, lr}
 80065aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ae:	4291      	cmp	r1, r2
 80065b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065b4:	d1f9      	bne.n	80065aa <memcpy+0xe>
 80065b6:	bd10      	pop	{r4, pc}

080065b8 <_realloc_r>:
 80065b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065bc:	4607      	mov	r7, r0
 80065be:	4614      	mov	r4, r2
 80065c0:	460d      	mov	r5, r1
 80065c2:	b921      	cbnz	r1, 80065ce <_realloc_r+0x16>
 80065c4:	4611      	mov	r1, r2
 80065c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ca:	f7ff bc55 	b.w	8005e78 <_malloc_r>
 80065ce:	b92a      	cbnz	r2, 80065dc <_realloc_r+0x24>
 80065d0:	f7ff fbe8 	bl	8005da4 <_free_r>
 80065d4:	4625      	mov	r5, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065dc:	f000 f81a 	bl	8006614 <_malloc_usable_size_r>
 80065e0:	4284      	cmp	r4, r0
 80065e2:	4606      	mov	r6, r0
 80065e4:	d802      	bhi.n	80065ec <_realloc_r+0x34>
 80065e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065ea:	d8f4      	bhi.n	80065d6 <_realloc_r+0x1e>
 80065ec:	4621      	mov	r1, r4
 80065ee:	4638      	mov	r0, r7
 80065f0:	f7ff fc42 	bl	8005e78 <_malloc_r>
 80065f4:	4680      	mov	r8, r0
 80065f6:	b908      	cbnz	r0, 80065fc <_realloc_r+0x44>
 80065f8:	4645      	mov	r5, r8
 80065fa:	e7ec      	b.n	80065d6 <_realloc_r+0x1e>
 80065fc:	42b4      	cmp	r4, r6
 80065fe:	4622      	mov	r2, r4
 8006600:	4629      	mov	r1, r5
 8006602:	bf28      	it	cs
 8006604:	4632      	movcs	r2, r6
 8006606:	f7ff ffc9 	bl	800659c <memcpy>
 800660a:	4629      	mov	r1, r5
 800660c:	4638      	mov	r0, r7
 800660e:	f7ff fbc9 	bl	8005da4 <_free_r>
 8006612:	e7f1      	b.n	80065f8 <_realloc_r+0x40>

08006614 <_malloc_usable_size_r>:
 8006614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006618:	1f18      	subs	r0, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	bfbc      	itt	lt
 800661e:	580b      	ldrlt	r3, [r1, r0]
 8006620:	18c0      	addlt	r0, r0, r3
 8006622:	4770      	bx	lr

08006624 <_init>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	bf00      	nop
 8006628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662a:	bc08      	pop	{r3}
 800662c:	469e      	mov	lr, r3
 800662e:	4770      	bx	lr

08006630 <_fini>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr
