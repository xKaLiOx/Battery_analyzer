
Battery_analyzer_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004bbc  08004bbc  00005bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c6c  08004c6c  00005c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c74  08004c74  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c74  08004c74  00005c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004c7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000064  08004ce0  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004ce0  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1a0  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233d  00000000  00000000  0001122d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00013570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090d  00000000  00000000  00014148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188b3  00000000  00000000  00014a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e94a  00000000  00000000  0002d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d83d  00000000  00000000  0003bc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c948f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003570  00000000  00000000  000c94d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000cca44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ba4 	.word	0x08004ba4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08004ba4 	.word	0x08004ba4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2f>:
 8000728:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800072c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000730:	bf24      	itt	cs
 8000732:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000736:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800073a:	d90d      	bls.n	8000758 <__aeabi_d2f+0x30>
 800073c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000740:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000744:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000748:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800074c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000750:	bf08      	it	eq
 8000752:	f020 0001 	biceq.w	r0, r0, #1
 8000756:	4770      	bx	lr
 8000758:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800075c:	d121      	bne.n	80007a2 <__aeabi_d2f+0x7a>
 800075e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000762:	bfbc      	itt	lt
 8000764:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000768:	4770      	bxlt	lr
 800076a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800076e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000772:	f1c2 0218 	rsb	r2, r2, #24
 8000776:	f1c2 0c20 	rsb	ip, r2, #32
 800077a:	fa10 f30c 	lsls.w	r3, r0, ip
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	bf18      	it	ne
 8000784:	f040 0001 	orrne.w	r0, r0, #1
 8000788:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800078c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000790:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000794:	ea40 000c 	orr.w	r0, r0, ip
 8000798:	fa23 f302 	lsr.w	r3, r3, r2
 800079c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a0:	e7cc      	b.n	800073c <__aeabi_d2f+0x14>
 80007a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007a6:	d107      	bne.n	80007b8 <__aeabi_d2f+0x90>
 80007a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007ac:	bf1e      	ittt	ne
 80007ae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007b2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007b6:	4770      	bxne	lr
 80007b8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xc0>)
 80007ee:	4a27      	ldr	r2, [pc, #156]	@ (800088c <MX_ADC1_Init+0xc4>)
 80007f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_ADC1_Init+0xc0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xc0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xc0>)
 8000806:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800080a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xc0>)
 8000814:	2201      	movs	r2, #1
 8000816:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000818:	481b      	ldr	r0, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xc0>)
 800081a:	f000 fdcb 	bl	80013b4 <HAL_ADC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8000824:	f000 fb20 	bl	8000e68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000830:	2303      	movs	r3, #3
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4813      	ldr	r0, [pc, #76]	@ (8000888 <MX_ADC1_Init+0xc0>)
 800083c:	f000 ff64 	bl	8001708 <HAL_ADC_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000846:	f000 fb0f 	bl	8000e68 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 800084a:	2311      	movs	r3, #17
 800084c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800084e:	2301      	movs	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000856:	2306      	movs	r3, #6
 8000858:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800085a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800085e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_ADC1_Init+0xc0>)
 8000872:	f001 fb41 	bl	8001ef8 <HAL_ADCEx_InjectedConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800087c:	f000 faf4 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	@ 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000080 	.word	0x20000080
 800088c:	40012400 	.word	0x40012400

08000890 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a18      	ldr	r2, [pc, #96]	@ (800090c <HAL_ADC_MspInit+0x7c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d129      	bne.n	8000904 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <HAL_ADC_MspInit+0x80>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a16      	ldr	r2, [pc, #88]	@ (8000910 <HAL_ADC_MspInit+0x80>)
 80008b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <HAL_ADC_MspInit+0x80>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <HAL_ADC_MspInit+0x80>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a10      	ldr	r2, [pc, #64]	@ (8000910 <HAL_ADC_MspInit+0x80>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <HAL_ADC_MspInit+0x80>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e0:	2301      	movs	r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e4:	2303      	movs	r3, #3
 80008e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	4809      	ldr	r0, [pc, #36]	@ (8000914 <HAL_ADC_MspInit+0x84>)
 80008f0:	f001 fdaa 	bl	8002448 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2012      	movs	r0, #18
 80008fa:	f001 fd6e 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008fe:	2012      	movs	r0, #18
 8000900:	f001 fd87 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40012400 	.word	0x40012400
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800

08000918 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <MX_GPIO_Init+0x134>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a46      	ldr	r2, [pc, #280]	@ (8000a4c <MX_GPIO_Init+0x134>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b44      	ldr	r3, [pc, #272]	@ (8000a4c <MX_GPIO_Init+0x134>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000944:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <MX_GPIO_Init+0x134>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a40      	ldr	r2, [pc, #256]	@ (8000a4c <MX_GPIO_Init+0x134>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <MX_GPIO_Init+0x134>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0320 	and.w	r3, r3, #32
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a4c <MX_GPIO_Init+0x134>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a3a      	ldr	r2, [pc, #232]	@ (8000a4c <MX_GPIO_Init+0x134>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b38      	ldr	r3, [pc, #224]	@ (8000a4c <MX_GPIO_Init+0x134>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <MX_GPIO_Init+0x134>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a34      	ldr	r2, [pc, #208]	@ (8000a4c <MX_GPIO_Init+0x134>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b32      	ldr	r3, [pc, #200]	@ (8000a4c <MX_GPIO_Init+0x134>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED_Pin|CHARGING_STATE_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000992:	482f      	ldr	r0, [pc, #188]	@ (8000a50 <MX_GPIO_Init+0x138>)
 8000994:	f001 fedc 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 800099e:	482d      	ldr	r0, [pc, #180]	@ (8000a54 <MX_GPIO_Init+0x13c>)
 80009a0:	f001 fed6 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80009aa:	482b      	ldr	r0, [pc, #172]	@ (8000a58 <MX_GPIO_Init+0x140>)
 80009ac:	f001 fed0 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_LED_Pin CHARGING_STATE_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|CHARGING_STATE_Pin;
 80009b0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	4619      	mov	r1, r3
 80009c8:	4821      	ldr	r0, [pc, #132]	@ (8000a50 <MX_GPIO_Init+0x138>)
 80009ca:	f001 fd3d 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_mode_Pin Button_add_Pin Button_sub_Pin */
  GPIO_InitStruct.Pin = Button_mode_Pin|Button_add_Pin|Button_sub_Pin;
 80009ce:	f640 4302 	movw	r3, #3074	@ 0xc02
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d4:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <MX_GPIO_Init+0x144>)
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4619      	mov	r1, r3
 80009e2:	481d      	ldr	r0, [pc, #116]	@ (8000a58 <MX_GPIO_Init+0x140>)
 80009e4:	f001 fd30 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 80009e8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80009ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	4814      	ldr	r0, [pc, #80]	@ (8000a54 <MX_GPIO_Init+0x13c>)
 8000a02:	f001 fd21 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000a06:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <MX_GPIO_Init+0x140>)
 8000a20:	f001 fd12 	bl	8002448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2007      	movs	r0, #7
 8000a2a:	f001 fcd6 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f001 fcef 	bl	8002412 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2028      	movs	r0, #40	@ 0x28
 8000a3a:	f001 fcce 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a3e:	2028      	movs	r0, #40	@ 0x28
 8000a40:	f001 fce7 	bl	8002412 <HAL_NVIC_EnableIRQ>

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40011000 	.word	0x40011000
 8000a54:	40010800 	.word	0x40010800
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	10110000 	.word	0x10110000

08000a60 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a66:	f000 fc1f 	bl	80012a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a6a:	f000 f883 	bl	8000b74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a6e:	f7ff ff53 	bl	8000918 <MX_GPIO_Init>
	MX_TIM4_Init();
 8000a72:	f000 fb0f 	bl	8001094 <MX_TIM4_Init>
	MX_TIM3_Init();
 8000a76:	f000 fabf 	bl	8000ff8 <MX_TIM3_Init>
	MX_ADC1_Init();
 8000a7a:	f7ff fea5 	bl	80007c8 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	if(HAL_ADCEx_Calibration_Start(&hadc1) !=HAL_OK)
 8000a7e:	4835      	ldr	r0, [pc, #212]	@ (8000b54 <main+0xf4>)
 8000a80:	f000 ffd6 	bl	8001a30 <HAL_ADCEx_Calibration_Start>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d007      	beq.n	8000a9a <main+0x3a>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a90:	4831      	ldr	r0, [pc, #196]	@ (8000b58 <main+0xf8>)
 8000a92:	f001 fe5d 	bl	8002750 <HAL_GPIO_WritePin>
		Error_Handler();
 8000a96:	f000 f9e7 	bl	8000e68 <Error_Handler>
	}
	if(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK)
 8000a9a:	4830      	ldr	r0, [pc, #192]	@ (8000b5c <main+0xfc>)
 8000a9c:	f002 fc40 	bl	8003320 <HAL_TIM_Base_Start_IT>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <main+0x56>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aac:	482a      	ldr	r0, [pc, #168]	@ (8000b58 <main+0xf8>)
 8000aae:	f001 fe4f 	bl	8002750 <HAL_GPIO_WritePin>
		Error_Handler();
 8000ab2:	f000 f9d9 	bl	8000e68 <Error_Handler>
	}
	if(HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK)
 8000ab6:	482a      	ldr	r0, [pc, #168]	@ (8000b60 <main+0x100>)
 8000ab8:	f002 fc32 	bl	8003320 <HAL_TIM_Base_Start_IT>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <main+0x72>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac8:	4823      	ldr	r0, [pc, #140]	@ (8000b58 <main+0xf8>)
 8000aca:	f001 fe41 	bl	8002750 <HAL_GPIO_WritePin>
		Error_Handler();
 8000ace:	f000 f9cb 	bl	8000e68 <Error_Handler>
	}
	HAL_Delay(500);// wait for DC point
 8000ad2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ad6:	f000 fc49 	bl	800136c <HAL_Delay>

	//Read internal reference for VDDA
	HAL_ADCEx_InjectedStart(&hadc1);
 8000ada:	481e      	ldr	r0, [pc, #120]	@ (8000b54 <main+0xf4>)
 8000adc:	f001 f856 	bl	8001b8c <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedPollForConversion(&hadc1, 500);
 8000ae0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ae4:	481b      	ldr	r0, [pc, #108]	@ (8000b54 <main+0xf4>)
 8000ae6:	f001 f8d7 	bl	8001c98 <HAL_ADCEx_InjectedPollForConversion>
	uint16_t Vadc = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000aea:	2101      	movs	r1, #1
 8000aec:	4819      	ldr	r0, [pc, #100]	@ (8000b54 <main+0xf4>)
 8000aee:	f001 f9cb 	bl	8001e88 <HAL_ADCEx_InjectedGetValue>
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
	Vdda = Vadc/ADC_steps*Vrefint;
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	0b1b      	lsrs	r3, r3, #12
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fda9 	bl	8000654 <__aeabi_i2d>
 8000b02:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <main+0x104>)
 8000b08:	f7ff fb28 	bl	800015c <__aeabi_dmul>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4610      	mov	r0, r2
 8000b12:	4619      	mov	r1, r3
 8000b14:	f7ff fe08 	bl	8000728 <__aeabi_d2f>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <main+0x108>)
 8000b1c:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(updateScreenRequest)//only perfrom LCD switch states on gpio change
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <main+0x10c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <main+0xcc>
		{
			updateScreen();
 8000b28:	f000 f8a0 	bl	8000c6c <updateScreen>
		}

		switch(STATE_MCU)
 8000b2c:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <main+0x110>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	3b01      	subs	r3, #1
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d80b      	bhi.n	8000b50 <main+0xf0>
 8000b38:	a201      	add	r2, pc, #4	@ (adr r2, 8000b40 <main+0xe0>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000b51 	.word	0x08000b51
 8000b44:	08000b51 	.word	0x08000b51
 8000b48:	08000b51 	.word	0x08000b51
 8000b4c:	08000b51 	.word	0x08000b51
			break;
		}
		default:
		{

			break;
 8000b50:	bf00      	nop
		if(updateScreenRequest)//only perfrom LCD switch states on gpio change
 8000b52:	e7e4      	b.n	8000b1e <main+0xbe>
 8000b54:	20000080 	.word	0x20000080
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	200000dc 	.word	0x200000dc
 8000b60:	20000124 	.word	0x20000124
 8000b64:	3ff33333 	.word	0x3ff33333
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	200000b0 	.word	0x200000b0

08000b74 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	@ 0x50
 8000b78:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7e:	2228      	movs	r2, #40	@ 0x28
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 fb80 	bl	8004288 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fdfa 	bl	80027b0 <HAL_RCC_OscConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x52>
	{
		Error_Handler();
 8000bc2:	f000 f951 	bl	8000e68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 f867 	bl	8002cb4 <HAL_RCC_ClockConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 8000bec:	f000 f93c 	bl	8000e68 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 f9d4 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000c06:	f000 f92f 	bl	8000e68 <Error_Handler>
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3750      	adds	r7, #80	@ 0x50
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <DELAY_US>:

/* USER CODE BEGIN 4 */
void DELAY_US(uint16_t TIME_US)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
	uint32_t old_timer_value = TIM3->CNT;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <DELAY_US+0x54>)
 8000c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c22:	60fb      	str	r3, [r7, #12]
	uint32_t target_time = (old_timer_value + TIME_US) % (TIM3->ARR + 1);
 8000c24:	88fa      	ldrh	r2, [r7, #6]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c68 <DELAY_US+0x54>)
 8000c2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000c2e:	3201      	adds	r2, #1
 8000c30:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c34:	fb01 f202 	mul.w	r2, r1, r2
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]

	if (target_time < old_timer_value)  // Handle timer overflow
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d205      	bcs.n	8000c50 <DELAY_US+0x3c>
	{
		while (TIM3->CNT >= old_timer_value);  // Wait for overflow
 8000c44:	bf00      	nop
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <DELAY_US+0x54>)
 8000c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d9fa      	bls.n	8000c46 <DELAY_US+0x32>
	}

	while (TIM3->CNT < target_time);  // Wait until target time is reached
 8000c50:	bf00      	nop
 8000c52:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <DELAY_US+0x54>)
 8000c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8fa      	bhi.n	8000c52 <DELAY_US+0x3e>
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40000400 	.word	0x40000400

08000c6c <updateScreen>:
void updateScreen()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	static uint8_t place;
	updateScreenRequest = 0;
 8000c70:	4b55      	ldr	r3, [pc, #340]	@ (8000dc8 <updateScreen+0x15c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

	switch(STATE_MCU)
 8000c76:	4b55      	ldr	r3, [pc, #340]	@ (8000dcc <updateScreen+0x160>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	f200 809f 	bhi.w	8000dc0 <updateScreen+0x154>
 8000c82:	a201      	add	r2, pc, #4	@ (adr r2, 8000c88 <updateScreen+0x1c>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000c9d 	.word	0x08000c9d
 8000c8c:	08000ced 	.word	0x08000ced
 8000c90:	08000dc1 	.word	0x08000dc1
 8000c94:	08000dc1 	.word	0x08000dc1
 8000c98:	08000dc1 	.word	0x08000dc1
	{
	case  START:
	{
		LCD_Init();
 8000c9c:	f003 fa40 	bl	8004120 <LCD_Init>
		sprintf(LCD_buffer,"Battery analyzer");
 8000ca0:	494b      	ldr	r1, [pc, #300]	@ (8000dd0 <updateScreen+0x164>)
 8000ca2:	484c      	ldr	r0, [pc, #304]	@ (8000dd4 <updateScreen+0x168>)
 8000ca4:	f003 face 	bl	8004244 <siprintf>
		LCD_SEND_STR(LCD_buffer, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	4849      	ldr	r0, [pc, #292]	@ (8000dd4 <updateScreen+0x168>)
 8000cae:	f003 fa8f 	bl	80041d0 <LCD_SEND_STR>
		sprintf(LCD_buffer,"BatLinux");
 8000cb2:	4949      	ldr	r1, [pc, #292]	@ (8000dd8 <updateScreen+0x16c>)
 8000cb4:	4847      	ldr	r0, [pc, #284]	@ (8000dd4 <updateScreen+0x168>)
 8000cb6:	f003 fac5 	bl	8004244 <siprintf>
		place = (LCD_COLS-strlen(LCD_buffer))/2;
 8000cba:	4846      	ldr	r0, [pc, #280]	@ (8000dd4 <updateScreen+0x168>)
 8000cbc:	f7ff fa46 	bl	800014c <strlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f1c3 0310 	rsb	r3, r3, #16
 8000cc6:	085b      	lsrs	r3, r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b44      	ldr	r3, [pc, #272]	@ (8000ddc <updateScreen+0x170>)
 8000ccc:	701a      	strb	r2, [r3, #0]
		LCD_SEND_STR(LCD_buffer, place, 1);
 8000cce:	4b43      	ldr	r3, [pc, #268]	@ (8000ddc <updateScreen+0x170>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	483f      	ldr	r0, [pc, #252]	@ (8000dd4 <updateScreen+0x168>)
 8000cd8:	f003 fa7a 	bl	80041d0 <LCD_SEND_STR>
		HAL_Delay(1000);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ce0:	f000 fb44 	bl	800136c <HAL_Delay>
		STATE_MCU = SETUP;
 8000ce4:	4b39      	ldr	r3, [pc, #228]	@ (8000dcc <updateScreen+0x160>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
		break;
 8000cea:	e06a      	b.n	8000dc2 <updateScreen+0x156>
	}
	case  SETUP:
	{
		switch(SETUP_CONFIGURATION)
 8000cec:	4b3c      	ldr	r3, [pc, #240]	@ (8000de0 <updateScreen+0x174>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <updateScreen+0x90>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d02f      	beq.n	8000d5a <updateScreen+0xee>
 8000cfa:	e05d      	b.n	8000db8 <updateScreen+0x14c>
		{
		case(SETUP_PARAM_DISCHARGE_CURRENT):
		{
			sprintf(LCD_buffer,"Current, mA");
 8000cfc:	4939      	ldr	r1, [pc, #228]	@ (8000de4 <updateScreen+0x178>)
 8000cfe:	4835      	ldr	r0, [pc, #212]	@ (8000dd4 <updateScreen+0x168>)
 8000d00:	f003 faa0 	bl	8004244 <siprintf>
			place = (LCD_COLS-strlen(LCD_buffer))/2;
 8000d04:	4833      	ldr	r0, [pc, #204]	@ (8000dd4 <updateScreen+0x168>)
 8000d06:	f7ff fa21 	bl	800014c <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f1c3 0310 	rsb	r3, r3, #16
 8000d10:	085b      	lsrs	r3, r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b31      	ldr	r3, [pc, #196]	@ (8000ddc <updateScreen+0x170>)
 8000d16:	701a      	strb	r2, [r3, #0]
			LCD_SEND_STR(LCD_buffer,place, 0);
 8000d18:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <updateScreen+0x170>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	482c      	ldr	r0, [pc, #176]	@ (8000dd4 <updateScreen+0x168>)
 8000d22:	f003 fa55 	bl	80041d0 <LCD_SEND_STR>

			sprintf(LCD_buffer,"%d",Discharge_current);
 8000d26:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <updateScreen+0x17c>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	492f      	ldr	r1, [pc, #188]	@ (8000dec <updateScreen+0x180>)
 8000d30:	4828      	ldr	r0, [pc, #160]	@ (8000dd4 <updateScreen+0x168>)
 8000d32:	f003 fa87 	bl	8004244 <siprintf>
			place = (LCD_COLS-strlen(LCD_buffer))/2;
 8000d36:	4827      	ldr	r0, [pc, #156]	@ (8000dd4 <updateScreen+0x168>)
 8000d38:	f7ff fa08 	bl	800014c <strlen>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f1c3 0310 	rsb	r3, r3, #16
 8000d42:	085b      	lsrs	r3, r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <updateScreen+0x170>)
 8000d48:	701a      	strb	r2, [r3, #0]
			LCD_SEND_STR(LCD_buffer,place, 1);
 8000d4a:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <updateScreen+0x170>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4619      	mov	r1, r3
 8000d52:	4820      	ldr	r0, [pc, #128]	@ (8000dd4 <updateScreen+0x168>)
 8000d54:	f003 fa3c 	bl	80041d0 <LCD_SEND_STR>
			break;
 8000d58:	e031      	b.n	8000dbe <updateScreen+0x152>
		}
		case(SETUP_PARAM_CUTOFF_VOLTAGE):
		{
			sprintf(LCD_buffer,"Voltage, V");
 8000d5a:	4925      	ldr	r1, [pc, #148]	@ (8000df0 <updateScreen+0x184>)
 8000d5c:	481d      	ldr	r0, [pc, #116]	@ (8000dd4 <updateScreen+0x168>)
 8000d5e:	f003 fa71 	bl	8004244 <siprintf>
			place = (LCD_COLS-strlen(LCD_buffer))/2;
 8000d62:	481c      	ldr	r0, [pc, #112]	@ (8000dd4 <updateScreen+0x168>)
 8000d64:	f7ff f9f2 	bl	800014c <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f1c3 0310 	rsb	r3, r3, #16
 8000d6e:	085b      	lsrs	r3, r3, #1
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <updateScreen+0x170>)
 8000d74:	701a      	strb	r2, [r3, #0]
			LCD_SEND_STR(LCD_buffer,place, 0);
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <updateScreen+0x170>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4815      	ldr	r0, [pc, #84]	@ (8000dd4 <updateScreen+0x168>)
 8000d80:	f003 fa26 	bl	80041d0 <LCD_SEND_STR>

			sprintf(LCD_buffer,"%d",Cutoff_voltage);
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <updateScreen+0x188>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4917      	ldr	r1, [pc, #92]	@ (8000dec <updateScreen+0x180>)
 8000d8e:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <updateScreen+0x168>)
 8000d90:	f003 fa58 	bl	8004244 <siprintf>
			place = (LCD_COLS-strlen(LCD_buffer))/2;
 8000d94:	480f      	ldr	r0, [pc, #60]	@ (8000dd4 <updateScreen+0x168>)
 8000d96:	f7ff f9d9 	bl	800014c <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f1c3 0310 	rsb	r3, r3, #16
 8000da0:	085b      	lsrs	r3, r3, #1
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <updateScreen+0x170>)
 8000da6:	701a      	strb	r2, [r3, #0]
			LCD_SEND_STR(LCD_buffer,place, 1);
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <updateScreen+0x170>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2201      	movs	r2, #1
 8000dae:	4619      	mov	r1, r3
 8000db0:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <updateScreen+0x168>)
 8000db2:	f003 fa0d 	bl	80041d0 <LCD_SEND_STR>
			break;
 8000db6:	e002      	b.n	8000dbe <updateScreen+0x152>
		}
		default:
			LCD_CLEAR();
 8000db8:	f003 f9aa 	bl	8004110 <LCD_CLEAR>
			break;
 8000dbc:	bf00      	nop
		}
		break;
 8000dbe:	e000      	b.n	8000dc2 <updateScreen+0x156>
		break;
	}
	default:
	{

		break;
 8000dc0:	bf00      	nop
	}
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	200000b0 	.word	0x200000b0
 8000dd0:	08004bbc 	.word	0x08004bbc
 8000dd4:	200000b4 	.word	0x200000b4
 8000dd8:	08004bd0 	.word	0x08004bd0
 8000ddc:	200000d6 	.word	0x200000d6
 8000de0:	200000b1 	.word	0x200000b1
 8000de4:	08004bdc 	.word	0x08004bdc
 8000de8:	20000006 	.word	0x20000006
 8000dec:	08004be8 	.word	0x08004be8
 8000df0:	08004bec 	.word	0x08004bec
 8000df4:	200000d4 	.word	0x200000d4

08000df8 <HAL_GPIO_EXTI_Callback>:
//INTERRUPT CALLBACKS

//EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	//test what button is pressed
	if(STATE_MCU != SETUP)
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <HAL_GPIO_EXTI_Callback+0x64>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d11c      	bne.n	8000e46 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		return;
	}
	switch(GPIO_Pin)
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e12:	d01a      	beq.n	8000e4a <HAL_GPIO_EXTI_Callback+0x52>
 8000e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e18:	dc19      	bgt.n	8000e4e <HAL_GPIO_EXTI_Callback+0x56>
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_EXTI_Callback+0x2e>
 8000e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e22:	d016      	beq.n	8000e52 <HAL_GPIO_EXTI_Callback+0x5a>
		break;
					}
	default:
	{

		break;
 8000e24:	e013      	b.n	8000e4e <HAL_GPIO_EXTI_Callback+0x56>
		updateScreenRequest = 1;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
		SETUP_CONFIGURATION = 	(SETUP_CONFIGURATION+1)%SETUP_PARAM_COUNT;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	bfb8      	it	lt
 8000e3c:	425b      	neglt	r3, r3
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e42:	701a      	strb	r2, [r3, #0]
		break;
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_EXTI_Callback+0x5c>
		return;
 8000e46:	bf00      	nop
 8000e48:	e004      	b.n	8000e54 <HAL_GPIO_EXTI_Callback+0x5c>
		break;
 8000e4a:	bf00      	nop
 8000e4c:	e002      	b.n	8000e54 <HAL_GPIO_EXTI_Callback+0x5c>
		break;
 8000e4e:	bf00      	nop
 8000e50:	e000      	b.n	8000e54 <HAL_GPIO_EXTI_Callback+0x5c>
		break;
 8000e52:	bf00      	nop
	}
	}
}
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	200000b0 	.word	0x200000b0
 8000e60:	20000004 	.word	0x20000004
 8000e64:	200000b1 	.word	0x200000b1

08000e68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x8>

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_MspInit+0x60>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <HAL_MspInit+0x60>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <NMI_Handler+0x4>

08000ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <UsageFault_Handler+0x4>

08000f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 fa04 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_mode_Pin);
 8000f34:	2002      	movs	r0, #2
 8000f36:	f001 fc23 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <ADC1_2_IRQHandler+0x10>)
 8000f46:	f000 fb0d 	bl	8001564 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000080 	.word	0x20000080

08000f54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <TIM4_IRQHandler+0x10>)
 8000f5a:	f002 fa8b 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000124 	.word	0x20000124

08000f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_add_Pin);
 8000f6c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f70:	f001 fc06 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_sub_Pin);
 8000f74:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f78:	f001 fc02 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f003 f972 	bl	8004298 <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20005000 	.word	0x20005000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	200000d8 	.word	0x200000d8
 8000fe8:	200002c0 	.word	0x200002c0

08000fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_TIM3_Init+0x94>)
 8001016:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <MX_TIM3_Init+0x98>)
 8001018:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_TIM3_Init+0x94>)
 800101c:	2207      	movs	r2, #7
 800101e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_TIM3_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_TIM3_Init+0x94>)
 8001028:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800102c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_TIM3_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_TIM3_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800103a:	4814      	ldr	r0, [pc, #80]	@ (800108c <MX_TIM3_Init+0x94>)
 800103c:	f002 f920 	bl	8003280 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001046:	f7ff ff0f 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_TIM3_Init+0x94>)
 8001058:	f002 fbbe 	bl	80037d8 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001062:	f7ff ff01 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001066:	2320      	movs	r3, #32
 8001068:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_TIM3_Init+0x94>)
 8001074:	f002 ff30 	bl	8003ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800107e:	f7ff fef3 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000dc 	.word	0x200000dc
 8001090:	40000400 	.word	0x40000400

08001094 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	@ 0x38
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010c6:	4a2d      	ldr	r2, [pc, #180]	@ (800117c <MX_TIM4_Init+0xe8>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 80010d6:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010d8:	22c7      	movs	r2, #199	@ 0xc7
 80010da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010e8:	4823      	ldr	r0, [pc, #140]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010ea:	f002 f8c9 	bl	8003280 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80010f4:	f7ff feb8 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001102:	4619      	mov	r1, r3
 8001104:	481c      	ldr	r0, [pc, #112]	@ (8001178 <MX_TIM4_Init+0xe4>)
 8001106:	f002 fb67 	bl	80037d8 <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001110:	f7ff feaa 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001114:	4818      	ldr	r0, [pc, #96]	@ (8001178 <MX_TIM4_Init+0xe4>)
 8001116:	f002 f955 	bl	80033c4 <HAL_TIM_PWM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001120:	f7ff fea2 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	4619      	mov	r1, r3
 8001132:	4811      	ldr	r0, [pc, #68]	@ (8001178 <MX_TIM4_Init+0xe4>)
 8001134:	f002 fed0 	bl	8003ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800113e:	f7ff fe93 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001142:	2360      	movs	r3, #96	@ 0x60
 8001144:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	220c      	movs	r2, #12
 8001156:	4619      	mov	r1, r3
 8001158:	4807      	ldr	r0, [pc, #28]	@ (8001178 <MX_TIM4_Init+0xe4>)
 800115a:	f002 fa7b 	bl	8003654 <HAL_TIM_PWM_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001164:	f7ff fe80 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001168:	4803      	ldr	r0, [pc, #12]	@ (8001178 <MX_TIM4_Init+0xe4>)
 800116a:	f000 f843 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 800116e:	bf00      	nop
 8001170:	3738      	adds	r7, #56	@ 0x38
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000124 	.word	0x20000124
 800117c:	40000800 	.word	0x40000800

08001180 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a16      	ldr	r2, [pc, #88]	@ (80011e8 <HAL_TIM_Base_MspInit+0x68>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10c      	bne.n	80011ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_TIM_Base_MspInit+0x6c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <HAL_TIM_Base_MspInit+0x6c>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <HAL_TIM_Base_MspInit+0x6c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011aa:	e018      	b.n	80011de <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <HAL_TIM_Base_MspInit+0x70>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d113      	bne.n	80011de <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_TIM_Base_MspInit+0x6c>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <HAL_TIM_Base_MspInit+0x6c>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_TIM_Base_MspInit+0x6c>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	201e      	movs	r0, #30
 80011d4:	f001 f901 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011d8:	201e      	movs	r0, #30
 80011da:	f001 f91a 	bl	8002412 <HAL_NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40000800 	.word	0x40000800

080011f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a10      	ldr	r2, [pc, #64]	@ (8001250 <HAL_TIM_MspPostInit+0x5c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d118      	bne.n	8001246 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_TIM_MspPostInit+0x60>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_TIM_MspPostInit+0x60>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_TIM_MspPostInit+0x60>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_MOSFET_Pin;
 800122c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2302      	movs	r3, #2
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_MOSFET_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	@ (8001258 <HAL_TIM_MspPostInit+0x64>)
 8001242:	f001 f901 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40000800 	.word	0x40000800
 8001254:	40021000 	.word	0x40021000
 8001258:	40010c00 	.word	0x40010c00

0800125c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800125c:	f7ff fec6 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480b      	ldr	r0, [pc, #44]	@ (8001290 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001262:	490c      	ldr	r1, [pc, #48]	@ (8001294 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001264:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a09      	ldr	r2, [pc, #36]	@ (800129c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001278:	4c09      	ldr	r4, [pc, #36]	@ (80012a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001286:	f003 f80d 	bl	80042a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128a:	f7ff fbe9 	bl	8000a60 <main>
  bx lr
 800128e:	4770      	bx	lr
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001298:	08004c7c 	.word	0x08004c7c
  ldr r2, =_sbss
 800129c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80012a0:	200002bc 	.word	0x200002bc

080012a4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <CAN1_RX1_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <HAL_Init+0x28>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <HAL_Init+0x28>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f001 f883 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	200f      	movs	r0, #15
 80012c0:	f000 f808 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fdd6 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40022000 	.word	0x40022000

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 f89b 	bl	800242e <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f001 f863 	bl	80023da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	@ (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000008 	.word	0x20000008
 800132c:	20000010 	.word	0x20000010
 8001330:	2000000c 	.word	0x2000000c

08001334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_IncTick+0x1c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_IncTick+0x20>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a03      	ldr	r2, [pc, #12]	@ (8001354 <HAL_IncTick+0x20>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000010 	.word	0x20000010
 8001354:	2000016c 	.word	0x2000016c

08001358 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b02      	ldr	r3, [pc, #8]	@ (8001368 <HAL_GetTick+0x10>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	2000016c 	.word	0x2000016c

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff fff0 	bl	8001358 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001392:	bf00      	nop
 8001394:	f7ff ffe0 	bl	8001358 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000010 	.word	0x20000010

080013b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0be      	b.n	8001554 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d109      	bne.n	80013f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fa4c 	bl	8000890 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fad7 	bl	80019ac <ADC_ConversionStop_Disable>
 80013fe:	4603      	mov	r3, r0
 8001400:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 8099 	bne.w	8001542 <HAL_ADC_Init+0x18e>
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 8095 	bne.w	8001542 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001420:	f023 0302 	bic.w	r3, r3, #2
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001434:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7b1b      	ldrb	r3, [r3, #12]
 800143a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800143c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	4313      	orrs	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800144c:	d003      	beq.n	8001456 <HAL_ADC_Init+0xa2>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d102      	bne.n	800145c <HAL_ADC_Init+0xa8>
 8001456:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800145a:	e000      	b.n	800145e <HAL_ADC_Init+0xaa>
 800145c:	2300      	movs	r3, #0
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7d1b      	ldrb	r3, [r3, #20]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d119      	bne.n	80014a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7b1b      	ldrb	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d109      	bne.n	8001488 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	3b01      	subs	r3, #1
 800147a:	035a      	lsls	r2, r3, #13
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	e00b      	b.n	80014a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148c:	f043 0220 	orr.w	r2, r3, #32
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001498:	f043 0201 	orr.w	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	4b28      	ldr	r3, [pc, #160]	@ (800155c <HAL_ADC_Init+0x1a8>)
 80014bc:	4013      	ands	r3, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014d0:	d003      	beq.n	80014da <HAL_ADC_Init+0x126>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d104      	bne.n	80014e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	3b01      	subs	r3, #1
 80014e0:	051b      	lsls	r3, r3, #20
 80014e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <HAL_ADC_Init+0x1ac>)
 8001500:	4013      	ands	r3, r2
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	429a      	cmp	r2, r3
 8001506:	d10b      	bne.n	8001520 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800151e:	e018      	b.n	8001552 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001524:	f023 0312 	bic.w	r3, r3, #18
 8001528:	f043 0210 	orr.w	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001540:	e007      	b.n	8001552 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001546:	f043 0210 	orr.w	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001552:	7dfb      	ldrb	r3, [r7, #23]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	ffe1f7fd 	.word	0xffe1f7fd
 8001560:	ff1f0efe 	.word	0xff1f0efe

08001564 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	2b00      	cmp	r3, #0
 8001584:	d03e      	beq.n	8001604 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d039      	beq.n	8001604 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015b6:	d11d      	bne.n	80015f4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d119      	bne.n	80015f4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0220 	bic.w	r2, r2, #32
 80015ce:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d105      	bne.n	80015f4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f874 	bl	80016e2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f06f 0212 	mvn.w	r2, #18
 8001602:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160a:	2b00      	cmp	r3, #0
 800160c:	d04d      	beq.n	80016aa <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d048      	beq.n	80016aa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800163a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800163e:	d012      	beq.n	8001666 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800164a:	2b00      	cmp	r3, #0
 800164c:	d125      	bne.n	800169a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001658:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800165c:	d11d      	bne.n	800169a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d119      	bne.n	800169a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001674:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d105      	bne.n	800169a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fc22 	bl	8001ee4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 020c 	mvn.w	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d012      	beq.n	80016da <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00d      	beq.n	80016da <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f812 	bl	80016f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0201 	mvn.w	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
	...

08001708 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x20>
 8001724:	2302      	movs	r3, #2
 8001726:	e0dc      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x1da>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b06      	cmp	r3, #6
 8001736:	d81c      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b05      	subs	r3, #5
 800174a:	221f      	movs	r2, #31
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	4019      	ands	r1, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b05      	subs	r3, #5
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001770:	e03c      	b.n	80017ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d81c      	bhi.n	80017b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b23      	subs	r3, #35	@ 0x23
 800178c:	221f      	movs	r2, #31
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	4019      	ands	r1, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b23      	subs	r3, #35	@ 0x23
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80017b2:	e01b      	b.n	80017ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b41      	subs	r3, #65	@ 0x41
 80017c6:	221f      	movs	r2, #31
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4019      	ands	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b41      	subs	r3, #65	@ 0x41
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b09      	cmp	r3, #9
 80017f2:	d91c      	bls.n	800182e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68d9      	ldr	r1, [r3, #12]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	3b1e      	subs	r3, #30
 8001806:	2207      	movs	r2, #7
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4019      	ands	r1, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6898      	ldr	r0, [r3, #8]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	3b1e      	subs	r3, #30
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	e019      	b.n	8001862 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6919      	ldr	r1, [r3, #16]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	2207      	movs	r2, #7
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6898      	ldr	r0, [r3, #8]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	fa00 f203 	lsl.w	r2, r0, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b10      	cmp	r3, #16
 8001868:	d003      	beq.n	8001872 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800186e:	2b11      	cmp	r3, #17
 8001870:	d132      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <HAL_ADC_ConfigChannel+0x1e4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d125      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d126      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001898:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d11a      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a13      	ldr	r2, [pc, #76]	@ (80018f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	0c9a      	lsrs	r2, r3, #18
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b8:	e002      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x1b2>
 80018c6:	e007      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018cc:	f043 0220 	orr.w	r2, r3, #32
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40012400 	.word	0x40012400
 80018f0:	20000008 	.word	0x20000008
 80018f4:	431bde83 	.word	0x431bde83

080018f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d040      	beq.n	8001998 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <ADC_Enable+0xac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1f      	ldr	r2, [pc, #124]	@ (80019a8 <ADC_Enable+0xb0>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	0c9b      	lsrs	r3, r3, #18
 8001932:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001934:	e002      	b.n	800193c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3b01      	subs	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001942:	f7ff fd09 	bl	8001358 <HAL_GetTick>
 8001946:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001948:	e01f      	b.n	800198a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800194a:	f7ff fd05 	bl	8001358 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d918      	bls.n	800198a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d011      	beq.n	800198a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196a:	f043 0210 	orr.w	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e007      	b.n	800199a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d1d8      	bne.n	800194a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008
 80019a8:	431bde83 	.word	0x431bde83

080019ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d12e      	bne.n	8001a24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019d6:	f7ff fcbf 	bl	8001358 <HAL_GetTick>
 80019da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019dc:	e01b      	b.n	8001a16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019de:	f7ff fcbb 	bl	8001358 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d914      	bls.n	8001a16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d10d      	bne.n	8001a16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	f043 0210 	orr.w	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e007      	b.n	8001a26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d0dc      	beq.n	80019de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADCEx_Calibration_Start+0x1e>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e097      	b.n	8001b7e <HAL_ADCEx_Calibration_Start+0x14e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa8 	bl	80019ac <ADC_ConversionStop_Disable>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff49 	bl	80018f8 <ADC_Enable>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f040 8081 	bne.w	8001b74 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a7a:	f023 0302 	bic.w	r3, r3, #2
 8001a7e:	f043 0202 	orr.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a86:	4b40      	ldr	r3, [pc, #256]	@ (8001b88 <HAL_ADCEx_Calibration_Start+0x158>)
 8001a88:	681c      	ldr	r4, [r3, #0]
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f001 fb42 	bl	8003114 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a90:	4603      	mov	r3, r0
 8001a92:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001a96:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001a98:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001a9a:	e002      	b.n	8001aa2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0208 	orr.w	r2, r2, #8
 8001ab6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ab8:	f7ff fc4e 	bl	8001358 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001abe:	e01b      	b.n	8001af8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ac0:	f7ff fc4a 	bl	8001358 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	d914      	bls.n	8001af8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00d      	beq.n	8001af8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	f023 0312 	bic.w	r3, r3, #18
 8001ae4:	f043 0210 	orr.w	r2, r3, #16
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e042      	b.n	8001b7e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1dc      	bne.n	8001ac0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0204 	orr.w	r2, r2, #4
 8001b14:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b16:	f7ff fc1f 	bl	8001358 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b1c:	e01b      	b.n	8001b56 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b1e:	f7ff fc1b 	bl	8001358 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b0a      	cmp	r3, #10
 8001b2a:	d914      	bls.n	8001b56 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00d      	beq.n	8001b56 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3e:	f023 0312 	bic.w	r3, r3, #18
 8001b42:	f043 0210 	orr.w	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e013      	b.n	8001b7e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1dc      	bne.n	8001b1e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	f023 0303 	bic.w	r3, r3, #3
 8001b6c:	f043 0201 	orr.w	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	371c      	adds	r7, #28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_ADCEx_InjectedStart>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADCEx_InjectedStart+0x1a>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e070      	b.n	8001c88 <HAL_ADCEx_InjectedStart+0xfc>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fea2 	bl	80018f8 <ADC_Enable>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d15f      	bne.n	8001c7e <HAL_ADCEx_InjectedStart+0xf2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c90 <HAL_ADCEx_InjectedStart+0x104>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d105      	bne.n	8001be8 <HAL_ADCEx_InjectedStart+0x5c>
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <HAL_ADCEx_InjectedStart+0x108>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d106      	bne.n	8001bf6 <HAL_ADCEx_InjectedStart+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bf4:	e005      	b.n	8001c02 <HAL_ADCEx_InjectedStart+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d102      	bne.n	8001c14 <HAL_ADCEx_InjectedStart+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0204 	mvn.w	r2, #4
 8001c24:	601a      	str	r2, [r3, #0]
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
    /* slave, ADC is enabled only (conversion is not started). If ADC is      */
    /* master, ADC is enabled and conversion is started.                      */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d128      	bne.n	8001c86 <HAL_ADCEx_InjectedStart+0xfa>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001c3e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001c42:	d113      	bne.n	8001c6c <HAL_ADCEx_InjectedStart+0xe0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001c48:	4a11      	ldr	r2, [pc, #68]	@ (8001c90 <HAL_ADCEx_InjectedStart+0x104>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d105      	bne.n	8001c5a <HAL_ADCEx_InjectedStart+0xce>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <HAL_ADCEx_InjectedStart+0x108>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <HAL_ADCEx_InjectedStart+0xe0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 1202 	orr.w	r2, r2, #2129920	@ 0x208000
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	e00c      	b.n	8001c86 <HAL_ADCEx_InjectedStart+0xfa>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	e003      	b.n	8001c86 <HAL_ADCEx_InjectedStart+0xfa>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40012800 	.word	0x40012800
 8001c94:	40012400 	.word	0x40012400

08001c98 <HAL_ADCEx_InjectedPollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Get timeout */
  tickstart = HAL_GetTick();  
 8001caa:	f7ff fb55 	bl	8001358 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag JEOC is not set after each conversion, no timeout status can  */
  /*    be set.                                                               */
  if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d12a      	bne.n	8001d14 <HAL_ADCEx_InjectedPollForConversion+0x7c>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 8001cbe:	e021      	b.n	8001d04 <HAL_ADCEx_InjectedPollForConversion+0x6c>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc6:	d01d      	beq.n	8001d04 <HAL_ADCEx_InjectedPollForConversion+0x6c>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_ADCEx_InjectedPollForConversion+0x46>
 8001cce:	f7ff fb43 	bl	8001358 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d212      	bcs.n	8001d04 <HAL_ADCEx_InjectedPollForConversion+0x6c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10b      	bne.n	8001d04 <HAL_ADCEx_InjectedPollForConversion+0x6c>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	f043 0204 	orr.w	r2, r3, #4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0b1      	b.n	8001e68 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0d6      	beq.n	8001cc0 <HAL_ADCEx_InjectedPollForConversion+0x28>
 8001d12:	e070      	b.n	8001df6 <HAL_ADCEx_InjectedPollForConversion+0x15e>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d14:	4b56      	ldr	r3, [pc, #344]	@ (8001e70 <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 8001d16:	681c      	ldr	r4, [r3, #0]
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f001 f9fb 	bl	8003114 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6919      	ldr	r1, [r3, #16]
 8001d2a:	4b52      	ldr	r3, [pc, #328]	@ (8001e74 <HAL_ADCEx_InjectedPollForConversion+0x1dc>)
 8001d2c:	400b      	ands	r3, r1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68d9      	ldr	r1, [r3, #12]
 8001d38:	4b4f      	ldr	r3, [pc, #316]	@ (8001e78 <HAL_ADCEx_InjectedPollForConversion+0x1e0>)
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6919      	ldr	r1, [r3, #16]
 8001d46:	4b4d      	ldr	r3, [pc, #308]	@ (8001e7c <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 8001d48:	400b      	ands	r3, r1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d108      	bne.n	8001d60 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68d9      	ldr	r1, [r3, #12]
 8001d54:	4b4a      	ldr	r3, [pc, #296]	@ (8001e80 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 8001d56:	400b      	ands	r3, r1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 8001d5c:	2314      	movs	r3, #20
 8001d5e:	e020      	b.n	8001da2 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8001d60:	2329      	movs	r3, #41	@ 0x29
 8001d62:	e01e      	b.n	8001da2 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6919      	ldr	r1, [r3, #16]
 8001d6a:	4b44      	ldr	r3, [pc, #272]	@ (8001e7c <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 8001d6c:	400b      	ands	r3, r1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_ADCEx_InjectedPollForConversion+0xe8>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68d9      	ldr	r1, [r3, #12]
 8001d78:	4b41      	ldr	r3, [pc, #260]	@ (8001e80 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00d      	beq.n	8001d9c <HAL_ADCEx_InjectedPollForConversion+0x104>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6919      	ldr	r1, [r3, #16]
 8001d86:	4b3f      	ldr	r3, [pc, #252]	@ (8001e84 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 8001d88:	400b      	ands	r3, r1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d108      	bne.n	8001da0 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68d9      	ldr	r1, [r3, #12]
 8001d94:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 8001d96:	400b      	ands	r3, r1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8001d9c:	2354      	movs	r3, #84	@ 0x54
 8001d9e:	e000      	b.n	8001da2 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8001da0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	617b      	str	r3, [r7, #20]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001da8:	e021      	b.n	8001dee <HAL_ADCEx_InjectedPollForConversion+0x156>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d01a      	beq.n	8001de8 <HAL_ADCEx_InjectedPollForConversion+0x150>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_ADCEx_InjectedPollForConversion+0x130>
 8001db8:	f7ff face 	bl	8001358 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d20f      	bcs.n	8001de8 <HAL_ADCEx_InjectedPollForConversion+0x150>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d90b      	bls.n	8001de8 <HAL_ADCEx_InjectedPollForConversion+0x150>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd4:	f043 0204 	orr.w	r2, r3, #4
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e03f      	b.n	8001e68 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3301      	adds	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d8d9      	bhi.n	8001daa <HAL_ADCEx_InjectedPollForConversion+0x112>
  }

  /* Clear injected group conversion flag */
  /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
  /* simultaneously.                                                          */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 020e 	mvn.w	r2, #14
 8001dfe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001e16:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001e1a:	d012      	beq.n	8001e42 <HAL_ADCEx_InjectedPollForConversion+0x1aa>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d11d      	bne.n	8001e66 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e34:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e38:	d115      	bne.n	8001e66 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
      (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7b1b      	ldrb	r3, [r3, #12]
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d111      	bne.n	8001e66 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_ADCEx_InjectedPollForConversion+0x1ce>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	20000008 	.word	0x20000008
 8001e74:	24924924 	.word	0x24924924
 8001e78:	00924924 	.word	0x00924924
 8001e7c:	12492492 	.word	0x12492492
 8001e80:	00492492 	.word	0x00492492
 8001e84:	00249249 	.word	0x00249249

08001e88 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d009      	beq.n	8001eb0 <HAL_ADCEx_InjectedGetValue+0x28>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d815      	bhi.n	8001ece <HAL_ADCEx_InjectedGetValue+0x46>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_ADCEx_InjectedGetValue+0x3c>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d005      	beq.n	8001eba <HAL_ADCEx_InjectedGetValue+0x32>
 8001eae:	e00e      	b.n	8001ece <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb6:	60fb      	str	r3, [r7, #12]
      break;
 8001eb8:	e00e      	b.n	8001ed8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec0:	60fb      	str	r3, [r7, #12]
      break;
 8001ec2:	e009      	b.n	8001ed8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	60fb      	str	r3, [r7, #12]
      break;
 8001ecc:	e004      	b.n	8001ed8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed4:	60fb      	str	r3, [r7, #12]
      break;
 8001ed6:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001ef8:	b490      	push	{r4, r7}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e17d      	b.n	8002214 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d119      	bne.n	8001f5c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10c      	bne.n	8001f4a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f36:	0d9b      	lsrs	r3, r3, #22
 8001f38:	059b      	lsls	r3, r3, #22
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	03d1      	lsls	r1, r2, #15
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6393      	str	r3, [r2, #56]	@ 0x38
 8001f48:	e04f      	b.n	8001fea <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4e:	f043 0220 	orr.w	r2, r3, #32
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e046      	b.n	8001fea <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d82a      	bhi.n	8001fbe <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	1ad2      	subs	r2, r2, r3
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	330f      	adds	r3, #15
 8001f80:	221f      	movs	r2, #31
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4019      	ands	r1, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	0518      	lsls	r0, r3, #20
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681c      	ldr	r4, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	1ad2      	subs	r2, r2, r3
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	330f      	adds	r3, #15
 8001fac:	fa04 f303 	lsl.w	r3, r4, r3
 8001fb0:	ea40 0203 	orr.w	r2, r0, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fbc:	e015      	b.n	8001fea <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	330f      	adds	r3, #15
 8001fd6:	221f      	movs	r2, #31
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d00c      	beq.n	8002012 <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	6991      	ldr	r1, [r2, #24]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	430b      	orrs	r3, r1
 8002010:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	7d5b      	ldrb	r3, [r3, #21]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d115      	bne.n	8002046 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002022:	d108      	bne.n	8002036 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	e007      	b.n	8002046 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	7d1b      	ldrb	r3, [r3, #20]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d114      	bne.n	8002078 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	7d5b      	ldrb	r3, [r3, #21]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	e007      	b.n	8002078 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b09      	cmp	r3, #9
 800207e:	d91c      	bls.n	80020ba <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68d9      	ldr	r1, [r3, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	3b1e      	subs	r3, #30
 8002092:	2207      	movs	r2, #7
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	4019      	ands	r1, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6898      	ldr	r0, [r3, #8]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	3b1e      	subs	r3, #30
 80020ac:	fa00 f203 	lsl.w	r2, r0, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	e019      	b.n	80020ee <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6919      	ldr	r1, [r3, #16]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	2207      	movs	r2, #7
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4019      	ands	r1, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6898      	ldr	r0, [r3, #8]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	fa00 f203 	lsl.w	r2, r0, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d003      	beq.n	80020fe <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80020fa:	2b11      	cmp	r3, #17
 80020fc:	d107      	bne.n	800210e <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800210c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d022      	beq.n	800215c <HAL_ADCEx_InjectedConfigChannel+0x264>
 8002116:	2b03      	cmp	r3, #3
 8002118:	d82e      	bhi.n	8002178 <HAL_ADCEx_InjectedConfigChannel+0x280>
 800211a:	2b01      	cmp	r3, #1
 800211c:	d002      	beq.n	8002124 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 800211e:	2b02      	cmp	r3, #2
 8002120:	d00e      	beq.n	8002140 <HAL_ADCEx_InjectedConfigChannel+0x248>
 8002122:	e029      	b.n	8002178 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800212e:	f023 030f 	bic.w	r3, r3, #15
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	68d1      	ldr	r1, [r2, #12]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	430b      	orrs	r3, r1
 800213c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800213e:	e029      	b.n	8002194 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800214a:	f023 030f 	bic.w	r3, r3, #15
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	68d1      	ldr	r1, [r2, #12]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	430b      	orrs	r3, r1
 8002158:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800215a:	e01b      	b.n	8002194 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002166:	f023 030f 	bic.w	r3, r3, #15
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	68d1      	ldr	r1, [r2, #12]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	430b      	orrs	r3, r1
 8002174:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8002176:	e00d      	b.n	8002194 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002182:	f023 030f 	bic.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	68d1      	ldr	r1, [r2, #12]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	430b      	orrs	r3, r1
 8002190:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8002192:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b10      	cmp	r3, #16
 800219a:	d003      	beq.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80021a0:	2b11      	cmp	r3, #17
 80021a2:	d132      	bne.n	800220a <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002220 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d125      	bne.n	80021fa <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d126      	bne.n	800220a <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021ca:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	d11a      	bne.n	800220a <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d4:	4b13      	ldr	r3, [pc, #76]	@ (8002224 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a13      	ldr	r2, [pc, #76]	@ (8002228 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0c9a      	lsrs	r2, r3, #18
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021ea:	e002      	b.n	80021f2 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f9      	bne.n	80021ec <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 80021f8:	e007      	b.n	800220a <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bc90      	pop	{r4, r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40012400 	.word	0x40012400
 8002224:	20000008 	.word	0x20000008
 8002228:	431bde83 	.word	0x431bde83

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4906      	ldr	r1, [pc, #24]	@ (80022c4 <__NVIC_EnableIRQ+0x34>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	@ (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	@ (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	@ 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	@ 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff90 	bl	80022c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff2d 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff42 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff90 	bl	800231c <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5f 	bl	80022c8 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff35 	bl	8002290 <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffa2 	bl	8002380 <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b08b      	sub	sp, #44	@ 0x2c
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245a:	e169      	b.n	8002730 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800245c:	2201      	movs	r2, #1
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	429a      	cmp	r2, r3
 8002476:	f040 8158 	bne.w	800272a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4a9a      	ldr	r2, [pc, #616]	@ (80026e8 <HAL_GPIO_Init+0x2a0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d05e      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 8002484:	4a98      	ldr	r2, [pc, #608]	@ (80026e8 <HAL_GPIO_Init+0x2a0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d875      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 800248a:	4a98      	ldr	r2, [pc, #608]	@ (80026ec <HAL_GPIO_Init+0x2a4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d058      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 8002490:	4a96      	ldr	r2, [pc, #600]	@ (80026ec <HAL_GPIO_Init+0x2a4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d86f      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 8002496:	4a96      	ldr	r2, [pc, #600]	@ (80026f0 <HAL_GPIO_Init+0x2a8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d052      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 800249c:	4a94      	ldr	r2, [pc, #592]	@ (80026f0 <HAL_GPIO_Init+0x2a8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d869      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 80024a2:	4a94      	ldr	r2, [pc, #592]	@ (80026f4 <HAL_GPIO_Init+0x2ac>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d04c      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 80024a8:	4a92      	ldr	r2, [pc, #584]	@ (80026f4 <HAL_GPIO_Init+0x2ac>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d863      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 80024ae:	4a92      	ldr	r2, [pc, #584]	@ (80026f8 <HAL_GPIO_Init+0x2b0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d046      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 80024b4:	4a90      	ldr	r2, [pc, #576]	@ (80026f8 <HAL_GPIO_Init+0x2b0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d85d      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 80024ba:	2b12      	cmp	r3, #18
 80024bc:	d82a      	bhi.n	8002514 <HAL_GPIO_Init+0xcc>
 80024be:	2b12      	cmp	r3, #18
 80024c0:	d859      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 80024c2:	a201      	add	r2, pc, #4	@ (adr r2, 80024c8 <HAL_GPIO_Init+0x80>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	08002543 	.word	0x08002543
 80024cc:	0800251d 	.word	0x0800251d
 80024d0:	0800252f 	.word	0x0800252f
 80024d4:	08002571 	.word	0x08002571
 80024d8:	08002577 	.word	0x08002577
 80024dc:	08002577 	.word	0x08002577
 80024e0:	08002577 	.word	0x08002577
 80024e4:	08002577 	.word	0x08002577
 80024e8:	08002577 	.word	0x08002577
 80024ec:	08002577 	.word	0x08002577
 80024f0:	08002577 	.word	0x08002577
 80024f4:	08002577 	.word	0x08002577
 80024f8:	08002577 	.word	0x08002577
 80024fc:	08002577 	.word	0x08002577
 8002500:	08002577 	.word	0x08002577
 8002504:	08002577 	.word	0x08002577
 8002508:	08002577 	.word	0x08002577
 800250c:	08002525 	.word	0x08002525
 8002510:	08002539 	.word	0x08002539
 8002514:	4a79      	ldr	r2, [pc, #484]	@ (80026fc <HAL_GPIO_Init+0x2b4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800251a:	e02c      	b.n	8002576 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	623b      	str	r3, [r7, #32]
          break;
 8002522:	e029      	b.n	8002578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	3304      	adds	r3, #4
 800252a:	623b      	str	r3, [r7, #32]
          break;
 800252c:	e024      	b.n	8002578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	3308      	adds	r3, #8
 8002534:	623b      	str	r3, [r7, #32]
          break;
 8002536:	e01f      	b.n	8002578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	330c      	adds	r3, #12
 800253e:	623b      	str	r3, [r7, #32]
          break;
 8002540:	e01a      	b.n	8002578 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800254a:	2304      	movs	r3, #4
 800254c:	623b      	str	r3, [r7, #32]
          break;
 800254e:	e013      	b.n	8002578 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002558:	2308      	movs	r3, #8
 800255a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	611a      	str	r2, [r3, #16]
          break;
 8002562:	e009      	b.n	8002578 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002564:	2308      	movs	r3, #8
 8002566:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	615a      	str	r2, [r3, #20]
          break;
 800256e:	e003      	b.n	8002578 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002570:	2300      	movs	r3, #0
 8002572:	623b      	str	r3, [r7, #32]
          break;
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x130>
          break;
 8002576:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2bff      	cmp	r3, #255	@ 0xff
 800257c:	d801      	bhi.n	8002582 <HAL_GPIO_Init+0x13a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	e001      	b.n	8002586 <HAL_GPIO_Init+0x13e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2bff      	cmp	r3, #255	@ 0xff
 800258c:	d802      	bhi.n	8002594 <HAL_GPIO_Init+0x14c>
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	e002      	b.n	800259a <HAL_GPIO_Init+0x152>
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	3b08      	subs	r3, #8
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	210f      	movs	r1, #15
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	401a      	ands	r2, r3
 80025ac:	6a39      	ldr	r1, [r7, #32]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	431a      	orrs	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80b1 	beq.w	800272a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025e0:	4a48      	ldr	r2, [pc, #288]	@ (8002704 <HAL_GPIO_Init+0x2bc>)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a40      	ldr	r2, [pc, #256]	@ (8002708 <HAL_GPIO_Init+0x2c0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d013      	beq.n	8002634 <HAL_GPIO_Init+0x1ec>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3f      	ldr	r2, [pc, #252]	@ (800270c <HAL_GPIO_Init+0x2c4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00d      	beq.n	8002630 <HAL_GPIO_Init+0x1e8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a3e      	ldr	r2, [pc, #248]	@ (8002710 <HAL_GPIO_Init+0x2c8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <HAL_GPIO_Init+0x1e4>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3d      	ldr	r2, [pc, #244]	@ (8002714 <HAL_GPIO_Init+0x2cc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_GPIO_Init+0x1e0>
 8002624:	2303      	movs	r3, #3
 8002626:	e006      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002628:	2304      	movs	r3, #4
 800262a:	e004      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 800262c:	2302      	movs	r3, #2
 800262e:	e002      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002634:	2300      	movs	r3, #0
 8002636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002638:	f002 0203 	and.w	r2, r2, #3
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	4093      	lsls	r3, r2
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002646:	492f      	ldr	r1, [pc, #188]	@ (8002704 <HAL_GPIO_Init+0x2bc>)
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002660:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	492c      	ldr	r1, [pc, #176]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800266e:	4b2a      	ldr	r3, [pc, #168]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	43db      	mvns	r3, r3
 8002676:	4928      	ldr	r1, [pc, #160]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 8002678:	4013      	ands	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4922      	ldr	r1, [pc, #136]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	60cb      	str	r3, [r1, #12]
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	43db      	mvns	r3, r3
 800269e:	491e      	ldr	r1, [pc, #120]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4918      	ldr	r1, [pc, #96]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026be:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4914      	ldr	r1, [pc, #80]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d021      	beq.n	800271c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	490e      	ldr	r1, [pc, #56]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
 80026e4:	e021      	b.n	800272a <HAL_GPIO_Init+0x2e2>
 80026e6:	bf00      	nop
 80026e8:	10320000 	.word	0x10320000
 80026ec:	10310000 	.word	0x10310000
 80026f0:	10220000 	.word	0x10220000
 80026f4:	10210000 	.word	0x10210000
 80026f8:	10120000 	.word	0x10120000
 80026fc:	10110000 	.word	0x10110000
 8002700:	40021000 	.word	0x40021000
 8002704:	40010000 	.word	0x40010000
 8002708:	40010800 	.word	0x40010800
 800270c:	40010c00 	.word	0x40010c00
 8002710:	40011000 	.word	0x40011000
 8002714:	40011400 	.word	0x40011400
 8002718:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_GPIO_Init+0x304>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	43db      	mvns	r3, r3
 8002724:	4909      	ldr	r1, [pc, #36]	@ (800274c <HAL_GPIO_Init+0x304>)
 8002726:	4013      	ands	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	3301      	adds	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	f47f ae8e 	bne.w	800245c <HAL_GPIO_Init+0x14>
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	372c      	adds	r7, #44	@ 0x2c
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40010400 	.word	0x40010400

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	611a      	str	r2, [r3, #16]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800278a:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002796:	4a05      	ldr	r2, [pc, #20]	@ (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fb2a 	bl	8000df8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e272      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8087 	beq.w	80028de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d0:	4b92      	ldr	r3, [pc, #584]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027dc:	4b8f      	ldr	r3, [pc, #572]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d112      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
 80027e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f4:	d10b      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	4b89      	ldr	r3, [pc, #548]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d06c      	beq.n	80028dc <HAL_RCC_OscConfig+0x12c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d168      	bne.n	80028dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e24c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x76>
 8002818:	4b80      	ldr	r3, [pc, #512]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e02e      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x98>
 800282e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7a      	ldr	r2, [pc, #488]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b78      	ldr	r3, [pc, #480]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a77      	ldr	r2, [pc, #476]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002840:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0xbc>
 8002852:	4b72      	ldr	r3, [pc, #456]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a71      	ldr	r2, [pc, #452]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b6f      	ldr	r3, [pc, #444]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6e      	ldr	r2, [pc, #440]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 800286c:	4b6b      	ldr	r3, [pc, #428]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6a      	ldr	r2, [pc, #424]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b68      	ldr	r3, [pc, #416]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a67      	ldr	r2, [pc, #412]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fd64 	bl	8001358 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe fd60 	bl	8001358 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	@ 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e200      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xe4>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fd50 	bl	8001358 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fd4c 	bl	8001358 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1ec      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b53      	ldr	r3, [pc, #332]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x10c>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ea:	4b4c      	ldr	r3, [pc, #304]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028f6:	4b49      	ldr	r3, [pc, #292]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
 8002902:	4b46      	ldr	r3, [pc, #280]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b43      	ldr	r3, [pc, #268]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1c0      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b3d      	ldr	r3, [pc, #244]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4939      	ldr	r1, [pc, #228]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b36      	ldr	r3, [pc, #216]	@ (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe fd05 	bl	8001358 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe fd01 	bl	8001358 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1a1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b2a      	ldr	r3, [pc, #168]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4927      	ldr	r1, [pc, #156]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b26      	ldr	r3, [pc, #152]	@ (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fce4 	bl	8001358 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fce0 	bl	8001358 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e180      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d03a      	beq.n	8002a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fcc4 	bl	8001358 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fcc0 	bl	8001358 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e160      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029f2:	2001      	movs	r0, #1
 80029f4:	f000 faba 	bl	8002f6c <RCC_Delay>
 80029f8:	e01c      	b.n	8002a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fcaa 	bl	8001358 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a06:	e00f      	b.n	8002a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fca6 	bl	8001358 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d908      	bls.n	8002a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e146      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	42420000 	.word	0x42420000
 8002a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b92      	ldr	r3, [pc, #584]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e9      	bne.n	8002a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a6 	beq.w	8002b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b8b      	ldr	r3, [pc, #556]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b88      	ldr	r3, [pc, #544]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4a87      	ldr	r2, [pc, #540]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	61d3      	str	r3, [r2, #28]
 8002a5e:	4b85      	ldr	r3, [pc, #532]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b82      	ldr	r3, [pc, #520]	@ (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fc67 	bl	8001358 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe fc63 	bl	8001358 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	@ 0x64
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e103      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b75      	ldr	r3, [pc, #468]	@ (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x312>
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	e02d      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x334>
 8002aca:	4b6a      	ldr	r3, [pc, #424]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a69      	ldr	r2, [pc, #420]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6213      	str	r3, [r2, #32]
 8002ad6:	4b67      	ldr	r3, [pc, #412]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a66      	ldr	r2, [pc, #408]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	e01c      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x356>
 8002aec:	4b61      	ldr	r3, [pc, #388]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a60      	ldr	r2, [pc, #384]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002b06:	4b5b      	ldr	r3, [pc, #364]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	4b58      	ldr	r3, [pc, #352]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a57      	ldr	r2, [pc, #348]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fc17 	bl	8001358 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fc13 	bl	8001358 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0b1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b4b      	ldr	r3, [pc, #300]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCC_OscConfig+0x37e>
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7fe fc01 	bl	8001358 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fbfd 	bl	8001358 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e09b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	4b40      	ldr	r3, [pc, #256]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ee      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4b3c      	ldr	r3, [pc, #240]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4a3b      	ldr	r2, [pc, #236]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b98:	4b36      	ldr	r3, [pc, #216]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d061      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d146      	bne.n	8002c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b33      	ldr	r3, [pc, #204]	@ (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fbd1 	bl	8001358 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fbcd 	bl	8001358 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e06d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bcc:	4b29      	ldr	r3, [pc, #164]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be0:	d108      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002be2:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4921      	ldr	r1, [pc, #132]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a19      	ldr	r1, [r3, #32]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	430b      	orrs	r3, r1
 8002c06:	491b      	ldr	r1, [pc, #108]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe fba1 	bl	8001358 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe fb9d 	bl	8001358 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e03d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2c:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x46a>
 8002c38:	e035      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fb8a 	bl	8001358 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fb86 	bl	8001358 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e026      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5a:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x498>
 8002c66:	e01e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e019      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_RCC_OscConfig+0x500>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d0      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d910      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b67      	ldr	r3, [pc, #412]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 0207 	bic.w	r2, r3, #7
 8002cde:	4965      	ldr	r1, [pc, #404]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b63      	ldr	r3, [pc, #396]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0b8      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d10:	4b59      	ldr	r3, [pc, #356]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a58      	ldr	r2, [pc, #352]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d28:	4b53      	ldr	r3, [pc, #332]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a52      	ldr	r2, [pc, #328]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b50      	ldr	r3, [pc, #320]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	494d      	ldr	r1, [pc, #308]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d040      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b47      	ldr	r3, [pc, #284]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d115      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e07f      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	4b41      	ldr	r3, [pc, #260]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e073      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	4b3d      	ldr	r3, [pc, #244]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06b      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b39      	ldr	r3, [pc, #228]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4936      	ldr	r1, [pc, #216]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da4:	f7fe fad8 	bl	8001358 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe fad4 	bl	8001358 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e053      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d210      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 0207 	bic.w	r2, r3, #7
 8002dea:	4922      	ldr	r1, [pc, #136]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e032      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b19      	ldr	r3, [pc, #100]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4916      	ldr	r1, [pc, #88]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e2e:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	490e      	ldr	r1, [pc, #56]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e42:	f000 f821 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	490a      	ldr	r1, [pc, #40]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	5ccb      	ldrb	r3, [r1, r3]
 8002e56:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5a:	4a09      	ldr	r2, [pc, #36]	@ (8002e80 <HAL_RCC_ClockConfig+0x1cc>)
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e5e:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <HAL_RCC_ClockConfig+0x1d0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fa36 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40022000 	.word	0x40022000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	08004bf8 	.word	0x08004bf8
 8002e80:	20000008 	.word	0x20000008
 8002e84:	2000000c 	.word	0x2000000c

08002e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d002      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x30>
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCC_GetSysClockFreq+0x36>
 8002eb6:	e027      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eba:	613b      	str	r3, [r7, #16]
      break;
 8002ebc:	e027      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	0c9b      	lsrs	r3, r3, #18
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	4a17      	ldr	r2, [pc, #92]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ed6:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0c5b      	lsrs	r3, r3, #17
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	4a11      	ldr	r2, [pc, #68]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eea:	fb03 f202 	mul.w	r2, r3, r2
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e004      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a0c      	ldr	r2, [pc, #48]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	613b      	str	r3, [r7, #16]
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f0a:	613b      	str	r3, [r7, #16]
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	693b      	ldr	r3, [r7, #16]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	007a1200 	.word	0x007a1200
 8002f24:	08004c10 	.word	0x08004c10
 8002f28:	08004c20 	.word	0x08004c20
 8002f2c:	003d0900 	.word	0x003d0900

08002f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f34:	4b02      	ldr	r3, [pc, #8]	@ (8002f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	20000008 	.word	0x20000008

08002f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f48:	f7ff fff2 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0adb      	lsrs	r3, r3, #11
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4903      	ldr	r1, [pc, #12]	@ (8002f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08004c08 	.word	0x08004c08

08002f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f74:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <RCC_Delay+0x34>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <RCC_Delay+0x38>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0a5b      	lsrs	r3, r3, #9
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f88:	bf00      	nop
  }
  while (Delay --);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1e5a      	subs	r2, r3, #1
 8002f8e:	60fa      	str	r2, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f9      	bne.n	8002f88 <RCC_Delay+0x1c>
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	10624dd3 	.word	0x10624dd3

08002fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d07d      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	61d3      	str	r3, [r2, #28]
 8002fe0:	4b49      	ldr	r3, [pc, #292]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fec:	2301      	movs	r3, #1
 8002fee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	4b46      	ldr	r3, [pc, #280]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d118      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffc:	4b43      	ldr	r3, [pc, #268]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a42      	ldr	r2, [pc, #264]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003008:	f7fe f9a6 	bl	8001358 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	e008      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003010:	f7fe f9a2 	bl	8001358 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e06d      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b3a      	ldr	r3, [pc, #232]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800302e:	4b36      	ldr	r3, [pc, #216]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003036:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d02e      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d027      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800304c:	4b2e      	ldr	r3, [pc, #184]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003054:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003056:	4b2e      	ldr	r3, [pc, #184]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800305c:	4b2c      	ldr	r3, [pc, #176]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003062:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d014      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe f971 	bl	8001358 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	e00a      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe f96d 	bl	8001358 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e036      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ee      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309c:	4b1a      	ldr	r3, [pc, #104]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4917      	ldr	r1, [pc, #92]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	4a13      	ldr	r2, [pc, #76]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	490b      	ldr	r1, [pc, #44]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030ea:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4904      	ldr	r1, [pc, #16]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	40007000 	.word	0x40007000
 8003110:	42420440 	.word	0x42420440

08003114 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b10      	cmp	r3, #16
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b10      	cmp	r3, #16
 800313a:	f200 808a 	bhi.w	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d045      	beq.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d075      	beq.n	8003236 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800314a:	e082      	b.n	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800314c:	4b46      	ldr	r3, [pc, #280]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003152:	4b45      	ldr	r3, [pc, #276]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d07b      	beq.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0c9b      	lsrs	r3, r3, #18
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	4a41      	ldr	r2, [pc, #260]	@ (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d015      	beq.n	80031a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003176:	4b3c      	ldr	r3, [pc, #240]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0c5b      	lsrs	r3, r3, #17
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	4a3b      	ldr	r2, [pc, #236]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003190:	4a38      	ldr	r2, [pc, #224]	@ (8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fbb2 f2f3 	udiv	r2, r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	e004      	b.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4a34      	ldr	r2, [pc, #208]	@ (8003278 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80031ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031b8:	d102      	bne.n	80031c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	61bb      	str	r3, [r7, #24]
      break;
 80031be:	e04a      	b.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4a2d      	ldr	r2, [pc, #180]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
      break;
 80031ce:	e042      	b.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80031d0:	4b25      	ldr	r3, [pc, #148]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e0:	d108      	bne.n	80031f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80031ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	e01f      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031fe:	d109      	bne.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003200:	4b19      	ldr	r3, [pc, #100]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800320c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	e00f      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800321a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800321e:	d11c      	bne.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d016      	beq.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800322c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003230:	61bb      	str	r3, [r7, #24]
      break;
 8003232:	e012      	b.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003234:	e011      	b.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003236:	f7ff fe85 	bl	8002f44 <HAL_RCC_GetPCLK2Freq>
 800323a:	4602      	mov	r2, r0
 800323c:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	0b9b      	lsrs	r3, r3, #14
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	3301      	adds	r3, #1
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	61bb      	str	r3, [r7, #24]
      break;
 8003250:	e004      	b.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800325a:	bf00      	nop
    }
  }
  return (frequency);
 800325c:	69bb      	ldr	r3, [r7, #24]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	08004c24 	.word	0x08004c24
 8003270:	08004c34 	.word	0x08004c34
 8003274:	007a1200 	.word	0x007a1200
 8003278:	003d0900 	.word	0x003d0900
 800327c:	aaaaaaab 	.word	0xaaaaaaab

08003280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e041      	b.n	8003316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd ff6a 	bl	8001180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f000 fb7e 	bl	80039c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d001      	beq.n	8003338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e03a      	b.n	80033ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <HAL_TIM_Base_Start_IT+0x98>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00e      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x58>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003362:	d009      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x58>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a14      	ldr	r2, [pc, #80]	@ (80033bc <HAL_TIM_Base_Start_IT+0x9c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x58>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d111      	bne.n	800339c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b06      	cmp	r3, #6
 8003388:	d010      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339a:	e007      	b.n	80033ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800

080033c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e041      	b.n	800345a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f839 	bl	8003462 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 fadc 	bl	80039c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d020      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01b      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0202 	mvn.w	r2, #2
 80034a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa63 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa56 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fa65 	bl	800399c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d020      	beq.n	8003524 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01b      	beq.n	8003524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0204 	mvn.w	r2, #4
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa3d 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 8003510:	e005      	b.n	800351e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa30 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fa3f 	bl	800399c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d020      	beq.n	8003570 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01b      	beq.n	8003570 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0208 	mvn.w	r2, #8
 8003540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2204      	movs	r2, #4
 8003546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa17 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa0a 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fa19 	bl	800399c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	d020      	beq.n	80035bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01b      	beq.n	80035bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0210 	mvn.w	r2, #16
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2208      	movs	r2, #8
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f9f1 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9e4 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f9f3 	bl	800399c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00c      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0201 	mvn.w	r2, #1
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9c3 	bl	8003966 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fcd1 	bl	8003fa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00c      	beq.n	8003628 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f9c3 	bl	80039ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0220 	mvn.w	r2, #32
 8003644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fca4 	bl	8003f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800366e:	2302      	movs	r3, #2
 8003670:	e0ae      	b.n	80037d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b0c      	cmp	r3, #12
 800367e:	f200 809f 	bhi.w	80037c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003682:	a201      	add	r2, pc, #4	@ (adr r2, 8003688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	080036bd 	.word	0x080036bd
 800368c:	080037c1 	.word	0x080037c1
 8003690:	080037c1 	.word	0x080037c1
 8003694:	080037c1 	.word	0x080037c1
 8003698:	080036fd 	.word	0x080036fd
 800369c:	080037c1 	.word	0x080037c1
 80036a0:	080037c1 	.word	0x080037c1
 80036a4:	080037c1 	.word	0x080037c1
 80036a8:	0800373f 	.word	0x0800373f
 80036ac:	080037c1 	.word	0x080037c1
 80036b0:	080037c1 	.word	0x080037c1
 80036b4:	080037c1 	.word	0x080037c1
 80036b8:	0800377f 	.word	0x0800377f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f9ea 	bl	8003a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0208 	orr.w	r2, r2, #8
 80036d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0204 	bic.w	r2, r2, #4
 80036e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6999      	ldr	r1, [r3, #24]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	619a      	str	r2, [r3, #24]
      break;
 80036fa:	e064      	b.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fa30 	bl	8003b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6999      	ldr	r1, [r3, #24]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	021a      	lsls	r2, r3, #8
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	619a      	str	r2, [r3, #24]
      break;
 800373c:	e043      	b.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fa79 	bl	8003c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0208 	orr.w	r2, r2, #8
 8003758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69da      	ldr	r2, [r3, #28]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0204 	bic.w	r2, r2, #4
 8003768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69d9      	ldr	r1, [r3, #28]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	61da      	str	r2, [r3, #28]
      break;
 800377c:	e023      	b.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fac3 	bl	8003d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69d9      	ldr	r1, [r3, #28]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	021a      	lsls	r2, r3, #8
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	61da      	str	r2, [r3, #28]
      break;
 80037be:	e002      	b.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
      break;
 80037c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_TIM_ConfigClockSource+0x1c>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e0b4      	b.n	800395e <HAL_TIM_ConfigClockSource+0x186>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800381a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800382c:	d03e      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0xd4>
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003832:	f200 8087 	bhi.w	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383a:	f000 8086 	beq.w	800394a <HAL_TIM_ConfigClockSource+0x172>
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003842:	d87f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b70      	cmp	r3, #112	@ 0x70
 8003846:	d01a      	beq.n	800387e <HAL_TIM_ConfigClockSource+0xa6>
 8003848:	2b70      	cmp	r3, #112	@ 0x70
 800384a:	d87b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b60      	cmp	r3, #96	@ 0x60
 800384e:	d050      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003850:	2b60      	cmp	r3, #96	@ 0x60
 8003852:	d877      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b50      	cmp	r3, #80	@ 0x50
 8003856:	d03c      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003858:	2b50      	cmp	r3, #80	@ 0x50
 800385a:	d873      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b40      	cmp	r3, #64	@ 0x40
 800385e:	d058      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x13a>
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d86f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003864:	2b30      	cmp	r3, #48	@ 0x30
 8003866:	d064      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	2b30      	cmp	r3, #48	@ 0x30
 800386a:	d86b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d060      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 8003870:	2b20      	cmp	r3, #32
 8003872:	d867      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05c      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 8003878:	2b10      	cmp	r3, #16
 800387a:	d05a      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 800387c:	e062      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800388e:	f000 fb04 	bl	8003e9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	609a      	str	r2, [r3, #8]
      break;
 80038aa:	e04f      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038bc:	f000 faed 	bl	8003e9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ce:	609a      	str	r2, [r3, #8]
      break;
 80038d0:	e03c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038de:	461a      	mov	r2, r3
 80038e0:	f000 fa64 	bl	8003dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2150      	movs	r1, #80	@ 0x50
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fabb 	bl	8003e66 <TIM_ITRx_SetConfig>
      break;
 80038f0:	e02c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fe:	461a      	mov	r2, r3
 8003900:	f000 fa82 	bl	8003e08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2160      	movs	r1, #96	@ 0x60
 800390a:	4618      	mov	r0, r3
 800390c:	f000 faab 	bl	8003e66 <TIM_ITRx_SetConfig>
      break;
 8003910:	e01c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391e:	461a      	mov	r2, r3
 8003920:	f000 fa44 	bl	8003dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2140      	movs	r1, #64	@ 0x40
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fa9b 	bl	8003e66 <TIM_ITRx_SetConfig>
      break;
 8003930:	e00c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 fa92 	bl	8003e66 <TIM_ITRx_SetConfig>
      break;
 8003942:	e003      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e000      	b.n	800394c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800394a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a90 <TIM_Base_SetConfig+0xd0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <TIM_Base_SetConfig+0x30>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039de:	d007      	beq.n	80039f0 <TIM_Base_SetConfig+0x30>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a94 <TIM_Base_SetConfig+0xd4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_Base_SetConfig+0x30>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003a98 <TIM_Base_SetConfig+0xd8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d108      	bne.n	8003a02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a22      	ldr	r2, [pc, #136]	@ (8003a90 <TIM_Base_SetConfig+0xd0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <TIM_Base_SetConfig+0x62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a10:	d007      	beq.n	8003a22 <TIM_Base_SetConfig+0x62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1f      	ldr	r2, [pc, #124]	@ (8003a94 <TIM_Base_SetConfig+0xd4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_Base_SetConfig+0x62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003a98 <TIM_Base_SetConfig+0xd8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d108      	bne.n	8003a34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8003a90 <TIM_Base_SetConfig+0xd0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f023 0201 	bic.w	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	611a      	str	r2, [r3, #16]
  }
}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800

08003a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f023 0201 	bic.w	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0303 	bic.w	r3, r3, #3
 8003ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f023 0302 	bic.w	r3, r3, #2
 8003ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b64 <TIM_OC1_SetConfig+0xc8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d10c      	bne.n	8003b12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f023 0308 	bic.w	r3, r3, #8
 8003afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a13      	ldr	r2, [pc, #76]	@ (8003b64 <TIM_OC1_SetConfig+0xc8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d111      	bne.n	8003b3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	621a      	str	r2, [r3, #32]
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40012c00 	.word	0x40012c00

08003b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 0210 	bic.w	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f023 0320 	bic.w	r3, r3, #32
 8003bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c38 <TIM_OC2_SetConfig+0xd0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d10d      	bne.n	8003be4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003be2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a14      	ldr	r2, [pc, #80]	@ (8003c38 <TIM_OC2_SetConfig+0xd0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d113      	bne.n	8003c14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00

08003c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1d      	ldr	r2, [pc, #116]	@ (8003d0c <TIM_OC3_SetConfig+0xd0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10d      	bne.n	8003cb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <TIM_OC3_SetConfig+0xd0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d113      	bne.n	8003ce6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40012c00 	.word	0x40012c00

08003d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	031b      	lsls	r3, r3, #12
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8003da8 <TIM_OC4_SetConfig+0x98>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d109      	bne.n	8003d84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	019b      	lsls	r3, r3, #6
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	40012c00 	.word	0x40012c00

08003dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0201 	bic.w	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 030a 	bic.w	r3, r3, #10
 8003de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f023 0210 	bic.w	r2, r3, #16
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	031b      	lsls	r3, r3, #12
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	621a      	str	r2, [r3, #32]
}
 8003e5c:	bf00      	nop
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f043 0307 	orr.w	r3, r3, #7
 8003e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr

08003e9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b087      	sub	sp, #28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	021a      	lsls	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	609a      	str	r2, [r3, #8]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e046      	b.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a16      	ldr	r2, [pc, #88]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a12      	ldr	r2, [pc, #72]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a10      	ldr	r2, [pc, #64]	@ (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10c      	bne.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800

08003f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <SEND_4_BIT>:
 */

#include "LCD_16x2_PARALLEL.h"

void SEND_4_BIT(char data, int rsPin)//rs=0 yra instruction register o HIGH(1) data register
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	6039      	str	r1, [r7, #0]
 8003fc2:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rsPin);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fce:	4824      	ldr	r0, [pc, #144]	@ (8004060 <SEND_4_BIT+0xa8>)
 8003fd0:	f7fe fbbe 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fda:	4821      	ldr	r0, [pc, #132]	@ (8004060 <SEND_4_BIT+0xa8>)
 8003fdc:	f7fe fbb8 	bl	8002750 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data>>0)&0x1);
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2120      	movs	r1, #32
 8003fec:	481d      	ldr	r0, [pc, #116]	@ (8004064 <SEND_4_BIT+0xac>)
 8003fee:	f7fe fbaf 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data>>1)&0x1);
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	2140      	movs	r1, #64	@ 0x40
 8004002:	4818      	ldr	r0, [pc, #96]	@ (8004064 <SEND_4_BIT+0xac>)
 8004004:	f7fe fba4 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data>>2)&0x1);
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	b2db      	uxtb	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	2180      	movs	r1, #128	@ 0x80
 8004018:	4812      	ldr	r0, [pc, #72]	@ (8004064 <SEND_4_BIT+0xac>)
 800401a:	f7fe fb99 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data>>3)&0x1);
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	08db      	lsrs	r3, r3, #3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004030:	480c      	ldr	r0, [pc, #48]	@ (8004064 <SEND_4_BIT+0xac>)
 8004032:	f7fe fb8d 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8004036:	2201      	movs	r2, #1
 8004038:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800403c:	4808      	ldr	r0, [pc, #32]	@ (8004060 <SEND_4_BIT+0xa8>)
 800403e:	f7fe fb87 	bl	8002750 <HAL_GPIO_WritePin>
	DELAY_US(500); // Allow LCD to latch
 8004042:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004046:	f7fc fde5 	bl	8000c14 <DELAY_US>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 800404a:	2200      	movs	r2, #0
 800404c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004050:	4803      	ldr	r0, [pc, #12]	@ (8004060 <SEND_4_BIT+0xa8>)
 8004052:	f7fe fb7d 	bl	8002750 <HAL_GPIO_WritePin>

}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40010800 	.word	0x40010800
 8004064:	40010c00 	.word	0x40010c00

08004068 <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(char komanda)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	b2da      	uxtb	r2, r3
 8004078:	4b13      	ldr	r3, [pc, #76]	@ (80040c8 <LCD_SEND_COMMAND+0x60>)
 800407a:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <LCD_SEND_COMMAND+0x60>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff98 	bl	8003fb8 <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	b2da      	uxtb	r2, r3
 8004090:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <LCD_SEND_COMMAND+0x60>)
 8004092:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8004094:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <LCD_SEND_COMMAND+0x60>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff ff8c 	bl	8003fb8 <SEND_4_BIT>
	if (komanda == 0x01 || komanda == 0x02) {
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d002      	beq.n	80040ac <LCD_SEND_COMMAND+0x44>
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d103      	bne.n	80040b4 <LCD_SEND_COMMAND+0x4c>
		HAL_Delay(2); // These are extra slow
 80040ac:	2002      	movs	r0, #2
 80040ae:	f7fd f95d 	bl	800136c <HAL_Delay>
 80040b2:	e004      	b.n	80040be <LCD_SEND_COMMAND+0x56>
	} else {
		DELAY_US(300); // All other commands
 80040b4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80040b8:	f7fc fdac 	bl	8000c14 <DELAY_US>
	}
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000170 	.word	0x20000170

080040cc <LCD_SEND_DATA>:
void LCD_SEND_DATA(char komanda)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <LCD_SEND_DATA+0x40>)
 80040de:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 80040e0:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <LCD_SEND_DATA+0x40>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ff66 	bl	8003fb8 <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	4b05      	ldr	r3, [pc, #20]	@ (800410c <LCD_SEND_DATA+0x40>)
 80040f6:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 80040f8:	4b04      	ldr	r3, [pc, #16]	@ (800410c <LCD_SEND_DATA+0x40>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2101      	movs	r1, #1
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ff5a 	bl	8003fb8 <SEND_4_BIT>
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20000171 	.word	0x20000171

08004110 <LCD_CLEAR>:

void LCD_CLEAR()
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_DISPLAY_CLEAR);
 8004114:	2001      	movs	r0, #1
 8004116:	f7ff ffa7 	bl	8004068 <LCD_SEND_COMMAND>
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <LCD_Init>:
	}
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
}

void LCD_Init()
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin,GPIO_PIN_RESET);
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800412a:	4827      	ldr	r0, [pc, #156]	@ (80041c8 <LCD_Init+0xa8>)
 800412c:	f7fe fb10 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin,GPIO_PIN_RESET);
 8004130:	2200      	movs	r2, #0
 8004132:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004136:	4824      	ldr	r0, [pc, #144]	@ (80041c8 <LCD_Init+0xa8>)
 8004138:	f7fe fb0a 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800413c:	2200      	movs	r2, #0
 800413e:	2120      	movs	r1, #32
 8004140:	4822      	ldr	r0, [pc, #136]	@ (80041cc <LCD_Init+0xac>)
 8004142:	f7fe fb05 	bl	8002750 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2140      	movs	r1, #64	@ 0x40
 800414a:	4820      	ldr	r0, [pc, #128]	@ (80041cc <LCD_Init+0xac>)
 800414c:	f7fe fb00 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8004150:	2200      	movs	r2, #0
 8004152:	2180      	movs	r1, #128	@ 0x80
 8004154:	481d      	ldr	r0, [pc, #116]	@ (80041cc <LCD_Init+0xac>)
 8004156:	f7fe fafb 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 800415a:	2200      	movs	r2, #0
 800415c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004160:	481a      	ldr	r0, [pc, #104]	@ (80041cc <LCD_Init+0xac>)
 8004162:	f7fe faf5 	bl	8002750 <HAL_GPIO_WritePin>

    HAL_Delay(200); // Wait >40ms after power-on
 8004166:	20c8      	movs	r0, #200	@ 0xc8
 8004168:	f7fd f900 	bl	800136c <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 800416c:	2100      	movs	r1, #0
 800416e:	2003      	movs	r0, #3
 8004170:	f7ff ff22 	bl	8003fb8 <SEND_4_BIT>
    HAL_Delay(2);
 8004174:	2002      	movs	r0, #2
 8004176:	f7fd f8f9 	bl	800136c <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 800417a:	2100      	movs	r1, #0
 800417c:	2003      	movs	r0, #3
 800417e:	f7ff ff1b 	bl	8003fb8 <SEND_4_BIT>
    HAL_Delay(2);
 8004182:	2002      	movs	r0, #2
 8004184:	f7fd f8f2 	bl	800136c <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 8004188:	2100      	movs	r1, #0
 800418a:	2003      	movs	r0, #3
 800418c:	f7ff ff14 	bl	8003fb8 <SEND_4_BIT>
    HAL_Delay(2);
 8004190:	2002      	movs	r0, #2
 8004192:	f7fd f8eb 	bl	800136c <HAL_Delay>
    SEND_4_BIT(0x2, LCD_RS_INSTRUCTION);
 8004196:	2100      	movs	r1, #0
 8004198:	2002      	movs	r0, #2
 800419a:	f7ff ff0d 	bl	8003fb8 <SEND_4_BIT>
    HAL_Delay(10);
 800419e:	200a      	movs	r0, #10
 80041a0:	f7fd f8e4 	bl	800136c <HAL_Delay>

    //4 bit interface started
    LCD_SEND_COMMAND(0x28);  // Function Set: 4-bit, 2 lines, 5x8 dots
 80041a4:	2028      	movs	r0, #40	@ 0x28
 80041a6:	f7ff ff5f 	bl	8004068 <LCD_SEND_COMMAND>
	// From now on: full commands (2 x 4-bit transfers)
    LCD_SEND_COMMAND(0x08);  // Display OFF (D=0, C=0, B=0)
 80041aa:	2008      	movs	r0, #8
 80041ac:	f7ff ff5c 	bl	8004068 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x01);  // Clear Display
 80041b0:	2001      	movs	r0, #1
 80041b2:	f7ff ff59 	bl	8004068 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x06);  // Entry Mode Set: Increment, No shift
 80041b6:	2006      	movs	r0, #6
 80041b8:	f7ff ff56 	bl	8004068 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x0C);  // Display ON, Cursor OFF, Blink OFF
 80041bc:	200c      	movs	r0, #12
 80041be:	f7ff ff53 	bl	8004068 <LCD_SEND_COMMAND>
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40010800 	.word	0x40010800
 80041cc:	40010c00 	.word	0x40010c00

080041d0 <LCD_SEND_STR>:

void LCD_SEND_STR(const char data[], unsigned int place, unsigned int level)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
	/*
	 * @brief Offset from left side and level 0 - top and 1 - bottom
	 */
	if(level==1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <LCD_SEND_STR+0x22>
	{
		LCD_SEND_COMMAND(0xC0+place);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	3b40      	subs	r3, #64	@ 0x40
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ff3c 	bl	8004068 <LCD_SEND_COMMAND>
 80041f0:	e006      	b.n	8004200 <LCD_SEND_STR+0x30>
	}
	else LCD_SEND_COMMAND(0x80+place);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	3b80      	subs	r3, #128	@ 0x80
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff34 	bl	8004068 <LCD_SEND_COMMAND>
	//kai N=high 2 line tai 1 line 0-4F o 2 0-27h   40-67h
	// KAI level 0 tai pirmas kai 1 tai antras levelis
	static uint8_t x;
	x = 0;
 8004200:	4b0f      	ldr	r3, [pc, #60]	@ (8004240 <LCD_SEND_STR+0x70>)
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8004206:	e00e      	b.n	8004226 <LCD_SEND_STR+0x56>
	{
		LCD_SEND_DATA(data[x]);
 8004208:	4b0d      	ldr	r3, [pc, #52]	@ (8004240 <LCD_SEND_STR+0x70>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff ff59 	bl	80040cc <LCD_SEND_DATA>
		x++;
 800421a:	4b09      	ldr	r3, [pc, #36]	@ (8004240 <LCD_SEND_STR+0x70>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	3301      	adds	r3, #1
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <LCD_SEND_STR+0x70>)
 8004224:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <LCD_SEND_STR+0x70>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e8      	bne.n	8004208 <LCD_SEND_STR+0x38>
	}
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000172 	.word	0x20000172

08004244 <siprintf>:
 8004244:	b40e      	push	{r1, r2, r3}
 8004246:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800424a:	b510      	push	{r4, lr}
 800424c:	2400      	movs	r4, #0
 800424e:	b09d      	sub	sp, #116	@ 0x74
 8004250:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004252:	9002      	str	r0, [sp, #8]
 8004254:	9006      	str	r0, [sp, #24]
 8004256:	9107      	str	r1, [sp, #28]
 8004258:	9104      	str	r1, [sp, #16]
 800425a:	4809      	ldr	r0, [pc, #36]	@ (8004280 <siprintf+0x3c>)
 800425c:	4909      	ldr	r1, [pc, #36]	@ (8004284 <siprintf+0x40>)
 800425e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004262:	9105      	str	r1, [sp, #20]
 8004264:	6800      	ldr	r0, [r0, #0]
 8004266:	a902      	add	r1, sp, #8
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800426c:	f000 f992 	bl	8004594 <_svfiprintf_r>
 8004270:	9b02      	ldr	r3, [sp, #8]
 8004272:	701c      	strb	r4, [r3, #0]
 8004274:	b01d      	add	sp, #116	@ 0x74
 8004276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800427a:	b003      	add	sp, #12
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000014 	.word	0x20000014
 8004284:	ffff0208 	.word	0xffff0208

08004288 <memset>:
 8004288:	4603      	mov	r3, r0
 800428a:	4402      	add	r2, r0
 800428c:	4293      	cmp	r3, r2
 800428e:	d100      	bne.n	8004292 <memset+0xa>
 8004290:	4770      	bx	lr
 8004292:	f803 1b01 	strb.w	r1, [r3], #1
 8004296:	e7f9      	b.n	800428c <memset+0x4>

08004298 <__errno>:
 8004298:	4b01      	ldr	r3, [pc, #4]	@ (80042a0 <__errno+0x8>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000014 	.word	0x20000014

080042a4 <__libc_init_array>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	2600      	movs	r6, #0
 80042a8:	4d0c      	ldr	r5, [pc, #48]	@ (80042dc <__libc_init_array+0x38>)
 80042aa:	4c0d      	ldr	r4, [pc, #52]	@ (80042e0 <__libc_init_array+0x3c>)
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	42a6      	cmp	r6, r4
 80042b2:	d109      	bne.n	80042c8 <__libc_init_array+0x24>
 80042b4:	f000 fc76 	bl	8004ba4 <_init>
 80042b8:	2600      	movs	r6, #0
 80042ba:	4d0a      	ldr	r5, [pc, #40]	@ (80042e4 <__libc_init_array+0x40>)
 80042bc:	4c0a      	ldr	r4, [pc, #40]	@ (80042e8 <__libc_init_array+0x44>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	42a6      	cmp	r6, r4
 80042c4:	d105      	bne.n	80042d2 <__libc_init_array+0x2e>
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042cc:	4798      	blx	r3
 80042ce:	3601      	adds	r6, #1
 80042d0:	e7ee      	b.n	80042b0 <__libc_init_array+0xc>
 80042d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d6:	4798      	blx	r3
 80042d8:	3601      	adds	r6, #1
 80042da:	e7f2      	b.n	80042c2 <__libc_init_array+0x1e>
 80042dc:	08004c74 	.word	0x08004c74
 80042e0:	08004c74 	.word	0x08004c74
 80042e4:	08004c74 	.word	0x08004c74
 80042e8:	08004c78 	.word	0x08004c78

080042ec <__retarget_lock_acquire_recursive>:
 80042ec:	4770      	bx	lr

080042ee <__retarget_lock_release_recursive>:
 80042ee:	4770      	bx	lr

080042f0 <_free_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4605      	mov	r5, r0
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d040      	beq.n	800437a <_free_r+0x8a>
 80042f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fc:	1f0c      	subs	r4, r1, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfb8      	it	lt
 8004302:	18e4      	addlt	r4, r4, r3
 8004304:	f000 f8de 	bl	80044c4 <__malloc_lock>
 8004308:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <_free_r+0x8c>)
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	b933      	cbnz	r3, 800431c <_free_r+0x2c>
 800430e:	6063      	str	r3, [r4, #4]
 8004310:	6014      	str	r4, [r2, #0]
 8004312:	4628      	mov	r0, r5
 8004314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004318:	f000 b8da 	b.w	80044d0 <__malloc_unlock>
 800431c:	42a3      	cmp	r3, r4
 800431e:	d908      	bls.n	8004332 <_free_r+0x42>
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	1821      	adds	r1, r4, r0
 8004324:	428b      	cmp	r3, r1
 8004326:	bf01      	itttt	eq
 8004328:	6819      	ldreq	r1, [r3, #0]
 800432a:	685b      	ldreq	r3, [r3, #4]
 800432c:	1809      	addeq	r1, r1, r0
 800432e:	6021      	streq	r1, [r4, #0]
 8004330:	e7ed      	b.n	800430e <_free_r+0x1e>
 8004332:	461a      	mov	r2, r3
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b10b      	cbz	r3, 800433c <_free_r+0x4c>
 8004338:	42a3      	cmp	r3, r4
 800433a:	d9fa      	bls.n	8004332 <_free_r+0x42>
 800433c:	6811      	ldr	r1, [r2, #0]
 800433e:	1850      	adds	r0, r2, r1
 8004340:	42a0      	cmp	r0, r4
 8004342:	d10b      	bne.n	800435c <_free_r+0x6c>
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	4401      	add	r1, r0
 8004348:	1850      	adds	r0, r2, r1
 800434a:	4283      	cmp	r3, r0
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	d1e0      	bne.n	8004312 <_free_r+0x22>
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4408      	add	r0, r1
 8004356:	6010      	str	r0, [r2, #0]
 8004358:	6053      	str	r3, [r2, #4]
 800435a:	e7da      	b.n	8004312 <_free_r+0x22>
 800435c:	d902      	bls.n	8004364 <_free_r+0x74>
 800435e:	230c      	movs	r3, #12
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	e7d6      	b.n	8004312 <_free_r+0x22>
 8004364:	6820      	ldr	r0, [r4, #0]
 8004366:	1821      	adds	r1, r4, r0
 8004368:	428b      	cmp	r3, r1
 800436a:	bf01      	itttt	eq
 800436c:	6819      	ldreq	r1, [r3, #0]
 800436e:	685b      	ldreq	r3, [r3, #4]
 8004370:	1809      	addeq	r1, r1, r0
 8004372:	6021      	streq	r1, [r4, #0]
 8004374:	6063      	str	r3, [r4, #4]
 8004376:	6054      	str	r4, [r2, #4]
 8004378:	e7cb      	b.n	8004312 <_free_r+0x22>
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	200002b8 	.word	0x200002b8

08004380 <sbrk_aligned>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	4e0f      	ldr	r6, [pc, #60]	@ (80043c0 <sbrk_aligned+0x40>)
 8004384:	460c      	mov	r4, r1
 8004386:	6831      	ldr	r1, [r6, #0]
 8004388:	4605      	mov	r5, r0
 800438a:	b911      	cbnz	r1, 8004392 <sbrk_aligned+0x12>
 800438c:	f000 fba8 	bl	8004ae0 <_sbrk_r>
 8004390:	6030      	str	r0, [r6, #0]
 8004392:	4621      	mov	r1, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f000 fba3 	bl	8004ae0 <_sbrk_r>
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	d103      	bne.n	80043a6 <sbrk_aligned+0x26>
 800439e:	f04f 34ff 	mov.w	r4, #4294967295
 80043a2:	4620      	mov	r0, r4
 80043a4:	bd70      	pop	{r4, r5, r6, pc}
 80043a6:	1cc4      	adds	r4, r0, #3
 80043a8:	f024 0403 	bic.w	r4, r4, #3
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d0f8      	beq.n	80043a2 <sbrk_aligned+0x22>
 80043b0:	1a21      	subs	r1, r4, r0
 80043b2:	4628      	mov	r0, r5
 80043b4:	f000 fb94 	bl	8004ae0 <_sbrk_r>
 80043b8:	3001      	adds	r0, #1
 80043ba:	d1f2      	bne.n	80043a2 <sbrk_aligned+0x22>
 80043bc:	e7ef      	b.n	800439e <sbrk_aligned+0x1e>
 80043be:	bf00      	nop
 80043c0:	200002b4 	.word	0x200002b4

080043c4 <_malloc_r>:
 80043c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043c8:	1ccd      	adds	r5, r1, #3
 80043ca:	f025 0503 	bic.w	r5, r5, #3
 80043ce:	3508      	adds	r5, #8
 80043d0:	2d0c      	cmp	r5, #12
 80043d2:	bf38      	it	cc
 80043d4:	250c      	movcc	r5, #12
 80043d6:	2d00      	cmp	r5, #0
 80043d8:	4606      	mov	r6, r0
 80043da:	db01      	blt.n	80043e0 <_malloc_r+0x1c>
 80043dc:	42a9      	cmp	r1, r5
 80043de:	d904      	bls.n	80043ea <_malloc_r+0x26>
 80043e0:	230c      	movs	r3, #12
 80043e2:	6033      	str	r3, [r6, #0]
 80043e4:	2000      	movs	r0, #0
 80043e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044c0 <_malloc_r+0xfc>
 80043ee:	f000 f869 	bl	80044c4 <__malloc_lock>
 80043f2:	f8d8 3000 	ldr.w	r3, [r8]
 80043f6:	461c      	mov	r4, r3
 80043f8:	bb44      	cbnz	r4, 800444c <_malloc_r+0x88>
 80043fa:	4629      	mov	r1, r5
 80043fc:	4630      	mov	r0, r6
 80043fe:	f7ff ffbf 	bl	8004380 <sbrk_aligned>
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	4604      	mov	r4, r0
 8004406:	d158      	bne.n	80044ba <_malloc_r+0xf6>
 8004408:	f8d8 4000 	ldr.w	r4, [r8]
 800440c:	4627      	mov	r7, r4
 800440e:	2f00      	cmp	r7, #0
 8004410:	d143      	bne.n	800449a <_malloc_r+0xd6>
 8004412:	2c00      	cmp	r4, #0
 8004414:	d04b      	beq.n	80044ae <_malloc_r+0xea>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	4639      	mov	r1, r7
 800441a:	4630      	mov	r0, r6
 800441c:	eb04 0903 	add.w	r9, r4, r3
 8004420:	f000 fb5e 	bl	8004ae0 <_sbrk_r>
 8004424:	4581      	cmp	r9, r0
 8004426:	d142      	bne.n	80044ae <_malloc_r+0xea>
 8004428:	6821      	ldr	r1, [r4, #0]
 800442a:	4630      	mov	r0, r6
 800442c:	1a6d      	subs	r5, r5, r1
 800442e:	4629      	mov	r1, r5
 8004430:	f7ff ffa6 	bl	8004380 <sbrk_aligned>
 8004434:	3001      	adds	r0, #1
 8004436:	d03a      	beq.n	80044ae <_malloc_r+0xea>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	442b      	add	r3, r5
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	f8d8 3000 	ldr.w	r3, [r8]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	bb62      	cbnz	r2, 80044a0 <_malloc_r+0xdc>
 8004446:	f8c8 7000 	str.w	r7, [r8]
 800444a:	e00f      	b.n	800446c <_malloc_r+0xa8>
 800444c:	6822      	ldr	r2, [r4, #0]
 800444e:	1b52      	subs	r2, r2, r5
 8004450:	d420      	bmi.n	8004494 <_malloc_r+0xd0>
 8004452:	2a0b      	cmp	r2, #11
 8004454:	d917      	bls.n	8004486 <_malloc_r+0xc2>
 8004456:	1961      	adds	r1, r4, r5
 8004458:	42a3      	cmp	r3, r4
 800445a:	6025      	str	r5, [r4, #0]
 800445c:	bf18      	it	ne
 800445e:	6059      	strne	r1, [r3, #4]
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	bf08      	it	eq
 8004464:	f8c8 1000 	streq.w	r1, [r8]
 8004468:	5162      	str	r2, [r4, r5]
 800446a:	604b      	str	r3, [r1, #4]
 800446c:	4630      	mov	r0, r6
 800446e:	f000 f82f 	bl	80044d0 <__malloc_unlock>
 8004472:	f104 000b 	add.w	r0, r4, #11
 8004476:	1d23      	adds	r3, r4, #4
 8004478:	f020 0007 	bic.w	r0, r0, #7
 800447c:	1ac2      	subs	r2, r0, r3
 800447e:	bf1c      	itt	ne
 8004480:	1a1b      	subne	r3, r3, r0
 8004482:	50a3      	strne	r3, [r4, r2]
 8004484:	e7af      	b.n	80043e6 <_malloc_r+0x22>
 8004486:	6862      	ldr	r2, [r4, #4]
 8004488:	42a3      	cmp	r3, r4
 800448a:	bf0c      	ite	eq
 800448c:	f8c8 2000 	streq.w	r2, [r8]
 8004490:	605a      	strne	r2, [r3, #4]
 8004492:	e7eb      	b.n	800446c <_malloc_r+0xa8>
 8004494:	4623      	mov	r3, r4
 8004496:	6864      	ldr	r4, [r4, #4]
 8004498:	e7ae      	b.n	80043f8 <_malloc_r+0x34>
 800449a:	463c      	mov	r4, r7
 800449c:	687f      	ldr	r7, [r7, #4]
 800449e:	e7b6      	b.n	800440e <_malloc_r+0x4a>
 80044a0:	461a      	mov	r2, r3
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	42a3      	cmp	r3, r4
 80044a6:	d1fb      	bne.n	80044a0 <_malloc_r+0xdc>
 80044a8:	2300      	movs	r3, #0
 80044aa:	6053      	str	r3, [r2, #4]
 80044ac:	e7de      	b.n	800446c <_malloc_r+0xa8>
 80044ae:	230c      	movs	r3, #12
 80044b0:	4630      	mov	r0, r6
 80044b2:	6033      	str	r3, [r6, #0]
 80044b4:	f000 f80c 	bl	80044d0 <__malloc_unlock>
 80044b8:	e794      	b.n	80043e4 <_malloc_r+0x20>
 80044ba:	6005      	str	r5, [r0, #0]
 80044bc:	e7d6      	b.n	800446c <_malloc_r+0xa8>
 80044be:	bf00      	nop
 80044c0:	200002b8 	.word	0x200002b8

080044c4 <__malloc_lock>:
 80044c4:	4801      	ldr	r0, [pc, #4]	@ (80044cc <__malloc_lock+0x8>)
 80044c6:	f7ff bf11 	b.w	80042ec <__retarget_lock_acquire_recursive>
 80044ca:	bf00      	nop
 80044cc:	200002b0 	.word	0x200002b0

080044d0 <__malloc_unlock>:
 80044d0:	4801      	ldr	r0, [pc, #4]	@ (80044d8 <__malloc_unlock+0x8>)
 80044d2:	f7ff bf0c 	b.w	80042ee <__retarget_lock_release_recursive>
 80044d6:	bf00      	nop
 80044d8:	200002b0 	.word	0x200002b0

080044dc <__ssputs_r>:
 80044dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e0:	461f      	mov	r7, r3
 80044e2:	688e      	ldr	r6, [r1, #8]
 80044e4:	4682      	mov	sl, r0
 80044e6:	42be      	cmp	r6, r7
 80044e8:	460c      	mov	r4, r1
 80044ea:	4690      	mov	r8, r2
 80044ec:	680b      	ldr	r3, [r1, #0]
 80044ee:	d82d      	bhi.n	800454c <__ssputs_r+0x70>
 80044f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044f8:	d026      	beq.n	8004548 <__ssputs_r+0x6c>
 80044fa:	6965      	ldr	r5, [r4, #20]
 80044fc:	6909      	ldr	r1, [r1, #16]
 80044fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004502:	eba3 0901 	sub.w	r9, r3, r1
 8004506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800450a:	1c7b      	adds	r3, r7, #1
 800450c:	444b      	add	r3, r9
 800450e:	106d      	asrs	r5, r5, #1
 8004510:	429d      	cmp	r5, r3
 8004512:	bf38      	it	cc
 8004514:	461d      	movcc	r5, r3
 8004516:	0553      	lsls	r3, r2, #21
 8004518:	d527      	bpl.n	800456a <__ssputs_r+0x8e>
 800451a:	4629      	mov	r1, r5
 800451c:	f7ff ff52 	bl	80043c4 <_malloc_r>
 8004520:	4606      	mov	r6, r0
 8004522:	b360      	cbz	r0, 800457e <__ssputs_r+0xa2>
 8004524:	464a      	mov	r2, r9
 8004526:	6921      	ldr	r1, [r4, #16]
 8004528:	f000 faf8 	bl	8004b1c <memcpy>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	6126      	str	r6, [r4, #16]
 800453a:	444e      	add	r6, r9
 800453c:	6026      	str	r6, [r4, #0]
 800453e:	463e      	mov	r6, r7
 8004540:	6165      	str	r5, [r4, #20]
 8004542:	eba5 0509 	sub.w	r5, r5, r9
 8004546:	60a5      	str	r5, [r4, #8]
 8004548:	42be      	cmp	r6, r7
 800454a:	d900      	bls.n	800454e <__ssputs_r+0x72>
 800454c:	463e      	mov	r6, r7
 800454e:	4632      	mov	r2, r6
 8004550:	4641      	mov	r1, r8
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	f000 faaa 	bl	8004aac <memmove>
 8004558:	2000      	movs	r0, #0
 800455a:	68a3      	ldr	r3, [r4, #8]
 800455c:	1b9b      	subs	r3, r3, r6
 800455e:	60a3      	str	r3, [r4, #8]
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	4433      	add	r3, r6
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456a:	462a      	mov	r2, r5
 800456c:	f000 fae4 	bl	8004b38 <_realloc_r>
 8004570:	4606      	mov	r6, r0
 8004572:	2800      	cmp	r0, #0
 8004574:	d1e0      	bne.n	8004538 <__ssputs_r+0x5c>
 8004576:	4650      	mov	r0, sl
 8004578:	6921      	ldr	r1, [r4, #16]
 800457a:	f7ff feb9 	bl	80042f0 <_free_r>
 800457e:	230c      	movs	r3, #12
 8004580:	f8ca 3000 	str.w	r3, [sl]
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	f04f 30ff 	mov.w	r0, #4294967295
 800458a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	e7e9      	b.n	8004566 <__ssputs_r+0x8a>
	...

08004594 <_svfiprintf_r>:
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	4698      	mov	r8, r3
 800459a:	898b      	ldrh	r3, [r1, #12]
 800459c:	4607      	mov	r7, r0
 800459e:	061b      	lsls	r3, r3, #24
 80045a0:	460d      	mov	r5, r1
 80045a2:	4614      	mov	r4, r2
 80045a4:	b09d      	sub	sp, #116	@ 0x74
 80045a6:	d510      	bpl.n	80045ca <_svfiprintf_r+0x36>
 80045a8:	690b      	ldr	r3, [r1, #16]
 80045aa:	b973      	cbnz	r3, 80045ca <_svfiprintf_r+0x36>
 80045ac:	2140      	movs	r1, #64	@ 0x40
 80045ae:	f7ff ff09 	bl	80043c4 <_malloc_r>
 80045b2:	6028      	str	r0, [r5, #0]
 80045b4:	6128      	str	r0, [r5, #16]
 80045b6:	b930      	cbnz	r0, 80045c6 <_svfiprintf_r+0x32>
 80045b8:	230c      	movs	r3, #12
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	b01d      	add	sp, #116	@ 0x74
 80045c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c6:	2340      	movs	r3, #64	@ 0x40
 80045c8:	616b      	str	r3, [r5, #20]
 80045ca:	2300      	movs	r3, #0
 80045cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80045ce:	2320      	movs	r3, #32
 80045d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045d4:	2330      	movs	r3, #48	@ 0x30
 80045d6:	f04f 0901 	mov.w	r9, #1
 80045da:	f8cd 800c 	str.w	r8, [sp, #12]
 80045de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004778 <_svfiprintf_r+0x1e4>
 80045e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045e6:	4623      	mov	r3, r4
 80045e8:	469a      	mov	sl, r3
 80045ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ee:	b10a      	cbz	r2, 80045f4 <_svfiprintf_r+0x60>
 80045f0:	2a25      	cmp	r2, #37	@ 0x25
 80045f2:	d1f9      	bne.n	80045e8 <_svfiprintf_r+0x54>
 80045f4:	ebba 0b04 	subs.w	fp, sl, r4
 80045f8:	d00b      	beq.n	8004612 <_svfiprintf_r+0x7e>
 80045fa:	465b      	mov	r3, fp
 80045fc:	4622      	mov	r2, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	4638      	mov	r0, r7
 8004602:	f7ff ff6b 	bl	80044dc <__ssputs_r>
 8004606:	3001      	adds	r0, #1
 8004608:	f000 80a7 	beq.w	800475a <_svfiprintf_r+0x1c6>
 800460c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800460e:	445a      	add	r2, fp
 8004610:	9209      	str	r2, [sp, #36]	@ 0x24
 8004612:	f89a 3000 	ldrb.w	r3, [sl]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 809f 	beq.w	800475a <_svfiprintf_r+0x1c6>
 800461c:	2300      	movs	r3, #0
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004626:	f10a 0a01 	add.w	sl, sl, #1
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	9307      	str	r3, [sp, #28]
 800462e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004632:	931a      	str	r3, [sp, #104]	@ 0x68
 8004634:	4654      	mov	r4, sl
 8004636:	2205      	movs	r2, #5
 8004638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463c:	484e      	ldr	r0, [pc, #312]	@ (8004778 <_svfiprintf_r+0x1e4>)
 800463e:	f000 fa5f 	bl	8004b00 <memchr>
 8004642:	9a04      	ldr	r2, [sp, #16]
 8004644:	b9d8      	cbnz	r0, 800467e <_svfiprintf_r+0xea>
 8004646:	06d0      	lsls	r0, r2, #27
 8004648:	bf44      	itt	mi
 800464a:	2320      	movmi	r3, #32
 800464c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004650:	0711      	lsls	r1, r2, #28
 8004652:	bf44      	itt	mi
 8004654:	232b      	movmi	r3, #43	@ 0x2b
 8004656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800465a:	f89a 3000 	ldrb.w	r3, [sl]
 800465e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004660:	d015      	beq.n	800468e <_svfiprintf_r+0xfa>
 8004662:	4654      	mov	r4, sl
 8004664:	2000      	movs	r0, #0
 8004666:	f04f 0c0a 	mov.w	ip, #10
 800466a:	9a07      	ldr	r2, [sp, #28]
 800466c:	4621      	mov	r1, r4
 800466e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004672:	3b30      	subs	r3, #48	@ 0x30
 8004674:	2b09      	cmp	r3, #9
 8004676:	d94b      	bls.n	8004710 <_svfiprintf_r+0x17c>
 8004678:	b1b0      	cbz	r0, 80046a8 <_svfiprintf_r+0x114>
 800467a:	9207      	str	r2, [sp, #28]
 800467c:	e014      	b.n	80046a8 <_svfiprintf_r+0x114>
 800467e:	eba0 0308 	sub.w	r3, r0, r8
 8004682:	fa09 f303 	lsl.w	r3, r9, r3
 8004686:	4313      	orrs	r3, r2
 8004688:	46a2      	mov	sl, r4
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	e7d2      	b.n	8004634 <_svfiprintf_r+0xa0>
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	1d19      	adds	r1, r3, #4
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	9103      	str	r1, [sp, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfbb      	ittet	lt
 800469a:	425b      	neglt	r3, r3
 800469c:	f042 0202 	orrlt.w	r2, r2, #2
 80046a0:	9307      	strge	r3, [sp, #28]
 80046a2:	9307      	strlt	r3, [sp, #28]
 80046a4:	bfb8      	it	lt
 80046a6:	9204      	strlt	r2, [sp, #16]
 80046a8:	7823      	ldrb	r3, [r4, #0]
 80046aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ac:	d10a      	bne.n	80046c4 <_svfiprintf_r+0x130>
 80046ae:	7863      	ldrb	r3, [r4, #1]
 80046b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b2:	d132      	bne.n	800471a <_svfiprintf_r+0x186>
 80046b4:	9b03      	ldr	r3, [sp, #12]
 80046b6:	3402      	adds	r4, #2
 80046b8:	1d1a      	adds	r2, r3, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	9203      	str	r2, [sp, #12]
 80046be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046c2:	9305      	str	r3, [sp, #20]
 80046c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800477c <_svfiprintf_r+0x1e8>
 80046c8:	2203      	movs	r2, #3
 80046ca:	4650      	mov	r0, sl
 80046cc:	7821      	ldrb	r1, [r4, #0]
 80046ce:	f000 fa17 	bl	8004b00 <memchr>
 80046d2:	b138      	cbz	r0, 80046e4 <_svfiprintf_r+0x150>
 80046d4:	2240      	movs	r2, #64	@ 0x40
 80046d6:	9b04      	ldr	r3, [sp, #16]
 80046d8:	eba0 000a 	sub.w	r0, r0, sl
 80046dc:	4082      	lsls	r2, r0
 80046de:	4313      	orrs	r3, r2
 80046e0:	3401      	adds	r4, #1
 80046e2:	9304      	str	r3, [sp, #16]
 80046e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e8:	2206      	movs	r2, #6
 80046ea:	4825      	ldr	r0, [pc, #148]	@ (8004780 <_svfiprintf_r+0x1ec>)
 80046ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046f0:	f000 fa06 	bl	8004b00 <memchr>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d036      	beq.n	8004766 <_svfiprintf_r+0x1d2>
 80046f8:	4b22      	ldr	r3, [pc, #136]	@ (8004784 <_svfiprintf_r+0x1f0>)
 80046fa:	bb1b      	cbnz	r3, 8004744 <_svfiprintf_r+0x1b0>
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	3307      	adds	r3, #7
 8004700:	f023 0307 	bic.w	r3, r3, #7
 8004704:	3308      	adds	r3, #8
 8004706:	9303      	str	r3, [sp, #12]
 8004708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800470a:	4433      	add	r3, r6
 800470c:	9309      	str	r3, [sp, #36]	@ 0x24
 800470e:	e76a      	b.n	80045e6 <_svfiprintf_r+0x52>
 8004710:	460c      	mov	r4, r1
 8004712:	2001      	movs	r0, #1
 8004714:	fb0c 3202 	mla	r2, ip, r2, r3
 8004718:	e7a8      	b.n	800466c <_svfiprintf_r+0xd8>
 800471a:	2300      	movs	r3, #0
 800471c:	f04f 0c0a 	mov.w	ip, #10
 8004720:	4619      	mov	r1, r3
 8004722:	3401      	adds	r4, #1
 8004724:	9305      	str	r3, [sp, #20]
 8004726:	4620      	mov	r0, r4
 8004728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800472c:	3a30      	subs	r2, #48	@ 0x30
 800472e:	2a09      	cmp	r2, #9
 8004730:	d903      	bls.n	800473a <_svfiprintf_r+0x1a6>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0c6      	beq.n	80046c4 <_svfiprintf_r+0x130>
 8004736:	9105      	str	r1, [sp, #20]
 8004738:	e7c4      	b.n	80046c4 <_svfiprintf_r+0x130>
 800473a:	4604      	mov	r4, r0
 800473c:	2301      	movs	r3, #1
 800473e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004742:	e7f0      	b.n	8004726 <_svfiprintf_r+0x192>
 8004744:	ab03      	add	r3, sp, #12
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	462a      	mov	r2, r5
 800474a:	4638      	mov	r0, r7
 800474c:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <_svfiprintf_r+0x1f4>)
 800474e:	a904      	add	r1, sp, #16
 8004750:	f3af 8000 	nop.w
 8004754:	1c42      	adds	r2, r0, #1
 8004756:	4606      	mov	r6, r0
 8004758:	d1d6      	bne.n	8004708 <_svfiprintf_r+0x174>
 800475a:	89ab      	ldrh	r3, [r5, #12]
 800475c:	065b      	lsls	r3, r3, #25
 800475e:	f53f af2d 	bmi.w	80045bc <_svfiprintf_r+0x28>
 8004762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004764:	e72c      	b.n	80045c0 <_svfiprintf_r+0x2c>
 8004766:	ab03      	add	r3, sp, #12
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	462a      	mov	r2, r5
 800476c:	4638      	mov	r0, r7
 800476e:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <_svfiprintf_r+0x1f4>)
 8004770:	a904      	add	r1, sp, #16
 8004772:	f000 f87d 	bl	8004870 <_printf_i>
 8004776:	e7ed      	b.n	8004754 <_svfiprintf_r+0x1c0>
 8004778:	08004c36 	.word	0x08004c36
 800477c:	08004c3c 	.word	0x08004c3c
 8004780:	08004c40 	.word	0x08004c40
 8004784:	00000000 	.word	0x00000000
 8004788:	080044dd 	.word	0x080044dd

0800478c <_printf_common>:
 800478c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004790:	4616      	mov	r6, r2
 8004792:	4698      	mov	r8, r3
 8004794:	688a      	ldr	r2, [r1, #8]
 8004796:	690b      	ldr	r3, [r1, #16]
 8004798:	4607      	mov	r7, r0
 800479a:	4293      	cmp	r3, r2
 800479c:	bfb8      	it	lt
 800479e:	4613      	movlt	r3, r2
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047a6:	460c      	mov	r4, r1
 80047a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047ac:	b10a      	cbz	r2, 80047b2 <_printf_common+0x26>
 80047ae:	3301      	adds	r3, #1
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	0699      	lsls	r1, r3, #26
 80047b6:	bf42      	ittt	mi
 80047b8:	6833      	ldrmi	r3, [r6, #0]
 80047ba:	3302      	addmi	r3, #2
 80047bc:	6033      	strmi	r3, [r6, #0]
 80047be:	6825      	ldr	r5, [r4, #0]
 80047c0:	f015 0506 	ands.w	r5, r5, #6
 80047c4:	d106      	bne.n	80047d4 <_printf_common+0x48>
 80047c6:	f104 0a19 	add.w	sl, r4, #25
 80047ca:	68e3      	ldr	r3, [r4, #12]
 80047cc:	6832      	ldr	r2, [r6, #0]
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	42ab      	cmp	r3, r5
 80047d2:	dc2b      	bgt.n	800482c <_printf_common+0xa0>
 80047d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047d8:	6822      	ldr	r2, [r4, #0]
 80047da:	3b00      	subs	r3, #0
 80047dc:	bf18      	it	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	0692      	lsls	r2, r2, #26
 80047e2:	d430      	bmi.n	8004846 <_printf_common+0xba>
 80047e4:	4641      	mov	r1, r8
 80047e6:	4638      	mov	r0, r7
 80047e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047ec:	47c8      	blx	r9
 80047ee:	3001      	adds	r0, #1
 80047f0:	d023      	beq.n	800483a <_printf_common+0xae>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	6922      	ldr	r2, [r4, #16]
 80047f6:	f003 0306 	and.w	r3, r3, #6
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	bf14      	ite	ne
 80047fe:	2500      	movne	r5, #0
 8004800:	6833      	ldreq	r3, [r6, #0]
 8004802:	f04f 0600 	mov.w	r6, #0
 8004806:	bf08      	it	eq
 8004808:	68e5      	ldreq	r5, [r4, #12]
 800480a:	f104 041a 	add.w	r4, r4, #26
 800480e:	bf08      	it	eq
 8004810:	1aed      	subeq	r5, r5, r3
 8004812:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004816:	bf08      	it	eq
 8004818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800481c:	4293      	cmp	r3, r2
 800481e:	bfc4      	itt	gt
 8004820:	1a9b      	subgt	r3, r3, r2
 8004822:	18ed      	addgt	r5, r5, r3
 8004824:	42b5      	cmp	r5, r6
 8004826:	d11a      	bne.n	800485e <_printf_common+0xd2>
 8004828:	2000      	movs	r0, #0
 800482a:	e008      	b.n	800483e <_printf_common+0xb2>
 800482c:	2301      	movs	r3, #1
 800482e:	4652      	mov	r2, sl
 8004830:	4641      	mov	r1, r8
 8004832:	4638      	mov	r0, r7
 8004834:	47c8      	blx	r9
 8004836:	3001      	adds	r0, #1
 8004838:	d103      	bne.n	8004842 <_printf_common+0xb6>
 800483a:	f04f 30ff 	mov.w	r0, #4294967295
 800483e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004842:	3501      	adds	r5, #1
 8004844:	e7c1      	b.n	80047ca <_printf_common+0x3e>
 8004846:	2030      	movs	r0, #48	@ 0x30
 8004848:	18e1      	adds	r1, r4, r3
 800484a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004854:	4422      	add	r2, r4
 8004856:	3302      	adds	r3, #2
 8004858:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800485c:	e7c2      	b.n	80047e4 <_printf_common+0x58>
 800485e:	2301      	movs	r3, #1
 8004860:	4622      	mov	r2, r4
 8004862:	4641      	mov	r1, r8
 8004864:	4638      	mov	r0, r7
 8004866:	47c8      	blx	r9
 8004868:	3001      	adds	r0, #1
 800486a:	d0e6      	beq.n	800483a <_printf_common+0xae>
 800486c:	3601      	adds	r6, #1
 800486e:	e7d9      	b.n	8004824 <_printf_common+0x98>

08004870 <_printf_i>:
 8004870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	7e0f      	ldrb	r7, [r1, #24]
 8004876:	4691      	mov	r9, r2
 8004878:	2f78      	cmp	r7, #120	@ 0x78
 800487a:	4680      	mov	r8, r0
 800487c:	460c      	mov	r4, r1
 800487e:	469a      	mov	sl, r3
 8004880:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004886:	d807      	bhi.n	8004898 <_printf_i+0x28>
 8004888:	2f62      	cmp	r7, #98	@ 0x62
 800488a:	d80a      	bhi.n	80048a2 <_printf_i+0x32>
 800488c:	2f00      	cmp	r7, #0
 800488e:	f000 80d1 	beq.w	8004a34 <_printf_i+0x1c4>
 8004892:	2f58      	cmp	r7, #88	@ 0x58
 8004894:	f000 80b8 	beq.w	8004a08 <_printf_i+0x198>
 8004898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800489c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048a0:	e03a      	b.n	8004918 <_printf_i+0xa8>
 80048a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048a6:	2b15      	cmp	r3, #21
 80048a8:	d8f6      	bhi.n	8004898 <_printf_i+0x28>
 80048aa:	a101      	add	r1, pc, #4	@ (adr r1, 80048b0 <_printf_i+0x40>)
 80048ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048b0:	08004909 	.word	0x08004909
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	08004899 	.word	0x08004899
 80048bc:	08004899 	.word	0x08004899
 80048c0:	08004899 	.word	0x08004899
 80048c4:	08004899 	.word	0x08004899
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	08004899 	.word	0x08004899
 80048d0:	08004899 	.word	0x08004899
 80048d4:	08004899 	.word	0x08004899
 80048d8:	08004899 	.word	0x08004899
 80048dc:	08004a1b 	.word	0x08004a1b
 80048e0:	08004947 	.word	0x08004947
 80048e4:	080049d5 	.word	0x080049d5
 80048e8:	08004899 	.word	0x08004899
 80048ec:	08004899 	.word	0x08004899
 80048f0:	08004a3d 	.word	0x08004a3d
 80048f4:	08004899 	.word	0x08004899
 80048f8:	08004947 	.word	0x08004947
 80048fc:	08004899 	.word	0x08004899
 8004900:	08004899 	.word	0x08004899
 8004904:	080049dd 	.word	0x080049dd
 8004908:	6833      	ldr	r3, [r6, #0]
 800490a:	1d1a      	adds	r2, r3, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6032      	str	r2, [r6, #0]
 8004910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004918:	2301      	movs	r3, #1
 800491a:	e09c      	b.n	8004a56 <_printf_i+0x1e6>
 800491c:	6833      	ldr	r3, [r6, #0]
 800491e:	6820      	ldr	r0, [r4, #0]
 8004920:	1d19      	adds	r1, r3, #4
 8004922:	6031      	str	r1, [r6, #0]
 8004924:	0606      	lsls	r6, r0, #24
 8004926:	d501      	bpl.n	800492c <_printf_i+0xbc>
 8004928:	681d      	ldr	r5, [r3, #0]
 800492a:	e003      	b.n	8004934 <_printf_i+0xc4>
 800492c:	0645      	lsls	r5, r0, #25
 800492e:	d5fb      	bpl.n	8004928 <_printf_i+0xb8>
 8004930:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004934:	2d00      	cmp	r5, #0
 8004936:	da03      	bge.n	8004940 <_printf_i+0xd0>
 8004938:	232d      	movs	r3, #45	@ 0x2d
 800493a:	426d      	negs	r5, r5
 800493c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004940:	230a      	movs	r3, #10
 8004942:	4858      	ldr	r0, [pc, #352]	@ (8004aa4 <_printf_i+0x234>)
 8004944:	e011      	b.n	800496a <_printf_i+0xfa>
 8004946:	6821      	ldr	r1, [r4, #0]
 8004948:	6833      	ldr	r3, [r6, #0]
 800494a:	0608      	lsls	r0, r1, #24
 800494c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004950:	d402      	bmi.n	8004958 <_printf_i+0xe8>
 8004952:	0649      	lsls	r1, r1, #25
 8004954:	bf48      	it	mi
 8004956:	b2ad      	uxthmi	r5, r5
 8004958:	2f6f      	cmp	r7, #111	@ 0x6f
 800495a:	6033      	str	r3, [r6, #0]
 800495c:	bf14      	ite	ne
 800495e:	230a      	movne	r3, #10
 8004960:	2308      	moveq	r3, #8
 8004962:	4850      	ldr	r0, [pc, #320]	@ (8004aa4 <_printf_i+0x234>)
 8004964:	2100      	movs	r1, #0
 8004966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800496a:	6866      	ldr	r6, [r4, #4]
 800496c:	2e00      	cmp	r6, #0
 800496e:	60a6      	str	r6, [r4, #8]
 8004970:	db05      	blt.n	800497e <_printf_i+0x10e>
 8004972:	6821      	ldr	r1, [r4, #0]
 8004974:	432e      	orrs	r6, r5
 8004976:	f021 0104 	bic.w	r1, r1, #4
 800497a:	6021      	str	r1, [r4, #0]
 800497c:	d04b      	beq.n	8004a16 <_printf_i+0x1a6>
 800497e:	4616      	mov	r6, r2
 8004980:	fbb5 f1f3 	udiv	r1, r5, r3
 8004984:	fb03 5711 	mls	r7, r3, r1, r5
 8004988:	5dc7      	ldrb	r7, [r0, r7]
 800498a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800498e:	462f      	mov	r7, r5
 8004990:	42bb      	cmp	r3, r7
 8004992:	460d      	mov	r5, r1
 8004994:	d9f4      	bls.n	8004980 <_printf_i+0x110>
 8004996:	2b08      	cmp	r3, #8
 8004998:	d10b      	bne.n	80049b2 <_printf_i+0x142>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	07df      	lsls	r7, r3, #31
 800499e:	d508      	bpl.n	80049b2 <_printf_i+0x142>
 80049a0:	6923      	ldr	r3, [r4, #16]
 80049a2:	6861      	ldr	r1, [r4, #4]
 80049a4:	4299      	cmp	r1, r3
 80049a6:	bfde      	ittt	le
 80049a8:	2330      	movle	r3, #48	@ 0x30
 80049aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049b2:	1b92      	subs	r2, r2, r6
 80049b4:	6122      	str	r2, [r4, #16]
 80049b6:	464b      	mov	r3, r9
 80049b8:	4621      	mov	r1, r4
 80049ba:	4640      	mov	r0, r8
 80049bc:	f8cd a000 	str.w	sl, [sp]
 80049c0:	aa03      	add	r2, sp, #12
 80049c2:	f7ff fee3 	bl	800478c <_printf_common>
 80049c6:	3001      	adds	r0, #1
 80049c8:	d14a      	bne.n	8004a60 <_printf_i+0x1f0>
 80049ca:	f04f 30ff 	mov.w	r0, #4294967295
 80049ce:	b004      	add	sp, #16
 80049d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	f043 0320 	orr.w	r3, r3, #32
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	2778      	movs	r7, #120	@ 0x78
 80049de:	4832      	ldr	r0, [pc, #200]	@ (8004aa8 <_printf_i+0x238>)
 80049e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	6831      	ldr	r1, [r6, #0]
 80049e8:	061f      	lsls	r7, r3, #24
 80049ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80049ee:	d402      	bmi.n	80049f6 <_printf_i+0x186>
 80049f0:	065f      	lsls	r7, r3, #25
 80049f2:	bf48      	it	mi
 80049f4:	b2ad      	uxthmi	r5, r5
 80049f6:	6031      	str	r1, [r6, #0]
 80049f8:	07d9      	lsls	r1, r3, #31
 80049fa:	bf44      	itt	mi
 80049fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004a00:	6023      	strmi	r3, [r4, #0]
 8004a02:	b11d      	cbz	r5, 8004a0c <_printf_i+0x19c>
 8004a04:	2310      	movs	r3, #16
 8004a06:	e7ad      	b.n	8004964 <_printf_i+0xf4>
 8004a08:	4826      	ldr	r0, [pc, #152]	@ (8004aa4 <_printf_i+0x234>)
 8004a0a:	e7e9      	b.n	80049e0 <_printf_i+0x170>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f023 0320 	bic.w	r3, r3, #32
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	e7f6      	b.n	8004a04 <_printf_i+0x194>
 8004a16:	4616      	mov	r6, r2
 8004a18:	e7bd      	b.n	8004996 <_printf_i+0x126>
 8004a1a:	6833      	ldr	r3, [r6, #0]
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	1d18      	adds	r0, r3, #4
 8004a20:	6961      	ldr	r1, [r4, #20]
 8004a22:	6030      	str	r0, [r6, #0]
 8004a24:	062e      	lsls	r6, r5, #24
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	d501      	bpl.n	8004a2e <_printf_i+0x1be>
 8004a2a:	6019      	str	r1, [r3, #0]
 8004a2c:	e002      	b.n	8004a34 <_printf_i+0x1c4>
 8004a2e:	0668      	lsls	r0, r5, #25
 8004a30:	d5fb      	bpl.n	8004a2a <_printf_i+0x1ba>
 8004a32:	8019      	strh	r1, [r3, #0]
 8004a34:	2300      	movs	r3, #0
 8004a36:	4616      	mov	r6, r2
 8004a38:	6123      	str	r3, [r4, #16]
 8004a3a:	e7bc      	b.n	80049b6 <_printf_i+0x146>
 8004a3c:	6833      	ldr	r3, [r6, #0]
 8004a3e:	2100      	movs	r1, #0
 8004a40:	1d1a      	adds	r2, r3, #4
 8004a42:	6032      	str	r2, [r6, #0]
 8004a44:	681e      	ldr	r6, [r3, #0]
 8004a46:	6862      	ldr	r2, [r4, #4]
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f000 f859 	bl	8004b00 <memchr>
 8004a4e:	b108      	cbz	r0, 8004a54 <_printf_i+0x1e4>
 8004a50:	1b80      	subs	r0, r0, r6
 8004a52:	6060      	str	r0, [r4, #4]
 8004a54:	6863      	ldr	r3, [r4, #4]
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a5e:	e7aa      	b.n	80049b6 <_printf_i+0x146>
 8004a60:	4632      	mov	r2, r6
 8004a62:	4649      	mov	r1, r9
 8004a64:	4640      	mov	r0, r8
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	47d0      	blx	sl
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d0ad      	beq.n	80049ca <_printf_i+0x15a>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	079b      	lsls	r3, r3, #30
 8004a72:	d413      	bmi.n	8004a9c <_printf_i+0x22c>
 8004a74:	68e0      	ldr	r0, [r4, #12]
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	4298      	cmp	r0, r3
 8004a7a:	bfb8      	it	lt
 8004a7c:	4618      	movlt	r0, r3
 8004a7e:	e7a6      	b.n	80049ce <_printf_i+0x15e>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4632      	mov	r2, r6
 8004a84:	4649      	mov	r1, r9
 8004a86:	4640      	mov	r0, r8
 8004a88:	47d0      	blx	sl
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d09d      	beq.n	80049ca <_printf_i+0x15a>
 8004a8e:	3501      	adds	r5, #1
 8004a90:	68e3      	ldr	r3, [r4, #12]
 8004a92:	9903      	ldr	r1, [sp, #12]
 8004a94:	1a5b      	subs	r3, r3, r1
 8004a96:	42ab      	cmp	r3, r5
 8004a98:	dcf2      	bgt.n	8004a80 <_printf_i+0x210>
 8004a9a:	e7eb      	b.n	8004a74 <_printf_i+0x204>
 8004a9c:	2500      	movs	r5, #0
 8004a9e:	f104 0619 	add.w	r6, r4, #25
 8004aa2:	e7f5      	b.n	8004a90 <_printf_i+0x220>
 8004aa4:	08004c47 	.word	0x08004c47
 8004aa8:	08004c58 	.word	0x08004c58

08004aac <memmove>:
 8004aac:	4288      	cmp	r0, r1
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	eb01 0402 	add.w	r4, r1, r2
 8004ab4:	d902      	bls.n	8004abc <memmove+0x10>
 8004ab6:	4284      	cmp	r4, r0
 8004ab8:	4623      	mov	r3, r4
 8004aba:	d807      	bhi.n	8004acc <memmove+0x20>
 8004abc:	1e43      	subs	r3, r0, #1
 8004abe:	42a1      	cmp	r1, r4
 8004ac0:	d008      	beq.n	8004ad4 <memmove+0x28>
 8004ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aca:	e7f8      	b.n	8004abe <memmove+0x12>
 8004acc:	4601      	mov	r1, r0
 8004ace:	4402      	add	r2, r0
 8004ad0:	428a      	cmp	r2, r1
 8004ad2:	d100      	bne.n	8004ad6 <memmove+0x2a>
 8004ad4:	bd10      	pop	{r4, pc}
 8004ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ade:	e7f7      	b.n	8004ad0 <memmove+0x24>

08004ae0 <_sbrk_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	4d05      	ldr	r5, [pc, #20]	@ (8004afc <_sbrk_r+0x1c>)
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	f7fc fa48 	bl	8000f80 <_sbrk>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <_sbrk_r+0x1a>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b103      	cbz	r3, 8004afa <_sbrk_r+0x1a>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	200002ac 	.word	0x200002ac

08004b00 <memchr>:
 8004b00:	4603      	mov	r3, r0
 8004b02:	b510      	push	{r4, lr}
 8004b04:	b2c9      	uxtb	r1, r1
 8004b06:	4402      	add	r2, r0
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	d101      	bne.n	8004b12 <memchr+0x12>
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e003      	b.n	8004b1a <memchr+0x1a>
 8004b12:	7804      	ldrb	r4, [r0, #0]
 8004b14:	3301      	adds	r3, #1
 8004b16:	428c      	cmp	r4, r1
 8004b18:	d1f6      	bne.n	8004b08 <memchr+0x8>
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <memcpy>:
 8004b1c:	440a      	add	r2, r1
 8004b1e:	4291      	cmp	r1, r2
 8004b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b24:	d100      	bne.n	8004b28 <memcpy+0xc>
 8004b26:	4770      	bx	lr
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b2e:	4291      	cmp	r1, r2
 8004b30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b34:	d1f9      	bne.n	8004b2a <memcpy+0xe>
 8004b36:	bd10      	pop	{r4, pc}

08004b38 <_realloc_r>:
 8004b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3c:	4607      	mov	r7, r0
 8004b3e:	4614      	mov	r4, r2
 8004b40:	460d      	mov	r5, r1
 8004b42:	b921      	cbnz	r1, 8004b4e <_realloc_r+0x16>
 8004b44:	4611      	mov	r1, r2
 8004b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4a:	f7ff bc3b 	b.w	80043c4 <_malloc_r>
 8004b4e:	b92a      	cbnz	r2, 8004b5c <_realloc_r+0x24>
 8004b50:	f7ff fbce 	bl	80042f0 <_free_r>
 8004b54:	4625      	mov	r5, r4
 8004b56:	4628      	mov	r0, r5
 8004b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b5c:	f000 f81a 	bl	8004b94 <_malloc_usable_size_r>
 8004b60:	4284      	cmp	r4, r0
 8004b62:	4606      	mov	r6, r0
 8004b64:	d802      	bhi.n	8004b6c <_realloc_r+0x34>
 8004b66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b6a:	d8f4      	bhi.n	8004b56 <_realloc_r+0x1e>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4638      	mov	r0, r7
 8004b70:	f7ff fc28 	bl	80043c4 <_malloc_r>
 8004b74:	4680      	mov	r8, r0
 8004b76:	b908      	cbnz	r0, 8004b7c <_realloc_r+0x44>
 8004b78:	4645      	mov	r5, r8
 8004b7a:	e7ec      	b.n	8004b56 <_realloc_r+0x1e>
 8004b7c:	42b4      	cmp	r4, r6
 8004b7e:	4622      	mov	r2, r4
 8004b80:	4629      	mov	r1, r5
 8004b82:	bf28      	it	cs
 8004b84:	4632      	movcs	r2, r6
 8004b86:	f7ff ffc9 	bl	8004b1c <memcpy>
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7ff fbaf 	bl	80042f0 <_free_r>
 8004b92:	e7f1      	b.n	8004b78 <_realloc_r+0x40>

08004b94 <_malloc_usable_size_r>:
 8004b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b98:	1f18      	subs	r0, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bfbc      	itt	lt
 8004b9e:	580b      	ldrlt	r3, [r1, r0]
 8004ba0:	18c0      	addlt	r0, r0, r3
 8004ba2:	4770      	bx	lr

08004ba4 <_init>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr

08004bb0 <_fini>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr
