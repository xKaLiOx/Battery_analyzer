
Battery_analyzer_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080038d4  080038d4  000048d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003950  08003950  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003950  08003950  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003950  08003950  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003950  08003950  00004950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003954  08003954  00004954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003958  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000005c  080039b4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080039b4  000052b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad2f  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f5  00000000  00000000  0000fdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000120b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000900  00000000  00000000  00012c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001883b  00000000  00000000  00013578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7dc  00000000  00000000  0002bdb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d6df  00000000  00000000  0003a58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7c6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003428  00000000  00000000  000c7cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000cb0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080038bc 	.word	0x080038bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080038bc 	.word	0x080038bc

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b20      	ldr	r3, [pc, #128]	@ (80001e0 <MX_ADC1_Init+0x94>)
 800015e:	4a21      	ldr	r2, [pc, #132]	@ (80001e4 <MX_ADC1_Init+0x98>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b1f      	ldr	r3, [pc, #124]	@ (80001e0 <MX_ADC1_Init+0x94>)
 8000164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016a:	4b1d      	ldr	r3, [pc, #116]	@ (80001e0 <MX_ADC1_Init+0x94>)
 800016c:	2200      	movs	r2, #0
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b1b      	ldr	r3, [pc, #108]	@ (80001e0 <MX_ADC1_Init+0x94>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000176:	4b1a      	ldr	r3, [pc, #104]	@ (80001e0 <MX_ADC1_Init+0x94>)
 8000178:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b18      	ldr	r3, [pc, #96]	@ (80001e0 <MX_ADC1_Init+0x94>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000184:	4b16      	ldr	r3, [pc, #88]	@ (80001e0 <MX_ADC1_Init+0x94>)
 8000186:	2202      	movs	r2, #2
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4815      	ldr	r0, [pc, #84]	@ (80001e0 <MX_ADC1_Init+0x94>)
 800018c:	f000 fca6 	bl	8000adc <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 f9fb 	bl	8000590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800019a:	2311      	movs	r3, #17
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a2:	2300      	movs	r3, #0
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	480d      	ldr	r0, [pc, #52]	@ (80001e0 <MX_ADC1_Init+0x94>)
 80001ac:	f000 fe40 	bl	8000e30 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 f9eb 	bl	8000590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4806      	ldr	r0, [pc, #24]	@ (80001e0 <MX_ADC1_Init+0x94>)
 80001c8:	f000 fe32 	bl	8000e30 <HAL_ADC_ConfigChannel>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d2:	f000 f9dd 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001d6:	bf00      	nop
 80001d8:	3710      	adds	r7, #16
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000078 	.word	0x20000078
 80001e4:	40012400 	.word	0x40012400

080001e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b088      	sub	sp, #32
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f0:	f107 0310 	add.w	r3, r7, #16
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a18      	ldr	r2, [pc, #96]	@ (8000264 <HAL_ADC_MspInit+0x7c>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d129      	bne.n	800025c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000208:	4b17      	ldr	r3, [pc, #92]	@ (8000268 <HAL_ADC_MspInit+0x80>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a16      	ldr	r2, [pc, #88]	@ (8000268 <HAL_ADC_MspInit+0x80>)
 800020e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b14      	ldr	r3, [pc, #80]	@ (8000268 <HAL_ADC_MspInit+0x80>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000220:	4b11      	ldr	r3, [pc, #68]	@ (8000268 <HAL_ADC_MspInit+0x80>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a10      	ldr	r2, [pc, #64]	@ (8000268 <HAL_ADC_MspInit+0x80>)
 8000226:	f043 0304 	orr.w	r3, r3, #4
 800022a:	6193      	str	r3, [r2, #24]
 800022c:	4b0e      	ldr	r3, [pc, #56]	@ (8000268 <HAL_ADC_MspInit+0x80>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f003 0304 	and.w	r3, r3, #4
 8000234:	60bb      	str	r3, [r7, #8]
 8000236:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000238:	2301      	movs	r3, #1
 800023a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800023c:	2303      	movs	r3, #3
 800023e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	4619      	mov	r1, r3
 8000246:	4809      	ldr	r0, [pc, #36]	@ (800026c <HAL_ADC_MspInit+0x84>)
 8000248:	f001 f842 	bl	80012d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	2012      	movs	r0, #18
 8000252:	f001 f806 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000256:	2012      	movs	r0, #18
 8000258:	f001 f81f 	bl	800129a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40012400 	.word	0x40012400
 8000268:	40021000 	.word	0x40021000
 800026c:	40010800 	.word	0x40010800

08000270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 0310 	add.w	r3, r7, #16
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000284:	4b47      	ldr	r3, [pc, #284]	@ (80003a4 <MX_GPIO_Init+0x134>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a46      	ldr	r2, [pc, #280]	@ (80003a4 <MX_GPIO_Init+0x134>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b44      	ldr	r3, [pc, #272]	@ (80003a4 <MX_GPIO_Init+0x134>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0310 	and.w	r3, r3, #16
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800029c:	4b41      	ldr	r3, [pc, #260]	@ (80003a4 <MX_GPIO_Init+0x134>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a40      	ldr	r2, [pc, #256]	@ (80003a4 <MX_GPIO_Init+0x134>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b3e      	ldr	r3, [pc, #248]	@ (80003a4 <MX_GPIO_Init+0x134>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0320 	and.w	r3, r3, #32
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b4:	4b3b      	ldr	r3, [pc, #236]	@ (80003a4 <MX_GPIO_Init+0x134>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a3a      	ldr	r2, [pc, #232]	@ (80003a4 <MX_GPIO_Init+0x134>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b38      	ldr	r3, [pc, #224]	@ (80003a4 <MX_GPIO_Init+0x134>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0304 	and.w	r3, r3, #4
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002cc:	4b35      	ldr	r3, [pc, #212]	@ (80003a4 <MX_GPIO_Init+0x134>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a34      	ldr	r2, [pc, #208]	@ (80003a4 <MX_GPIO_Init+0x134>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b32      	ldr	r3, [pc, #200]	@ (80003a4 <MX_GPIO_Init+0x134>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0308 	and.w	r3, r3, #8
 80002e0:	603b      	str	r3, [r7, #0]
 80002e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED_Pin|CHARGING_STATE_Pin, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80002ea:	482f      	ldr	r0, [pc, #188]	@ (80003a8 <MX_GPIO_Init+0x138>)
 80002ec:	f001 f974 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80002f6:	482d      	ldr	r0, [pc, #180]	@ (80003ac <MX_GPIO_Init+0x13c>)
 80002f8:	f001 f96e 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000302:	482b      	ldr	r0, [pc, #172]	@ (80003b0 <MX_GPIO_Init+0x140>)
 8000304:	f001 f968 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_LED_Pin CHARGING_STATE_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|CHARGING_STATE_Pin;
 8000308:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030e:	2301      	movs	r3, #1
 8000310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000316:	2302      	movs	r3, #2
 8000318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	4619      	mov	r1, r3
 8000320:	4821      	ldr	r0, [pc, #132]	@ (80003a8 <MX_GPIO_Init+0x138>)
 8000322:	f000 ffd5 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_set_Pin Button_plus_Pin Button_minus_Pin */
  GPIO_InitStruct.Pin = Button_set_Pin|Button_plus_Pin|Button_minus_Pin;
 8000326:	f640 4302 	movw	r3, #3074	@ 0xc02
 800032a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800032c:	4b21      	ldr	r3, [pc, #132]	@ (80003b4 <MX_GPIO_Init+0x144>)
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	481d      	ldr	r0, [pc, #116]	@ (80003b0 <MX_GPIO_Init+0x140>)
 800033c:	f000 ffc8 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 8000340:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800034a:	2302      	movs	r3, #2
 800034c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034e:	2303      	movs	r3, #3
 8000350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4619      	mov	r1, r3
 8000358:	4814      	ldr	r0, [pc, #80]	@ (80003ac <MX_GPIO_Init+0x13c>)
 800035a:	f000 ffb9 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 800035e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800036c:	2303      	movs	r3, #3
 800036e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	480e      	ldr	r0, [pc, #56]	@ (80003b0 <MX_GPIO_Init+0x140>)
 8000378:	f000 ffaa 	bl	80012d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800037c:	2200      	movs	r2, #0
 800037e:	2100      	movs	r1, #0
 8000380:	2007      	movs	r0, #7
 8000382:	f000 ff6e 	bl	8001262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000386:	2007      	movs	r0, #7
 8000388:	f000 ff87 	bl	800129a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2100      	movs	r1, #0
 8000390:	2028      	movs	r0, #40	@ 0x28
 8000392:	f000 ff66 	bl	8001262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000396:	2028      	movs	r0, #40	@ 0x28
 8000398:	f000 ff7f 	bl	800129a <HAL_NVIC_EnableIRQ>

}
 800039c:	bf00      	nop
 800039e:	3720      	adds	r7, #32
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40011000 	.word	0x40011000
 80003ac:	40010800 	.word	0x40010800
 80003b0:	40010c00 	.word	0x40010c00
 80003b4:	10110000 	.word	0x10110000

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 fb08 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f86a 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f7ff ff54 	bl	8000270 <MX_GPIO_Init>
  MX_TIM4_Init();
 80003c8:	f000 f9f8 	bl	80007bc <MX_TIM4_Init>
  MX_TIM3_Init();
 80003cc:	f000 f9a8 	bl	8000720 <MX_TIM3_Init>
  MX_ADC1_Init();
 80003d0:	f7ff febc 	bl	800014c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK)
 80003d4:	4829      	ldr	r0, [pc, #164]	@ (800047c <main+0xc4>)
 80003d6:	f001 fe37 	bl	8002048 <HAL_TIM_Base_Start_IT>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d007      	beq.n	80003f0 <main+0x38>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e6:	4826      	ldr	r0, [pc, #152]	@ (8000480 <main+0xc8>)
 80003e8:	f001 f8f6 	bl	80015d8 <HAL_GPIO_WritePin>
		Error_Handler();
 80003ec:	f000 f8d0 	bl	8000590 <Error_Handler>
	}
	if(HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK)
 80003f0:	4824      	ldr	r0, [pc, #144]	@ (8000484 <main+0xcc>)
 80003f2:	f001 fe29 	bl	8002048 <HAL_TIM_Base_Start_IT>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d007      	beq.n	800040c <main+0x54>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000402:	481f      	ldr	r0, [pc, #124]	@ (8000480 <main+0xc8>)
 8000404:	f001 f8e8 	bl	80015d8 <HAL_GPIO_WritePin>
		Error_Handler();
 8000408:	f000 f8c2 	bl	8000590 <Error_Handler>
	}

	LCD_Init();
 800040c:	f002 fd14 	bl	8002e38 <LCD_Init>
	sprintf(LCD_buffer,"Battery analyzer");
 8000410:	491d      	ldr	r1, [pc, #116]	@ (8000488 <main+0xd0>)
 8000412:	481e      	ldr	r0, [pc, #120]	@ (800048c <main+0xd4>)
 8000414:	f002 fda2 	bl	8002f5c <siprintf>
	LCD_SEND_STR(LCD_buffer, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	481b      	ldr	r0, [pc, #108]	@ (800048c <main+0xd4>)
 800041e:	f002 fd63 	bl	8002ee8 <LCD_SEND_STR>
	sprintf(LCD_buffer,"Initializing");
 8000422:	491b      	ldr	r1, [pc, #108]	@ (8000490 <main+0xd8>)
 8000424:	4819      	ldr	r0, [pc, #100]	@ (800048c <main+0xd4>)
 8000426:	f002 fd99 	bl	8002f5c <siprintf>
	LCD_SEND_STR(LCD_buffer, 0, 1);
 800042a:	2201      	movs	r2, #1
 800042c:	2100      	movs	r1, #0
 800042e:	4817      	ldr	r0, [pc, #92]	@ (800048c <main+0xd4>)
 8000430:	f002 fd5a 	bl	8002ee8 <LCD_SEND_STR>
	HAL_Delay(1000);
 8000434:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000438:	f000 fb2c 	bl	8000a94 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_Delay(1000);
 800043c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000440:	f000 fb28 	bl	8000a94 <HAL_Delay>
		HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8000444:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000448:	480d      	ldr	r0, [pc, #52]	@ (8000480 <main+0xc8>)
 800044a:	f001 f8dd 	bl	8001608 <HAL_GPIO_TogglePin>
		LCD_SEND_STR(LCD_buffer, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	480e      	ldr	r0, [pc, #56]	@ (800048c <main+0xd4>)
 8000454:	f002 fd48 	bl	8002ee8 <LCD_SEND_STR>
		switch(STATE_MCU)
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <main+0xdc>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d80b      	bhi.n	8000478 <main+0xc0>
 8000460:	a201      	add	r2, pc, #4	@ (adr r2, 8000468 <main+0xb0>)
 8000462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000466:	bf00      	nop
 8000468:	08000479 	.word	0x08000479
 800046c:	08000479 	.word	0x08000479
 8000470:	08000479 	.word	0x08000479
 8000474:	08000479 	.word	0x08000479
			break;
		}

		default:

			break;
 8000478:	bf00      	nop
		HAL_Delay(1000);
 800047a:	e7df      	b.n	800043c <main+0x84>
 800047c:	200000d0 	.word	0x200000d0
 8000480:	40011000 	.word	0x40011000
 8000484:	20000118 	.word	0x20000118
 8000488:	080038d4 	.word	0x080038d4
 800048c:	200000ac 	.word	0x200000ac
 8000490:	080038e8 	.word	0x080038e8
 8000494:	200000a8 	.word	0x200000a8

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b094      	sub	sp, #80	@ 0x50
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004a2:	2228      	movs	r2, #40	@ 0x28
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 fd7a 	bl	8002fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c8:	2301      	movs	r3, #1
 80004ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004da:	4618      	mov	r0, r3
 80004dc:	f001 f8d0 	bl	8001680 <HAL_RCC_OscConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x52>
  {
    Error_Handler();
 80004e6:	f000 f853 	bl	8000590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	230f      	movs	r3, #15
 80004ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80004ee:	2301      	movs	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f001 fb3d 	bl	8001b84 <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000510:	f000 f83e 	bl	8000590 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000514:	2302      	movs	r3, #2
 8000516:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fc8c 	bl	8001e3c <HAL_RCCEx_PeriphCLKConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800052a:	f000 f831 	bl	8000590 <Error_Handler>
  }
}
 800052e:	bf00      	nop
 8000530:	3750      	adds	r7, #80	@ 0x50
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <DELAY_US>:

/* USER CODE BEGIN 4 */
void DELAY_US(uint16_t TIME_US)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	80fb      	strh	r3, [r7, #6]
    uint32_t old_timer_value = TIM3->CNT;
 8000542:	4b12      	ldr	r3, [pc, #72]	@ (800058c <DELAY_US+0x54>)
 8000544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000546:	60fb      	str	r3, [r7, #12]
    uint32_t target_time = (old_timer_value + TIME_US) % (TIM3->ARR + 1);
 8000548:	88fa      	ldrh	r2, [r7, #6]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	4a0f      	ldr	r2, [pc, #60]	@ (800058c <DELAY_US+0x54>)
 8000550:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000552:	3201      	adds	r2, #1
 8000554:	fbb3 f1f2 	udiv	r1, r3, r2
 8000558:	fb01 f202 	mul.w	r2, r1, r2
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	60bb      	str	r3, [r7, #8]

    if (target_time < old_timer_value)  // Handle timer overflow
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	429a      	cmp	r2, r3
 8000566:	d205      	bcs.n	8000574 <DELAY_US+0x3c>
    {
        while (TIM3->CNT >= old_timer_value);  // Wait for overflow
 8000568:	bf00      	nop
 800056a:	4b08      	ldr	r3, [pc, #32]	@ (800058c <DELAY_US+0x54>)
 800056c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	429a      	cmp	r2, r3
 8000572:	d9fa      	bls.n	800056a <DELAY_US+0x32>
    }

    while (TIM3->CNT < target_time);  // Wait until target time is reached
 8000574:	bf00      	nop
 8000576:	4b05      	ldr	r3, [pc, #20]	@ (800058c <DELAY_US+0x54>)
 8000578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	429a      	cmp	r2, r3
 800057e:	d8fa      	bhi.n	8000576 <DELAY_US+0x3e>
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40000400 	.word	0x40000400

08000590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
}
 8000596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <Error_Handler+0x8>

0800059c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <HAL_MspInit+0x5c>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a14      	ldr	r2, [pc, #80]	@ (80005f8 <HAL_MspInit+0x5c>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <HAL_MspInit+0x5c>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <HAL_MspInit+0x5c>)
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c4:	61d3      	str	r3, [r2, #28]
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <HAL_MspInit+0x60>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	4a04      	ldr	r2, [pc, #16]	@ (80005fc <HAL_MspInit+0x60>)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010000 	.word	0x40010000

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <NMI_Handler+0x4>

08000608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <MemManage_Handler+0x4>

08000618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <UsageFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000650:	f000 fa04 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_set_Pin);
 800065c:	2002      	movs	r0, #2
 800065e:	f000 ffed 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800066c:	4802      	ldr	r0, [pc, #8]	@ (8000678 <ADC1_2_IRQHandler+0x10>)
 800066e:	f000 fb0d 	bl	8000c8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000078 	.word	0x20000078

0800067c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000680:	4802      	ldr	r0, [pc, #8]	@ (800068c <TIM4_IRQHandler+0x10>)
 8000682:	f001 fd8b 	bl	800219c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000118 	.word	0x20000118

08000690 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_plus_Pin);
 8000694:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000698:	f000 ffd0 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_minus_Pin);
 800069c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80006a0:	f000 ffcc 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b0:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <_sbrk+0x5c>)
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <_sbrk+0x60>)
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d102      	bne.n	80006ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <_sbrk+0x64>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <_sbrk+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d207      	bcs.n	80006e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d8:	f002 fc6a 	bl	8002fb0 <__errno>
 80006dc:	4603      	mov	r3, r0
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	e009      	b.n	80006fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a05      	ldr	r2, [pc, #20]	@ (800070c <_sbrk+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20005000 	.word	0x20005000
 8000708:	00000400 	.word	0x00000400
 800070c:	200000cc 	.word	0x200000cc
 8000710:	200002b0 	.word	0x200002b0

08000714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_TIM3_Init+0x94>)
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <MX_TIM3_Init+0x98>)
 8000740:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_TIM3_Init+0x94>)
 8000744:	2207      	movs	r2, #7
 8000746:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_TIM3_Init+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_TIM3_Init+0x94>)
 8000750:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000754:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_TIM3_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_TIM3_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000762:	4814      	ldr	r0, [pc, #80]	@ (80007b4 <MX_TIM3_Init+0x94>)
 8000764:	f001 fc20 	bl	8001fa8 <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800076e:	f7ff ff0f 	bl	8000590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4619      	mov	r1, r3
 800077e:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_TIM3_Init+0x94>)
 8000780:	f001 febe 	bl	8002500 <HAL_TIM_ConfigClockSource>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800078a:	f7ff ff01 	bl	8000590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800078e:	2320      	movs	r3, #32
 8000790:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <MX_TIM3_Init+0x94>)
 800079c:	f002 fa30 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007a6:	f7ff fef3 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000d0 	.word	0x200000d0
 80007b8:	40000400 	.word	0x40000400

080007bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	@ 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 80007ee:	4a2d      	ldr	r2, [pc, #180]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 80007fe:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 8000800:	22c7      	movs	r2, #199	@ 0xc7
 8000802:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000810:	4823      	ldr	r0, [pc, #140]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 8000812:	f001 fbc9 	bl	8001fa8 <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800081c:	f7ff feb8 	bl	8000590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000826:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800082a:	4619      	mov	r1, r3
 800082c:	481c      	ldr	r0, [pc, #112]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 800082e:	f001 fe67 	bl	8002500 <HAL_TIM_ConfigClockSource>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000838:	f7ff feaa 	bl	8000590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800083c:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 800083e:	f001 fc55 	bl	80020ec <HAL_TIM_PWM_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000848:	f7ff fea2 	bl	8000590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4619      	mov	r1, r3
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 800085c:	f002 f9d0 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000866:	f7ff fe93 	bl	8000590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	@ 0x60
 800086c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	220c      	movs	r2, #12
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 8000882:	f001 fd7b 	bl	800237c <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800088c:	f7ff fe80 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM4_Init+0xe4>)
 8000892:	f000 f843 	bl	800091c <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3738      	adds	r7, #56	@ 0x38
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000118 	.word	0x20000118
 80008a4:	40000800 	.word	0x40000800

080008a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a16      	ldr	r2, [pc, #88]	@ (8000910 <HAL_TIM_Base_MspInit+0x68>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10c      	bne.n	80008d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <HAL_TIM_Base_MspInit+0x6c>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <HAL_TIM_Base_MspInit+0x6c>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <HAL_TIM_Base_MspInit+0x6c>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80008d2:	e018      	b.n	8000906 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000918 <HAL_TIM_Base_MspInit+0x70>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d113      	bne.n	8000906 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <HAL_TIM_Base_MspInit+0x6c>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000914 <HAL_TIM_Base_MspInit+0x6c>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <HAL_TIM_Base_MspInit+0x6c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	201e      	movs	r0, #30
 80008fc:	f000 fcb1 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000900:	201e      	movs	r0, #30
 8000902:	f000 fcca 	bl	800129a <HAL_NVIC_EnableIRQ>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40000400 	.word	0x40000400
 8000914:	40021000 	.word	0x40021000
 8000918:	40000800 	.word	0x40000800

0800091c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <HAL_TIM_MspPostInit+0x5c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d118      	bne.n	800096e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <HAL_TIM_MspPostInit+0x60>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <HAL_TIM_MspPostInit+0x60>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_TIM_MspPostInit+0x60>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_MOSFET_Pin;
 8000954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2302      	movs	r3, #2
 8000960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_MOSFET_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	@ (8000980 <HAL_TIM_MspPostInit+0x64>)
 800096a:	f000 fcb1 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40000800 	.word	0x40000800
 800097c:	40021000 	.word	0x40021000
 8000980:	40010c00 	.word	0x40010c00

08000984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000984:	f7ff fec6 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800098a:	490c      	ldr	r1, [pc, #48]	@ (80009bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800098c:	4a0c      	ldr	r2, [pc, #48]	@ (80009c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a09      	ldr	r2, [pc, #36]	@ (80009c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009a0:	4c09      	ldr	r4, [pc, #36]	@ (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f002 fb05 	bl	8002fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b2:	f7ff fd01 	bl	80003b8 <main>
  bx lr
 80009b6:	4770      	bx	lr
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009c0:	08003958 	.word	0x08003958
  ldr r2, =_sbss
 80009c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009c8:	200002b0 	.word	0x200002b0

080009cc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <CAN1_RX1_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <HAL_Init+0x28>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <HAL_Init+0x28>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 fc33 	bl	800124c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff fdd6 	bl	800059c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fc4b 	bl	80012b6 <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 fc13 	bl	8001262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	@ (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <HAL_IncTick+0x1c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <HAL_IncTick+0x20>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a03      	ldr	r2, [pc, #12]	@ (8000a7c <HAL_IncTick+0x20>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000160 	.word	0x20000160

08000a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b02      	ldr	r3, [pc, #8]	@ (8000a90 <HAL_GetTick+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	20000160 	.word	0x20000160

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff fff0 	bl	8000a80 <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aba:	bf00      	nop
 8000abc:	f7ff ffe0 	bl	8000a80 <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008

08000adc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e0be      	b.n	8000c7c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d109      	bne.n	8000b20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fb64 	bl	80001e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 fa7d 	bl	8001020 <ADC_ConversionStop_Disable>
 8000b26:	4603      	mov	r3, r0
 8000b28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f040 8099 	bne.w	8000c6a <HAL_ADC_Init+0x18e>
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f040 8095 	bne.w	8000c6a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b48:	f023 0302 	bic.w	r3, r3, #2
 8000b4c:	f043 0202 	orr.w	r2, r3, #2
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	7b1b      	ldrb	r3, [r3, #12]
 8000b62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b74:	d003      	beq.n	8000b7e <HAL_ADC_Init+0xa2>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d102      	bne.n	8000b84 <HAL_ADC_Init+0xa8>
 8000b7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b82:	e000      	b.n	8000b86 <HAL_ADC_Init+0xaa>
 8000b84:	2300      	movs	r3, #0
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7d1b      	ldrb	r3, [r3, #20]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d119      	bne.n	8000bc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7b1b      	ldrb	r3, [r3, #12]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d109      	bne.n	8000bb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	035a      	lsls	r2, r3, #13
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	e00b      	b.n	8000bc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb4:	f043 0220 	orr.w	r2, r3, #32
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc0:	f043 0201 	orr.w	r2, r3, #1
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <HAL_ADC_Init+0x1a8>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	430b      	orrs	r3, r1
 8000bee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bf8:	d003      	beq.n	8000c02 <HAL_ADC_Init+0x126>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d104      	bne.n	8000c0c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	051b      	lsls	r3, r3, #20
 8000c0a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c12:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <HAL_ADC_Init+0x1ac>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d10b      	bne.n	8000c48 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c3a:	f023 0303 	bic.w	r3, r3, #3
 8000c3e:	f043 0201 	orr.w	r2, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c46:	e018      	b.n	8000c7a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c4c:	f023 0312 	bic.w	r3, r3, #18
 8000c50:	f043 0210 	orr.w	r2, r3, #16
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5c:	f043 0201 	orr.w	r2, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c68:	e007      	b.n	8000c7a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c6e:	f043 0210 	orr.w	r2, r3, #16
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	ffe1f7fd 	.word	0xffe1f7fd
 8000c88:	ff1f0efe 	.word	0xff1f0efe

08000c8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d03e      	beq.n	8000d2c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d039      	beq.n	8000d2c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d105      	bne.n	8000cd0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000cda:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000cde:	d11d      	bne.n	8000d1c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d119      	bne.n	8000d1c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0220 	bic.w	r2, r2, #32
 8000cf6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d105      	bne.n	8000d1c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d14:	f043 0201 	orr.w	r2, r3, #1
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f000 f874 	bl	8000e0a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f06f 0212 	mvn.w	r2, #18
 8000d2a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d04d      	beq.n	8000dd2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d048      	beq.n	8000dd2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d50:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000d62:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000d66:	d012      	beq.n	8000d8e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d125      	bne.n	8000dc2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d80:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d84:	d11d      	bne.n	8000dc2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d119      	bne.n	8000dc2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d9c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f96d 	bl	80010a2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f06f 020c 	mvn.w	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d012      	beq.n	8000e02 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00d      	beq.n	8000e02 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f812 	bl	8000e1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f06f 0201 	mvn.w	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
	...

08000e30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x20>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e0dc      	b.n	800100a <HAL_ADC_ConfigChannel+0x1da>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b06      	cmp	r3, #6
 8000e5e:	d81c      	bhi.n	8000e9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b05      	subs	r3, #5
 8000e72:	221f      	movs	r2, #31
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b05      	subs	r3, #5
 8000e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e98:	e03c      	b.n	8000f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b0c      	cmp	r3, #12
 8000ea0:	d81c      	bhi.n	8000edc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3b23      	subs	r3, #35	@ 0x23
 8000eb4:	221f      	movs	r2, #31
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4019      	ands	r1, r3
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	3b23      	subs	r3, #35	@ 0x23
 8000ece:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eda:	e01b      	b.n	8000f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	3b41      	subs	r3, #65	@ 0x41
 8000eee:	221f      	movs	r2, #31
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	4019      	ands	r1, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	3b41      	subs	r3, #65	@ 0x41
 8000f08:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b09      	cmp	r3, #9
 8000f1a:	d91c      	bls.n	8000f56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68d9      	ldr	r1, [r3, #12]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3b1e      	subs	r3, #30
 8000f2e:	2207      	movs	r2, #7
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4019      	ands	r1, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	3b1e      	subs	r3, #30
 8000f48:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	e019      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6919      	ldr	r1, [r3, #16]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	2207      	movs	r2, #7
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4019      	ands	r1, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	6898      	ldr	r0, [r3, #8]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d003      	beq.n	8000f9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f96:	2b11      	cmp	r3, #17
 8000f98:	d132      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001014 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d125      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d126      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000fc0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b10      	cmp	r3, #16
 8000fc8:	d11a      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a13      	ldr	r2, [pc, #76]	@ (800101c <HAL_ADC_ConfigChannel+0x1ec>)
 8000fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd4:	0c9a      	lsrs	r2, r3, #18
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fe0:	e002      	b.n	8000fe8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f9      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x1b2>
 8000fee:	e007      	b.n	8001000 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff4:	f043 0220 	orr.w	r2, r3, #32
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40012400 	.word	0x40012400
 8001018:	20000000 	.word	0x20000000
 800101c:	431bde83 	.word	0x431bde83

08001020 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b01      	cmp	r3, #1
 8001038:	d12e      	bne.n	8001098 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0201 	bic.w	r2, r2, #1
 8001048:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800104a:	f7ff fd19 	bl	8000a80 <HAL_GetTick>
 800104e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001050:	e01b      	b.n	800108a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001052:	f7ff fd15 	bl	8000a80 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d914      	bls.n	800108a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b01      	cmp	r3, #1
 800106c:	d10d      	bne.n	800108a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001072:	f043 0210 	orr.w	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107e:	f043 0201 	orr.w	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e007      	b.n	800109a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b01      	cmp	r3, #1
 8001096:	d0dc      	beq.n	8001052 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4906      	ldr	r1, [pc, #24]	@ (800114c <__NVIC_EnableIRQ+0x34>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	@ (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	@ (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	@ 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	@ 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001218:	d301      	bcc.n	800121e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121a:	2301      	movs	r3, #1
 800121c:	e00f      	b.n	800123e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <SysTick_Config+0x40>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001226:	210f      	movs	r1, #15
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f7ff ff90 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <SysTick_Config+0x40>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <SysTick_Config+0x40>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff2d 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001274:	f7ff ff42 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	6978      	ldr	r0, [r7, #20]
 8001280:	f7ff ff90 	bl	80011a4 <NVIC_EncodePriority>
 8001284:	4602      	mov	r2, r0
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff5f 	bl	8001150 <__NVIC_SetPriority>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff35 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffa2 	bl	8001208 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b08b      	sub	sp, #44	@ 0x2c
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e169      	b.n	80015b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e4:	2201      	movs	r2, #1
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8158 	bne.w	80015b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a9a      	ldr	r2, [pc, #616]	@ (8001570 <HAL_GPIO_Init+0x2a0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d05e      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800130c:	4a98      	ldr	r2, [pc, #608]	@ (8001570 <HAL_GPIO_Init+0x2a0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d875      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001312:	4a98      	ldr	r2, [pc, #608]	@ (8001574 <HAL_GPIO_Init+0x2a4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d058      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001318:	4a96      	ldr	r2, [pc, #600]	@ (8001574 <HAL_GPIO_Init+0x2a4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d86f      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800131e:	4a96      	ldr	r2, [pc, #600]	@ (8001578 <HAL_GPIO_Init+0x2a8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d052      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001324:	4a94      	ldr	r2, [pc, #592]	@ (8001578 <HAL_GPIO_Init+0x2a8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d869      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800132a:	4a94      	ldr	r2, [pc, #592]	@ (800157c <HAL_GPIO_Init+0x2ac>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d04c      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001330:	4a92      	ldr	r2, [pc, #584]	@ (800157c <HAL_GPIO_Init+0x2ac>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d863      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001336:	4a92      	ldr	r2, [pc, #584]	@ (8001580 <HAL_GPIO_Init+0x2b0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d046      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800133c:	4a90      	ldr	r2, [pc, #576]	@ (8001580 <HAL_GPIO_Init+0x2b0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d85d      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001342:	2b12      	cmp	r3, #18
 8001344:	d82a      	bhi.n	800139c <HAL_GPIO_Init+0xcc>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d859      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800134a:	a201      	add	r2, pc, #4	@ (adr r2, 8001350 <HAL_GPIO_Init+0x80>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	080013cb 	.word	0x080013cb
 8001354:	080013a5 	.word	0x080013a5
 8001358:	080013b7 	.word	0x080013b7
 800135c:	080013f9 	.word	0x080013f9
 8001360:	080013ff 	.word	0x080013ff
 8001364:	080013ff 	.word	0x080013ff
 8001368:	080013ff 	.word	0x080013ff
 800136c:	080013ff 	.word	0x080013ff
 8001370:	080013ff 	.word	0x080013ff
 8001374:	080013ff 	.word	0x080013ff
 8001378:	080013ff 	.word	0x080013ff
 800137c:	080013ff 	.word	0x080013ff
 8001380:	080013ff 	.word	0x080013ff
 8001384:	080013ff 	.word	0x080013ff
 8001388:	080013ff 	.word	0x080013ff
 800138c:	080013ff 	.word	0x080013ff
 8001390:	080013ff 	.word	0x080013ff
 8001394:	080013ad 	.word	0x080013ad
 8001398:	080013c1 	.word	0x080013c1
 800139c:	4a79      	ldr	r2, [pc, #484]	@ (8001584 <HAL_GPIO_Init+0x2b4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a2:	e02c      	b.n	80013fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	623b      	str	r3, [r7, #32]
          break;
 80013aa:	e029      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	3304      	adds	r3, #4
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e024      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	3308      	adds	r3, #8
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e01f      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	330c      	adds	r3, #12
 80013c6:	623b      	str	r3, [r7, #32]
          break;
 80013c8:	e01a      	b.n	8001400 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d2:	2304      	movs	r3, #4
 80013d4:	623b      	str	r3, [r7, #32]
          break;
 80013d6:	e013      	b.n	8001400 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e0:	2308      	movs	r3, #8
 80013e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	611a      	str	r2, [r3, #16]
          break;
 80013ea:	e009      	b.n	8001400 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ec:	2308      	movs	r3, #8
 80013ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	615a      	str	r2, [r3, #20]
          break;
 80013f6:	e003      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x130>
          break;
 80013fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2bff      	cmp	r3, #255	@ 0xff
 8001404:	d801      	bhi.n	800140a <HAL_GPIO_Init+0x13a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	e001      	b.n	800140e <HAL_GPIO_Init+0x13e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3304      	adds	r3, #4
 800140e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2bff      	cmp	r3, #255	@ 0xff
 8001414:	d802      	bhi.n	800141c <HAL_GPIO_Init+0x14c>
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x152>
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	3b08      	subs	r3, #8
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	210f      	movs	r1, #15
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	401a      	ands	r2, r3
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	431a      	orrs	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80b1 	beq.w	80015b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001450:	4b4d      	ldr	r3, [pc, #308]	@ (8001588 <HAL_GPIO_Init+0x2b8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a4c      	ldr	r2, [pc, #304]	@ (8001588 <HAL_GPIO_Init+0x2b8>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b4a      	ldr	r3, [pc, #296]	@ (8001588 <HAL_GPIO_Init+0x2b8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001468:	4a48      	ldr	r2, [pc, #288]	@ (800158c <HAL_GPIO_Init+0x2bc>)
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a40      	ldr	r2, [pc, #256]	@ (8001590 <HAL_GPIO_Init+0x2c0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d013      	beq.n	80014bc <HAL_GPIO_Init+0x1ec>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3f      	ldr	r2, [pc, #252]	@ (8001594 <HAL_GPIO_Init+0x2c4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1e8>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3e      	ldr	r2, [pc, #248]	@ (8001598 <HAL_GPIO_Init+0x2c8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3d      	ldr	r2, [pc, #244]	@ (800159c <HAL_GPIO_Init+0x2cc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b0:	2304      	movs	r3, #4
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014bc:	2300      	movs	r3, #0
 80014be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ce:	492f      	ldr	r1, [pc, #188]	@ (800158c <HAL_GPIO_Init+0x2bc>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	492c      	ldr	r1, [pc, #176]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	608b      	str	r3, [r1, #8]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014f6:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4928      	ldr	r1, [pc, #160]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001500:	4013      	ands	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001510:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	4922      	ldr	r1, [pc, #136]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	60cb      	str	r3, [r1, #12]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	491e      	ldr	r1, [pc, #120]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001528:	4013      	ands	r3, r2
 800152a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4918      	ldr	r1, [pc, #96]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4914      	ldr	r1, [pc, #80]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001550:	4013      	ands	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d021      	beq.n	80015a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	490e      	ldr	r1, [pc, #56]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e021      	b.n	80015b2 <HAL_GPIO_Init+0x2e2>
 800156e:	bf00      	nop
 8001570:	10320000 	.word	0x10320000
 8001574:	10310000 	.word	0x10310000
 8001578:	10220000 	.word	0x10220000
 800157c:	10210000 	.word	0x10210000
 8001580:	10120000 	.word	0x10120000
 8001584:	10110000 	.word	0x10110000
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	40010800 	.word	0x40010800
 8001594:	40010c00 	.word	0x40010c00
 8001598:	40011000 	.word	0x40011000
 800159c:	40011400 	.word	0x40011400
 80015a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4909      	ldr	r1, [pc, #36]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	3301      	adds	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f47f ae8e 	bne.w	80012e4 <HAL_GPIO_Init+0x14>
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	372c      	adds	r7, #44	@ 0x2c
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	611a      	str	r2, [r3, #16]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43d9      	mvns	r1, r3
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	400b      	ands	r3, r1
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	611a      	str	r2, [r3, #16]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
	...

0800163c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001652:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f806 	bl	800166c <HAL_GPIO_EXTI_Callback>
  }
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e272      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8087 	beq.w	80017ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a0:	4b92      	ldr	r3, [pc, #584]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ac:	4b8f      	ldr	r3, [pc, #572]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d112      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
 80016b8:	4b8c      	ldr	r3, [pc, #560]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c4:	d10b      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c6:	4b89      	ldr	r3, [pc, #548]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d06c      	beq.n	80017ac <HAL_RCC_OscConfig+0x12c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d168      	bne.n	80017ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e24c      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x76>
 80016e8:	4b80      	ldr	r3, [pc, #512]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a7f      	ldr	r2, [pc, #508]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e02e      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b7b      	ldr	r3, [pc, #492]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7a      	ldr	r2, [pc, #488]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b78      	ldr	r3, [pc, #480]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a77      	ldr	r2, [pc, #476]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001710:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0xbc>
 8001722:	4b72      	ldr	r3, [pc, #456]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a71      	ldr	r2, [pc, #452]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b6f      	ldr	r3, [pc, #444]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6e      	ldr	r2, [pc, #440]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 800173c:	4b6b      	ldr	r3, [pc, #428]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6a      	ldr	r2, [pc, #424]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b68      	ldr	r3, [pc, #416]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a67      	ldr	r2, [pc, #412]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff f990 	bl	8000a80 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff f98c 	bl	8000a80 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e200      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b5d      	ldr	r3, [pc, #372]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0xe4>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff f97c 	bl	8000a80 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff f978 	bl	8000a80 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1ec      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	4b53      	ldr	r3, [pc, #332]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x10c>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d063      	beq.n	8001882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ba:	4b4c      	ldr	r3, [pc, #304]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017c6:	4b49      	ldr	r3, [pc, #292]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
 80017d2:	4b46      	ldr	r3, [pc, #280]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d116      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	4b43      	ldr	r3, [pc, #268]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e1c0      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4939      	ldr	r1, [pc, #228]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	e03a      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001814:	4b36      	ldr	r3, [pc, #216]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff f931 	bl	8000a80 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff f92d 	bl	8000a80 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1a1      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4927      	ldr	r1, [pc, #156]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e015      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff f910 	bl	8000a80 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff f90c 	bl	8000a80 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e180      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d03a      	beq.n	8001904 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <HAL_RCC_OscConfig+0x274>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7ff f8f0 	bl	8000a80 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff f8ec 	bl	8000a80 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e160      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 fa9c 	bl	8001e00 <RCC_Delay>
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_RCC_OscConfig+0x274>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff f8d6 	bl	8000a80 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d6:	e00f      	b.n	80018f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff f8d2 	bl	8000a80 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d908      	bls.n	80018f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e146      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	42420000 	.word	0x42420000
 80018f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	4b92      	ldr	r3, [pc, #584]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e9      	bne.n	80018d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a6 	beq.w	8001a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001916:	4b8b      	ldr	r3, [pc, #556]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b88      	ldr	r3, [pc, #544]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a87      	ldr	r2, [pc, #540]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b85      	ldr	r3, [pc, #532]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b82      	ldr	r3, [pc, #520]	@ (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d118      	bne.n	800197c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff f893 	bl	8000a80 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff f88f 	bl	8000a80 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	@ 0x64
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e103      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b75      	ldr	r3, [pc, #468]	@ (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x312>
 8001984:	4b6f      	ldr	r3, [pc, #444]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a6e      	ldr	r2, [pc, #440]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	e02d      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x334>
 800199a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a69      	ldr	r2, [pc, #420]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	4b67      	ldr	r3, [pc, #412]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a66      	ldr	r2, [pc, #408]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	e01c      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x356>
 80019bc:	4b61      	ldr	r3, [pc, #388]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a60      	ldr	r2, [pc, #384]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a5a      	ldr	r2, [pc, #360]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	4b58      	ldr	r3, [pc, #352]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a57      	ldr	r2, [pc, #348]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d015      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7ff f843 	bl	8000a80 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff f83f 	bl	8000a80 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0b1      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b4b      	ldr	r3, [pc, #300]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCC_OscConfig+0x37e>
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff f82d 	bl	8000a80 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f829 	bl	8000a80 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e09b      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	4b40      	ldr	r3, [pc, #256]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ee      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d105      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a52:	4b3c      	ldr	r3, [pc, #240]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a3b      	ldr	r2, [pc, #236]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8087 	beq.w	8001b76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a68:	4b36      	ldr	r3, [pc, #216]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d061      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d146      	bne.n	8001b0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b33      	ldr	r3, [pc, #204]	@ (8001b4c <HAL_RCC_OscConfig+0x4cc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7fe fffd 	bl	8000a80 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7fe fff9 	bl	8000a80 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e06d      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab2:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4921      	ldr	r1, [pc, #132]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a19      	ldr	r1, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	491b      	ldr	r1, [pc, #108]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_RCC_OscConfig+0x4cc>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7fe ffcd 	bl	8000a80 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7fe ffc9 	bl	8000a80 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e03d      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x46a>
 8001b08:	e035      	b.n	8001b76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <HAL_RCC_OscConfig+0x4cc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7fe ffb6 	bl	8000a80 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7fe ffb2 	bl	8000a80 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e026      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x498>
 8001b36:	e01e      	b.n	8001b76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e019      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_RCC_OscConfig+0x500>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d0      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b6a      	ldr	r3, [pc, #424]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d910      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b67      	ldr	r3, [pc, #412]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4965      	ldr	r1, [pc, #404]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b63      	ldr	r3, [pc, #396]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b8      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be0:	4b59      	ldr	r3, [pc, #356]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf8:	4b53      	ldr	r3, [pc, #332]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b50      	ldr	r3, [pc, #320]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	494d      	ldr	r1, [pc, #308]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d040      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d115      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e073      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	4b3d      	ldr	r3, [pc, #244]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06b      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b39      	ldr	r3, [pc, #228]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4936      	ldr	r1, [pc, #216]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c74:	f7fe ff04 	bl	8000a80 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7fe ff00 	bl	8000a80 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e053      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2d      	ldr	r3, [pc, #180]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d210      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4922      	ldr	r1, [pc, #136]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e032      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4916      	ldr	r1, [pc, #88]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	490e      	ldr	r1, [pc, #56]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d12:	f000 f821 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	490a      	ldr	r1, [pc, #40]	@ (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	5ccb      	ldrb	r3, [r1, r3]
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <HAL_RCC_ClockConfig+0x1cc>)
 8001d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_RCC_ClockConfig+0x1d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fe62 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	080038f8 	.word	0x080038f8
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x94>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x30>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x36>
 8001d86:	e027      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d88:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d8a:	613b      	str	r3, [r7, #16]
      break;
 8001d8c:	e027      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	0c9b      	lsrs	r3, r3, #18
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	4a17      	ldr	r2, [pc, #92]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d010      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001da6:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x94>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	0c5b      	lsrs	r3, r3, #17
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	4a11      	ldr	r2, [pc, #68]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dba:	fb03 f202 	mul.w	r2, r3, r2
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e004      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a0c      	ldr	r2, [pc, #48]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	613b      	str	r3, [r7, #16]
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dda:	613b      	str	r3, [r7, #16]
      break;
 8001ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dde:	693b      	ldr	r3, [r7, #16]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	007a1200 	.word	0x007a1200
 8001df4:	08003908 	.word	0x08003908
 8001df8:	08003918 	.word	0x08003918
 8001dfc:	003d0900 	.word	0x003d0900

08001e00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <RCC_Delay+0x34>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <RCC_Delay+0x38>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0a5b      	lsrs	r3, r3, #9
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e1c:	bf00      	nop
  }
  while (Delay --);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	60fa      	str	r2, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f9      	bne.n	8001e1c <RCC_Delay+0x1c>
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20000000 	.word	0x20000000
 8001e38:	10624dd3 	.word	0x10624dd3

08001e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d07d      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	4b4c      	ldr	r3, [pc, #304]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	61d3      	str	r3, [r2, #28]
 8001e74:	4b49      	ldr	r3, [pc, #292]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	4b46      	ldr	r3, [pc, #280]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d118      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e90:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a42      	ldr	r2, [pc, #264]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fdf0 	bl	8000a80 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7fe fdec 	bl	8000a80 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e06d      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ec2:	4b36      	ldr	r3, [pc, #216]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d02e      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d027      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ee8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eea:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ef6:	4a29      	ldr	r2, [pc, #164]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d014      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7fe fdbb 	bl	8000a80 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7fe fdb7 	bl	8000a80 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e036      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ee      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4917      	ldr	r1, [pc, #92]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f60:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	490b      	ldr	r1, [pc, #44]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4904      	ldr	r1, [pc, #16]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42420440 	.word	0x42420440

08001fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e041      	b.n	800203e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fc6a 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 fb7e 	bl	80026e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d001      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e03a      	b.n	80020d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a18      	ldr	r2, [pc, #96]	@ (80020e0 <HAL_TIM_Base_Start_IT+0x98>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00e      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x58>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208a:	d009      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x58>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d004      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x58>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a13      	ldr	r2, [pc, #76]	@ (80020e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d111      	bne.n	80020c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d010      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c2:	e007      	b.n	80020d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40000800 	.word	0x40000800

080020ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e041      	b.n	8002182 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f839 	bl	800218a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3304      	adds	r3, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f000 fadc 	bl	80026e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d020      	beq.n	8002200 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01b      	beq.n	8002200 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0202 	mvn.w	r2, #2
 80021d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fa63 	bl	80026b2 <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa56 	bl	80026a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fa65 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d020      	beq.n	800224c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0204 	mvn.w	r2, #4
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa3d 	bl	80026b2 <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa30 	bl	80026a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fa3f 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d020      	beq.n	8002298 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01b      	beq.n	8002298 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0208 	mvn.w	r2, #8
 8002268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2204      	movs	r2, #4
 800226e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fa17 	bl	80026b2 <HAL_TIM_IC_CaptureCallback>
 8002284:	e005      	b.n	8002292 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa0a 	bl	80026a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fa19 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d020      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0210 	mvn.w	r2, #16
 80022b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2208      	movs	r2, #8
 80022ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f9f1 	bl	80026b2 <HAL_TIM_IC_CaptureCallback>
 80022d0:	e005      	b.n	80022de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f9e4 	bl	80026a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f9f3 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00c      	beq.n	8002308 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0201 	mvn.w	r2, #1
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9c3 	bl	800268e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fcd1 	bl	8002cce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f9c3 	bl	80026d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0220 	mvn.w	r2, #32
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fca4 	bl	8002cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002396:	2302      	movs	r3, #2
 8002398:	e0ae      	b.n	80024f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	f200 809f 	bhi.w	80024e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023aa:	a201      	add	r2, pc, #4	@ (adr r2, 80023b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023e5 	.word	0x080023e5
 80023b4:	080024e9 	.word	0x080024e9
 80023b8:	080024e9 	.word	0x080024e9
 80023bc:	080024e9 	.word	0x080024e9
 80023c0:	08002425 	.word	0x08002425
 80023c4:	080024e9 	.word	0x080024e9
 80023c8:	080024e9 	.word	0x080024e9
 80023cc:	080024e9 	.word	0x080024e9
 80023d0:	08002467 	.word	0x08002467
 80023d4:	080024e9 	.word	0x080024e9
 80023d8:	080024e9 	.word	0x080024e9
 80023dc:	080024e9 	.word	0x080024e9
 80023e0:	080024a7 	.word	0x080024a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f9ea 	bl	80027c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0208 	orr.w	r2, r2, #8
 80023fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0204 	bic.w	r2, r2, #4
 800240e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6999      	ldr	r1, [r3, #24]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	619a      	str	r2, [r3, #24]
      break;
 8002422:	e064      	b.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fa30 	bl	8002890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800243e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800244e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6999      	ldr	r1, [r3, #24]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	021a      	lsls	r2, r3, #8
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	619a      	str	r2, [r3, #24]
      break;
 8002464:	e043      	b.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fa79 	bl	8002964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0208 	orr.w	r2, r2, #8
 8002480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0204 	bic.w	r2, r2, #4
 8002490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69d9      	ldr	r1, [r3, #28]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	61da      	str	r2, [r3, #28]
      break;
 80024a4:	e023      	b.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fac3 	bl	8002a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	69da      	ldr	r2, [r3, #28]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69d9      	ldr	r1, [r3, #28]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	021a      	lsls	r2, r3, #8
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	61da      	str	r2, [r3, #28]
      break;
 80024e6:	e002      	b.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	75fb      	strb	r3, [r7, #23]
      break;
 80024ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_TIM_ConfigClockSource+0x1c>
 8002518:	2302      	movs	r3, #2
 800251a:	e0b4      	b.n	8002686 <HAL_TIM_ConfigClockSource+0x186>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800253a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002554:	d03e      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800255a:	f200 8087 	bhi.w	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002562:	f000 8086 	beq.w	8002672 <HAL_TIM_ConfigClockSource+0x172>
 8002566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800256a:	d87f      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b70      	cmp	r3, #112	@ 0x70
 800256e:	d01a      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002570:	2b70      	cmp	r3, #112	@ 0x70
 8002572:	d87b      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b60      	cmp	r3, #96	@ 0x60
 8002576:	d050      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x11a>
 8002578:	2b60      	cmp	r3, #96	@ 0x60
 800257a:	d877      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b50      	cmp	r3, #80	@ 0x50
 800257e:	d03c      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0xfa>
 8002580:	2b50      	cmp	r3, #80	@ 0x50
 8002582:	d873      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b40      	cmp	r3, #64	@ 0x40
 8002586:	d058      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x13a>
 8002588:	2b40      	cmp	r3, #64	@ 0x40
 800258a:	d86f      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b30      	cmp	r3, #48	@ 0x30
 800258e:	d064      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 8002590:	2b30      	cmp	r3, #48	@ 0x30
 8002592:	d86b      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b20      	cmp	r3, #32
 8002596:	d060      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 8002598:	2b20      	cmp	r3, #32
 800259a:	d867      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d05c      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d05a      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	e062      	b.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025b6:	f000 fb04 	bl	8002bc2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	609a      	str	r2, [r3, #8]
      break;
 80025d2:	e04f      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025e4:	f000 faed 	bl	8002bc2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025f6:	609a      	str	r2, [r3, #8]
      break;
 80025f8:	e03c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002606:	461a      	mov	r2, r3
 8002608:	f000 fa64 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2150      	movs	r1, #80	@ 0x50
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fabb 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 8002618:	e02c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002626:	461a      	mov	r2, r3
 8002628:	f000 fa82 	bl	8002b30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2160      	movs	r1, #96	@ 0x60
 8002632:	4618      	mov	r0, r3
 8002634:	f000 faab 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 8002638:	e01c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002646:	461a      	mov	r2, r3
 8002648:	f000 fa44 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2140      	movs	r1, #64	@ 0x40
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fa9b 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 8002658:	e00c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f000 fa92 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 800266a:	e003      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e000      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a2f      	ldr	r2, [pc, #188]	@ (80027b8 <TIM_Base_SetConfig+0xd0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00b      	beq.n	8002718 <TIM_Base_SetConfig+0x30>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0x30>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a2c      	ldr	r2, [pc, #176]	@ (80027bc <TIM_Base_SetConfig+0xd4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0x30>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a2b      	ldr	r2, [pc, #172]	@ (80027c0 <TIM_Base_SetConfig+0xd8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d108      	bne.n	800272a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800271e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a22      	ldr	r2, [pc, #136]	@ (80027b8 <TIM_Base_SetConfig+0xd0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00b      	beq.n	800274a <TIM_Base_SetConfig+0x62>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002738:	d007      	beq.n	800274a <TIM_Base_SetConfig+0x62>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1f      	ldr	r2, [pc, #124]	@ (80027bc <TIM_Base_SetConfig+0xd4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d003      	beq.n	800274a <TIM_Base_SetConfig+0x62>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1e      	ldr	r2, [pc, #120]	@ (80027c0 <TIM_Base_SetConfig+0xd8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d108      	bne.n	800275c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <TIM_Base_SetConfig+0xd0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d103      	bne.n	8002790 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f023 0201 	bic.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]
  }
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800

080027c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f023 0201 	bic.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f023 0302 	bic.w	r3, r3, #2
 800280c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a1c      	ldr	r2, [pc, #112]	@ (800288c <TIM_OC1_SetConfig+0xc8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10c      	bne.n	800283a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0308 	bic.w	r3, r3, #8
 8002826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a13      	ldr	r2, [pc, #76]	@ (800288c <TIM_OC1_SetConfig+0xc8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d111      	bne.n	8002866 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	621a      	str	r2, [r3, #32]
}
 8002880:	bf00      	nop
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40012c00 	.word	0x40012c00

08002890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f023 0210 	bic.w	r2, r3, #16
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f023 0320 	bic.w	r3, r3, #32
 80028da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002960 <TIM_OC2_SetConfig+0xd0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10d      	bne.n	800290c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800290a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a14      	ldr	r2, [pc, #80]	@ (8002960 <TIM_OC2_SetConfig+0xd0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d113      	bne.n	800293c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800291a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	621a      	str	r2, [r3, #32]
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40012c00 	.word	0x40012c00

08002964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a34 <TIM_OC3_SetConfig+0xd0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10d      	bne.n	80029de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a14      	ldr	r2, [pc, #80]	@ (8002a34 <TIM_OC3_SetConfig+0xd0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d113      	bne.n	8002a0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	621a      	str	r2, [r3, #32]
}
 8002a28:	bf00      	nop
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40012c00 	.word	0x40012c00

08002a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	031b      	lsls	r3, r3, #12
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad0 <TIM_OC4_SetConfig+0x98>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d109      	bne.n	8002aac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	019b      	lsls	r3, r3, #6
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	40012c00 	.word	0x40012c00

08002ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 030a 	bic.w	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f023 0210 	bic.w	r2, r3, #16
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	031b      	lsls	r3, r3, #12
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	621a      	str	r2, [r3, #32]
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f043 0307 	orr.w	r3, r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	609a      	str	r2, [r3, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b087      	sub	sp, #28
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	021a      	lsls	r2, r3, #8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	609a      	str	r2, [r3, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e046      	b.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a16      	ldr	r2, [pc, #88]	@ (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00e      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c64:	d009      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a10      	ldr	r2, [pc, #64]	@ (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10c      	bne.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800

08002cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <SEND_4_BIT>:
 */

#include "LCD_16x2_PARALLEL.h"

void SEND_4_BIT(char data, int rsPin)//rs=0 yra instruction register o HIGH(1) data register
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rsPin);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cf6:	4824      	ldr	r0, [pc, #144]	@ (8002d88 <SEND_4_BIT+0xa8>)
 8002cf8:	f7fe fc6e 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d02:	4821      	ldr	r0, [pc, #132]	@ (8002d88 <SEND_4_BIT+0xa8>)
 8002d04:	f7fe fc68 	bl	80015d8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data>>0)&0x1);
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	2120      	movs	r1, #32
 8002d14:	481d      	ldr	r0, [pc, #116]	@ (8002d8c <SEND_4_BIT+0xac>)
 8002d16:	f7fe fc5f 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data>>1)&0x1);
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	2140      	movs	r1, #64	@ 0x40
 8002d2a:	4818      	ldr	r0, [pc, #96]	@ (8002d8c <SEND_4_BIT+0xac>)
 8002d2c:	f7fe fc54 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data>>2)&0x1);
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2180      	movs	r1, #128	@ 0x80
 8002d40:	4812      	ldr	r0, [pc, #72]	@ (8002d8c <SEND_4_BIT+0xac>)
 8002d42:	f7fe fc49 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data>>3)&0x1);
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d58:	480c      	ldr	r0, [pc, #48]	@ (8002d8c <SEND_4_BIT+0xac>)
 8002d5a:	f7fe fc3d 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d64:	4808      	ldr	r0, [pc, #32]	@ (8002d88 <SEND_4_BIT+0xa8>)
 8002d66:	f7fe fc37 	bl	80015d8 <HAL_GPIO_WritePin>
	DELAY_US(500); // Allow LCD to latch
 8002d6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d6e:	f7fd fbe3 	bl	8000538 <DELAY_US>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d78:	4803      	ldr	r0, [pc, #12]	@ (8002d88 <SEND_4_BIT+0xa8>)
 8002d7a:	f7fe fc2d 	bl	80015d8 <HAL_GPIO_WritePin>

}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40010800 	.word	0x40010800
 8002d8c:	40010c00 	.word	0x40010c00

08002d90 <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(char komanda)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <LCD_SEND_COMMAND+0x60>)
 8002da2:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8002da4:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <LCD_SEND_COMMAND+0x60>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff98 	bl	8002ce0 <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b0d      	ldr	r3, [pc, #52]	@ (8002df0 <LCD_SEND_COMMAND+0x60>)
 8002dba:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <LCD_SEND_COMMAND+0x60>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff8c 	bl	8002ce0 <SEND_4_BIT>
	if (komanda == 0x01 || komanda == 0x02) {
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d002      	beq.n	8002dd4 <LCD_SEND_COMMAND+0x44>
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d103      	bne.n	8002ddc <LCD_SEND_COMMAND+0x4c>
		HAL_Delay(2); // These are extra slow
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	f7fd fe5d 	bl	8000a94 <HAL_Delay>
 8002dda:	e004      	b.n	8002de6 <LCD_SEND_COMMAND+0x56>
	} else {
		DELAY_US(300); // All other commands
 8002ddc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002de0:	f7fd fbaa 	bl	8000538 <DELAY_US>
	}
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000164 	.word	0x20000164

08002df4 <LCD_SEND_DATA>:
void LCD_SEND_DATA(char komanda)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
	//upper
	static char siuntimas;
	siuntimas=(komanda>>4)&0x0f;
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <LCD_SEND_DATA+0x40>)
 8002e06:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8002e08:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <LCD_SEND_DATA+0x40>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff66 	bl	8002ce0 <SEND_4_BIT>

	//lower
	siuntimas=(komanda)&0x0f;
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <LCD_SEND_DATA+0x40>)
 8002e1e:	701a      	strb	r2, [r3, #0]
	SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8002e20:	4b04      	ldr	r3, [pc, #16]	@ (8002e34 <LCD_SEND_DATA+0x40>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff5a 	bl	8002ce0 <SEND_4_BIT>
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000165 	.word	0x20000165

08002e38 <LCD_Init>:
	}
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
}

void LCD_Init()
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin,GPIO_PIN_RESET);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e42:	4827      	ldr	r0, [pc, #156]	@ (8002ee0 <LCD_Init+0xa8>)
 8002e44:	f7fe fbc8 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin,GPIO_PIN_RESET);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e4e:	4824      	ldr	r0, [pc, #144]	@ (8002ee0 <LCD_Init+0xa8>)
 8002e50:	f7fe fbc2 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2120      	movs	r1, #32
 8002e58:	4822      	ldr	r0, [pc, #136]	@ (8002ee4 <LCD_Init+0xac>)
 8002e5a:	f7fe fbbd 	bl	80015d8 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2140      	movs	r1, #64	@ 0x40
 8002e62:	4820      	ldr	r0, [pc, #128]	@ (8002ee4 <LCD_Init+0xac>)
 8002e64:	f7fe fbb8 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2180      	movs	r1, #128	@ 0x80
 8002e6c:	481d      	ldr	r0, [pc, #116]	@ (8002ee4 <LCD_Init+0xac>)
 8002e6e:	f7fe fbb3 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e78:	481a      	ldr	r0, [pc, #104]	@ (8002ee4 <LCD_Init+0xac>)
 8002e7a:	f7fe fbad 	bl	80015d8 <HAL_GPIO_WritePin>

    HAL_Delay(200); // Wait >40ms after power-on
 8002e7e:	20c8      	movs	r0, #200	@ 0xc8
 8002e80:	f7fd fe08 	bl	8000a94 <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 8002e84:	2100      	movs	r1, #0
 8002e86:	2003      	movs	r0, #3
 8002e88:	f7ff ff2a 	bl	8002ce0 <SEND_4_BIT>
    HAL_Delay(2);
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7fd fe01 	bl	8000a94 <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 8002e92:	2100      	movs	r1, #0
 8002e94:	2003      	movs	r0, #3
 8002e96:	f7ff ff23 	bl	8002ce0 <SEND_4_BIT>
    HAL_Delay(2);
 8002e9a:	2002      	movs	r0, #2
 8002e9c:	f7fd fdfa 	bl	8000a94 <HAL_Delay>
    SEND_4_BIT(0x3, LCD_RS_INSTRUCTION);
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	f7ff ff1c 	bl	8002ce0 <SEND_4_BIT>
    HAL_Delay(2);
 8002ea8:	2002      	movs	r0, #2
 8002eaa:	f7fd fdf3 	bl	8000a94 <HAL_Delay>
    SEND_4_BIT(0x2, LCD_RS_INSTRUCTION);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	f7ff ff15 	bl	8002ce0 <SEND_4_BIT>
    HAL_Delay(10);
 8002eb6:	200a      	movs	r0, #10
 8002eb8:	f7fd fdec 	bl	8000a94 <HAL_Delay>

    //4 bit interface started
    LCD_SEND_COMMAND(0x28);  // Function Set: 4-bit, 2 lines, 5x8 dots
 8002ebc:	2028      	movs	r0, #40	@ 0x28
 8002ebe:	f7ff ff67 	bl	8002d90 <LCD_SEND_COMMAND>
	// From now on: full commands (2 x 4-bit transfers)
    LCD_SEND_COMMAND(0x08);  // Display OFF (D=0, C=0, B=0)
 8002ec2:	2008      	movs	r0, #8
 8002ec4:	f7ff ff64 	bl	8002d90 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x01);  // Clear Display
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7ff ff61 	bl	8002d90 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x06);  // Entry Mode Set: Increment, No shift
 8002ece:	2006      	movs	r0, #6
 8002ed0:	f7ff ff5e 	bl	8002d90 <LCD_SEND_COMMAND>
    LCD_SEND_COMMAND(0x0C);  // Display ON, Cursor OFF, Blink OFF
 8002ed4:	200c      	movs	r0, #12
 8002ed6:	f7ff ff5b 	bl	8002d90 <LCD_SEND_COMMAND>
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	40010c00 	.word	0x40010c00

08002ee8 <LCD_SEND_STR>:

void LCD_SEND_STR(const char data[], unsigned int place, unsigned int level)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
	/*
	 * @brief Offset from left side and level 0 - top and 1 - bottom
	 */
	if(level==1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <LCD_SEND_STR+0x22>
	{
		LCD_SEND_COMMAND(0xC0+place);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	3b40      	subs	r3, #64	@ 0x40
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff44 	bl	8002d90 <LCD_SEND_COMMAND>
 8002f08:	e006      	b.n	8002f18 <LCD_SEND_STR+0x30>
	}
	else LCD_SEND_COMMAND(0x80+place);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	3b80      	subs	r3, #128	@ 0x80
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff3c 	bl	8002d90 <LCD_SEND_COMMAND>
	//kai N=high 2 line tai 1 line 0-4F o 2 0-27h   40-67h
	// KAI level 0 tai pirmas kai 1 tai antras levelis
	static uint8_t x;
	x = 0;
 8002f18:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <LCD_SEND_STR+0x70>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8002f1e:	e00e      	b.n	8002f3e <LCD_SEND_STR+0x56>
	{
		LCD_SEND_DATA(data[x]);
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <LCD_SEND_STR+0x70>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff61 	bl	8002df4 <LCD_SEND_DATA>
		x++;
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <LCD_SEND_STR+0x70>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <LCD_SEND_STR+0x70>)
 8002f3c:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <LCD_SEND_STR+0x70>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e8      	bne.n	8002f20 <LCD_SEND_STR+0x38>
	}
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000166 	.word	0x20000166

08002f5c <siprintf>:
 8002f5c:	b40e      	push	{r1, r2, r3}
 8002f5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002f62:	b510      	push	{r4, lr}
 8002f64:	2400      	movs	r4, #0
 8002f66:	b09d      	sub	sp, #116	@ 0x74
 8002f68:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002f6a:	9002      	str	r0, [sp, #8]
 8002f6c:	9006      	str	r0, [sp, #24]
 8002f6e:	9107      	str	r1, [sp, #28]
 8002f70:	9104      	str	r1, [sp, #16]
 8002f72:	4809      	ldr	r0, [pc, #36]	@ (8002f98 <siprintf+0x3c>)
 8002f74:	4909      	ldr	r1, [pc, #36]	@ (8002f9c <siprintf+0x40>)
 8002f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f7a:	9105      	str	r1, [sp, #20]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	a902      	add	r1, sp, #8
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002f84:	f000 f992 	bl	80032ac <_svfiprintf_r>
 8002f88:	9b02      	ldr	r3, [sp, #8]
 8002f8a:	701c      	strb	r4, [r3, #0]
 8002f8c:	b01d      	add	sp, #116	@ 0x74
 8002f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f92:	b003      	add	sp, #12
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	2000000c 	.word	0x2000000c
 8002f9c:	ffff0208 	.word	0xffff0208

08002fa0 <memset>:
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4402      	add	r2, r0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d100      	bne.n	8002faa <memset+0xa>
 8002fa8:	4770      	bx	lr
 8002faa:	f803 1b01 	strb.w	r1, [r3], #1
 8002fae:	e7f9      	b.n	8002fa4 <memset+0x4>

08002fb0 <__errno>:
 8002fb0:	4b01      	ldr	r3, [pc, #4]	@ (8002fb8 <__errno+0x8>)
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	2000000c 	.word	0x2000000c

08002fbc <__libc_init_array>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	2600      	movs	r6, #0
 8002fc0:	4d0c      	ldr	r5, [pc, #48]	@ (8002ff4 <__libc_init_array+0x38>)
 8002fc2:	4c0d      	ldr	r4, [pc, #52]	@ (8002ff8 <__libc_init_array+0x3c>)
 8002fc4:	1b64      	subs	r4, r4, r5
 8002fc6:	10a4      	asrs	r4, r4, #2
 8002fc8:	42a6      	cmp	r6, r4
 8002fca:	d109      	bne.n	8002fe0 <__libc_init_array+0x24>
 8002fcc:	f000 fc76 	bl	80038bc <_init>
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	4d0a      	ldr	r5, [pc, #40]	@ (8002ffc <__libc_init_array+0x40>)
 8002fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8003000 <__libc_init_array+0x44>)
 8002fd6:	1b64      	subs	r4, r4, r5
 8002fd8:	10a4      	asrs	r4, r4, #2
 8002fda:	42a6      	cmp	r6, r4
 8002fdc:	d105      	bne.n	8002fea <__libc_init_array+0x2e>
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe4:	4798      	blx	r3
 8002fe6:	3601      	adds	r6, #1
 8002fe8:	e7ee      	b.n	8002fc8 <__libc_init_array+0xc>
 8002fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fee:	4798      	blx	r3
 8002ff0:	3601      	adds	r6, #1
 8002ff2:	e7f2      	b.n	8002fda <__libc_init_array+0x1e>
 8002ff4:	08003950 	.word	0x08003950
 8002ff8:	08003950 	.word	0x08003950
 8002ffc:	08003950 	.word	0x08003950
 8003000:	08003954 	.word	0x08003954

08003004 <__retarget_lock_acquire_recursive>:
 8003004:	4770      	bx	lr

08003006 <__retarget_lock_release_recursive>:
 8003006:	4770      	bx	lr

08003008 <_free_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	4605      	mov	r5, r0
 800300c:	2900      	cmp	r1, #0
 800300e:	d040      	beq.n	8003092 <_free_r+0x8a>
 8003010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003014:	1f0c      	subs	r4, r1, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	bfb8      	it	lt
 800301a:	18e4      	addlt	r4, r4, r3
 800301c:	f000 f8de 	bl	80031dc <__malloc_lock>
 8003020:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <_free_r+0x8c>)
 8003022:	6813      	ldr	r3, [r2, #0]
 8003024:	b933      	cbnz	r3, 8003034 <_free_r+0x2c>
 8003026:	6063      	str	r3, [r4, #4]
 8003028:	6014      	str	r4, [r2, #0]
 800302a:	4628      	mov	r0, r5
 800302c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003030:	f000 b8da 	b.w	80031e8 <__malloc_unlock>
 8003034:	42a3      	cmp	r3, r4
 8003036:	d908      	bls.n	800304a <_free_r+0x42>
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	1821      	adds	r1, r4, r0
 800303c:	428b      	cmp	r3, r1
 800303e:	bf01      	itttt	eq
 8003040:	6819      	ldreq	r1, [r3, #0]
 8003042:	685b      	ldreq	r3, [r3, #4]
 8003044:	1809      	addeq	r1, r1, r0
 8003046:	6021      	streq	r1, [r4, #0]
 8003048:	e7ed      	b.n	8003026 <_free_r+0x1e>
 800304a:	461a      	mov	r2, r3
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	b10b      	cbz	r3, 8003054 <_free_r+0x4c>
 8003050:	42a3      	cmp	r3, r4
 8003052:	d9fa      	bls.n	800304a <_free_r+0x42>
 8003054:	6811      	ldr	r1, [r2, #0]
 8003056:	1850      	adds	r0, r2, r1
 8003058:	42a0      	cmp	r0, r4
 800305a:	d10b      	bne.n	8003074 <_free_r+0x6c>
 800305c:	6820      	ldr	r0, [r4, #0]
 800305e:	4401      	add	r1, r0
 8003060:	1850      	adds	r0, r2, r1
 8003062:	4283      	cmp	r3, r0
 8003064:	6011      	str	r1, [r2, #0]
 8003066:	d1e0      	bne.n	800302a <_free_r+0x22>
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4408      	add	r0, r1
 800306e:	6010      	str	r0, [r2, #0]
 8003070:	6053      	str	r3, [r2, #4]
 8003072:	e7da      	b.n	800302a <_free_r+0x22>
 8003074:	d902      	bls.n	800307c <_free_r+0x74>
 8003076:	230c      	movs	r3, #12
 8003078:	602b      	str	r3, [r5, #0]
 800307a:	e7d6      	b.n	800302a <_free_r+0x22>
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	1821      	adds	r1, r4, r0
 8003080:	428b      	cmp	r3, r1
 8003082:	bf01      	itttt	eq
 8003084:	6819      	ldreq	r1, [r3, #0]
 8003086:	685b      	ldreq	r3, [r3, #4]
 8003088:	1809      	addeq	r1, r1, r0
 800308a:	6021      	streq	r1, [r4, #0]
 800308c:	6063      	str	r3, [r4, #4]
 800308e:	6054      	str	r4, [r2, #4]
 8003090:	e7cb      	b.n	800302a <_free_r+0x22>
 8003092:	bd38      	pop	{r3, r4, r5, pc}
 8003094:	200002ac 	.word	0x200002ac

08003098 <sbrk_aligned>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	4e0f      	ldr	r6, [pc, #60]	@ (80030d8 <sbrk_aligned+0x40>)
 800309c:	460c      	mov	r4, r1
 800309e:	6831      	ldr	r1, [r6, #0]
 80030a0:	4605      	mov	r5, r0
 80030a2:	b911      	cbnz	r1, 80030aa <sbrk_aligned+0x12>
 80030a4:	f000 fba8 	bl	80037f8 <_sbrk_r>
 80030a8:	6030      	str	r0, [r6, #0]
 80030aa:	4621      	mov	r1, r4
 80030ac:	4628      	mov	r0, r5
 80030ae:	f000 fba3 	bl	80037f8 <_sbrk_r>
 80030b2:	1c43      	adds	r3, r0, #1
 80030b4:	d103      	bne.n	80030be <sbrk_aligned+0x26>
 80030b6:	f04f 34ff 	mov.w	r4, #4294967295
 80030ba:	4620      	mov	r0, r4
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
 80030be:	1cc4      	adds	r4, r0, #3
 80030c0:	f024 0403 	bic.w	r4, r4, #3
 80030c4:	42a0      	cmp	r0, r4
 80030c6:	d0f8      	beq.n	80030ba <sbrk_aligned+0x22>
 80030c8:	1a21      	subs	r1, r4, r0
 80030ca:	4628      	mov	r0, r5
 80030cc:	f000 fb94 	bl	80037f8 <_sbrk_r>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d1f2      	bne.n	80030ba <sbrk_aligned+0x22>
 80030d4:	e7ef      	b.n	80030b6 <sbrk_aligned+0x1e>
 80030d6:	bf00      	nop
 80030d8:	200002a8 	.word	0x200002a8

080030dc <_malloc_r>:
 80030dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030e0:	1ccd      	adds	r5, r1, #3
 80030e2:	f025 0503 	bic.w	r5, r5, #3
 80030e6:	3508      	adds	r5, #8
 80030e8:	2d0c      	cmp	r5, #12
 80030ea:	bf38      	it	cc
 80030ec:	250c      	movcc	r5, #12
 80030ee:	2d00      	cmp	r5, #0
 80030f0:	4606      	mov	r6, r0
 80030f2:	db01      	blt.n	80030f8 <_malloc_r+0x1c>
 80030f4:	42a9      	cmp	r1, r5
 80030f6:	d904      	bls.n	8003102 <_malloc_r+0x26>
 80030f8:	230c      	movs	r3, #12
 80030fa:	6033      	str	r3, [r6, #0]
 80030fc:	2000      	movs	r0, #0
 80030fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031d8 <_malloc_r+0xfc>
 8003106:	f000 f869 	bl	80031dc <__malloc_lock>
 800310a:	f8d8 3000 	ldr.w	r3, [r8]
 800310e:	461c      	mov	r4, r3
 8003110:	bb44      	cbnz	r4, 8003164 <_malloc_r+0x88>
 8003112:	4629      	mov	r1, r5
 8003114:	4630      	mov	r0, r6
 8003116:	f7ff ffbf 	bl	8003098 <sbrk_aligned>
 800311a:	1c43      	adds	r3, r0, #1
 800311c:	4604      	mov	r4, r0
 800311e:	d158      	bne.n	80031d2 <_malloc_r+0xf6>
 8003120:	f8d8 4000 	ldr.w	r4, [r8]
 8003124:	4627      	mov	r7, r4
 8003126:	2f00      	cmp	r7, #0
 8003128:	d143      	bne.n	80031b2 <_malloc_r+0xd6>
 800312a:	2c00      	cmp	r4, #0
 800312c:	d04b      	beq.n	80031c6 <_malloc_r+0xea>
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	4639      	mov	r1, r7
 8003132:	4630      	mov	r0, r6
 8003134:	eb04 0903 	add.w	r9, r4, r3
 8003138:	f000 fb5e 	bl	80037f8 <_sbrk_r>
 800313c:	4581      	cmp	r9, r0
 800313e:	d142      	bne.n	80031c6 <_malloc_r+0xea>
 8003140:	6821      	ldr	r1, [r4, #0]
 8003142:	4630      	mov	r0, r6
 8003144:	1a6d      	subs	r5, r5, r1
 8003146:	4629      	mov	r1, r5
 8003148:	f7ff ffa6 	bl	8003098 <sbrk_aligned>
 800314c:	3001      	adds	r0, #1
 800314e:	d03a      	beq.n	80031c6 <_malloc_r+0xea>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	442b      	add	r3, r5
 8003154:	6023      	str	r3, [r4, #0]
 8003156:	f8d8 3000 	ldr.w	r3, [r8]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	bb62      	cbnz	r2, 80031b8 <_malloc_r+0xdc>
 800315e:	f8c8 7000 	str.w	r7, [r8]
 8003162:	e00f      	b.n	8003184 <_malloc_r+0xa8>
 8003164:	6822      	ldr	r2, [r4, #0]
 8003166:	1b52      	subs	r2, r2, r5
 8003168:	d420      	bmi.n	80031ac <_malloc_r+0xd0>
 800316a:	2a0b      	cmp	r2, #11
 800316c:	d917      	bls.n	800319e <_malloc_r+0xc2>
 800316e:	1961      	adds	r1, r4, r5
 8003170:	42a3      	cmp	r3, r4
 8003172:	6025      	str	r5, [r4, #0]
 8003174:	bf18      	it	ne
 8003176:	6059      	strne	r1, [r3, #4]
 8003178:	6863      	ldr	r3, [r4, #4]
 800317a:	bf08      	it	eq
 800317c:	f8c8 1000 	streq.w	r1, [r8]
 8003180:	5162      	str	r2, [r4, r5]
 8003182:	604b      	str	r3, [r1, #4]
 8003184:	4630      	mov	r0, r6
 8003186:	f000 f82f 	bl	80031e8 <__malloc_unlock>
 800318a:	f104 000b 	add.w	r0, r4, #11
 800318e:	1d23      	adds	r3, r4, #4
 8003190:	f020 0007 	bic.w	r0, r0, #7
 8003194:	1ac2      	subs	r2, r0, r3
 8003196:	bf1c      	itt	ne
 8003198:	1a1b      	subne	r3, r3, r0
 800319a:	50a3      	strne	r3, [r4, r2]
 800319c:	e7af      	b.n	80030fe <_malloc_r+0x22>
 800319e:	6862      	ldr	r2, [r4, #4]
 80031a0:	42a3      	cmp	r3, r4
 80031a2:	bf0c      	ite	eq
 80031a4:	f8c8 2000 	streq.w	r2, [r8]
 80031a8:	605a      	strne	r2, [r3, #4]
 80031aa:	e7eb      	b.n	8003184 <_malloc_r+0xa8>
 80031ac:	4623      	mov	r3, r4
 80031ae:	6864      	ldr	r4, [r4, #4]
 80031b0:	e7ae      	b.n	8003110 <_malloc_r+0x34>
 80031b2:	463c      	mov	r4, r7
 80031b4:	687f      	ldr	r7, [r7, #4]
 80031b6:	e7b6      	b.n	8003126 <_malloc_r+0x4a>
 80031b8:	461a      	mov	r2, r3
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	42a3      	cmp	r3, r4
 80031be:	d1fb      	bne.n	80031b8 <_malloc_r+0xdc>
 80031c0:	2300      	movs	r3, #0
 80031c2:	6053      	str	r3, [r2, #4]
 80031c4:	e7de      	b.n	8003184 <_malloc_r+0xa8>
 80031c6:	230c      	movs	r3, #12
 80031c8:	4630      	mov	r0, r6
 80031ca:	6033      	str	r3, [r6, #0]
 80031cc:	f000 f80c 	bl	80031e8 <__malloc_unlock>
 80031d0:	e794      	b.n	80030fc <_malloc_r+0x20>
 80031d2:	6005      	str	r5, [r0, #0]
 80031d4:	e7d6      	b.n	8003184 <_malloc_r+0xa8>
 80031d6:	bf00      	nop
 80031d8:	200002ac 	.word	0x200002ac

080031dc <__malloc_lock>:
 80031dc:	4801      	ldr	r0, [pc, #4]	@ (80031e4 <__malloc_lock+0x8>)
 80031de:	f7ff bf11 	b.w	8003004 <__retarget_lock_acquire_recursive>
 80031e2:	bf00      	nop
 80031e4:	200002a4 	.word	0x200002a4

080031e8 <__malloc_unlock>:
 80031e8:	4801      	ldr	r0, [pc, #4]	@ (80031f0 <__malloc_unlock+0x8>)
 80031ea:	f7ff bf0c 	b.w	8003006 <__retarget_lock_release_recursive>
 80031ee:	bf00      	nop
 80031f0:	200002a4 	.word	0x200002a4

080031f4 <__ssputs_r>:
 80031f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f8:	461f      	mov	r7, r3
 80031fa:	688e      	ldr	r6, [r1, #8]
 80031fc:	4682      	mov	sl, r0
 80031fe:	42be      	cmp	r6, r7
 8003200:	460c      	mov	r4, r1
 8003202:	4690      	mov	r8, r2
 8003204:	680b      	ldr	r3, [r1, #0]
 8003206:	d82d      	bhi.n	8003264 <__ssputs_r+0x70>
 8003208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800320c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003210:	d026      	beq.n	8003260 <__ssputs_r+0x6c>
 8003212:	6965      	ldr	r5, [r4, #20]
 8003214:	6909      	ldr	r1, [r1, #16]
 8003216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800321a:	eba3 0901 	sub.w	r9, r3, r1
 800321e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003222:	1c7b      	adds	r3, r7, #1
 8003224:	444b      	add	r3, r9
 8003226:	106d      	asrs	r5, r5, #1
 8003228:	429d      	cmp	r5, r3
 800322a:	bf38      	it	cc
 800322c:	461d      	movcc	r5, r3
 800322e:	0553      	lsls	r3, r2, #21
 8003230:	d527      	bpl.n	8003282 <__ssputs_r+0x8e>
 8003232:	4629      	mov	r1, r5
 8003234:	f7ff ff52 	bl	80030dc <_malloc_r>
 8003238:	4606      	mov	r6, r0
 800323a:	b360      	cbz	r0, 8003296 <__ssputs_r+0xa2>
 800323c:	464a      	mov	r2, r9
 800323e:	6921      	ldr	r1, [r4, #16]
 8003240:	f000 faf8 	bl	8003834 <memcpy>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800324a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	6126      	str	r6, [r4, #16]
 8003252:	444e      	add	r6, r9
 8003254:	6026      	str	r6, [r4, #0]
 8003256:	463e      	mov	r6, r7
 8003258:	6165      	str	r5, [r4, #20]
 800325a:	eba5 0509 	sub.w	r5, r5, r9
 800325e:	60a5      	str	r5, [r4, #8]
 8003260:	42be      	cmp	r6, r7
 8003262:	d900      	bls.n	8003266 <__ssputs_r+0x72>
 8003264:	463e      	mov	r6, r7
 8003266:	4632      	mov	r2, r6
 8003268:	4641      	mov	r1, r8
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	f000 faaa 	bl	80037c4 <memmove>
 8003270:	2000      	movs	r0, #0
 8003272:	68a3      	ldr	r3, [r4, #8]
 8003274:	1b9b      	subs	r3, r3, r6
 8003276:	60a3      	str	r3, [r4, #8]
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	4433      	add	r3, r6
 800327c:	6023      	str	r3, [r4, #0]
 800327e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003282:	462a      	mov	r2, r5
 8003284:	f000 fae4 	bl	8003850 <_realloc_r>
 8003288:	4606      	mov	r6, r0
 800328a:	2800      	cmp	r0, #0
 800328c:	d1e0      	bne.n	8003250 <__ssputs_r+0x5c>
 800328e:	4650      	mov	r0, sl
 8003290:	6921      	ldr	r1, [r4, #16]
 8003292:	f7ff feb9 	bl	8003008 <_free_r>
 8003296:	230c      	movs	r3, #12
 8003298:	f8ca 3000 	str.w	r3, [sl]
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	f04f 30ff 	mov.w	r0, #4294967295
 80032a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	e7e9      	b.n	800327e <__ssputs_r+0x8a>
	...

080032ac <_svfiprintf_r>:
 80032ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b0:	4698      	mov	r8, r3
 80032b2:	898b      	ldrh	r3, [r1, #12]
 80032b4:	4607      	mov	r7, r0
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	460d      	mov	r5, r1
 80032ba:	4614      	mov	r4, r2
 80032bc:	b09d      	sub	sp, #116	@ 0x74
 80032be:	d510      	bpl.n	80032e2 <_svfiprintf_r+0x36>
 80032c0:	690b      	ldr	r3, [r1, #16]
 80032c2:	b973      	cbnz	r3, 80032e2 <_svfiprintf_r+0x36>
 80032c4:	2140      	movs	r1, #64	@ 0x40
 80032c6:	f7ff ff09 	bl	80030dc <_malloc_r>
 80032ca:	6028      	str	r0, [r5, #0]
 80032cc:	6128      	str	r0, [r5, #16]
 80032ce:	b930      	cbnz	r0, 80032de <_svfiprintf_r+0x32>
 80032d0:	230c      	movs	r3, #12
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295
 80032d8:	b01d      	add	sp, #116	@ 0x74
 80032da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032de:	2340      	movs	r3, #64	@ 0x40
 80032e0:	616b      	str	r3, [r5, #20]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80032e6:	2320      	movs	r3, #32
 80032e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032ec:	2330      	movs	r3, #48	@ 0x30
 80032ee:	f04f 0901 	mov.w	r9, #1
 80032f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80032f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003490 <_svfiprintf_r+0x1e4>
 80032fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032fe:	4623      	mov	r3, r4
 8003300:	469a      	mov	sl, r3
 8003302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003306:	b10a      	cbz	r2, 800330c <_svfiprintf_r+0x60>
 8003308:	2a25      	cmp	r2, #37	@ 0x25
 800330a:	d1f9      	bne.n	8003300 <_svfiprintf_r+0x54>
 800330c:	ebba 0b04 	subs.w	fp, sl, r4
 8003310:	d00b      	beq.n	800332a <_svfiprintf_r+0x7e>
 8003312:	465b      	mov	r3, fp
 8003314:	4622      	mov	r2, r4
 8003316:	4629      	mov	r1, r5
 8003318:	4638      	mov	r0, r7
 800331a:	f7ff ff6b 	bl	80031f4 <__ssputs_r>
 800331e:	3001      	adds	r0, #1
 8003320:	f000 80a7 	beq.w	8003472 <_svfiprintf_r+0x1c6>
 8003324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003326:	445a      	add	r2, fp
 8003328:	9209      	str	r2, [sp, #36]	@ 0x24
 800332a:	f89a 3000 	ldrb.w	r3, [sl]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 809f 	beq.w	8003472 <_svfiprintf_r+0x1c6>
 8003334:	2300      	movs	r3, #0
 8003336:	f04f 32ff 	mov.w	r2, #4294967295
 800333a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800333e:	f10a 0a01 	add.w	sl, sl, #1
 8003342:	9304      	str	r3, [sp, #16]
 8003344:	9307      	str	r3, [sp, #28]
 8003346:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800334a:	931a      	str	r3, [sp, #104]	@ 0x68
 800334c:	4654      	mov	r4, sl
 800334e:	2205      	movs	r2, #5
 8003350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003354:	484e      	ldr	r0, [pc, #312]	@ (8003490 <_svfiprintf_r+0x1e4>)
 8003356:	f000 fa5f 	bl	8003818 <memchr>
 800335a:	9a04      	ldr	r2, [sp, #16]
 800335c:	b9d8      	cbnz	r0, 8003396 <_svfiprintf_r+0xea>
 800335e:	06d0      	lsls	r0, r2, #27
 8003360:	bf44      	itt	mi
 8003362:	2320      	movmi	r3, #32
 8003364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003368:	0711      	lsls	r1, r2, #28
 800336a:	bf44      	itt	mi
 800336c:	232b      	movmi	r3, #43	@ 0x2b
 800336e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003372:	f89a 3000 	ldrb.w	r3, [sl]
 8003376:	2b2a      	cmp	r3, #42	@ 0x2a
 8003378:	d015      	beq.n	80033a6 <_svfiprintf_r+0xfa>
 800337a:	4654      	mov	r4, sl
 800337c:	2000      	movs	r0, #0
 800337e:	f04f 0c0a 	mov.w	ip, #10
 8003382:	9a07      	ldr	r2, [sp, #28]
 8003384:	4621      	mov	r1, r4
 8003386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800338a:	3b30      	subs	r3, #48	@ 0x30
 800338c:	2b09      	cmp	r3, #9
 800338e:	d94b      	bls.n	8003428 <_svfiprintf_r+0x17c>
 8003390:	b1b0      	cbz	r0, 80033c0 <_svfiprintf_r+0x114>
 8003392:	9207      	str	r2, [sp, #28]
 8003394:	e014      	b.n	80033c0 <_svfiprintf_r+0x114>
 8003396:	eba0 0308 	sub.w	r3, r0, r8
 800339a:	fa09 f303 	lsl.w	r3, r9, r3
 800339e:	4313      	orrs	r3, r2
 80033a0:	46a2      	mov	sl, r4
 80033a2:	9304      	str	r3, [sp, #16]
 80033a4:	e7d2      	b.n	800334c <_svfiprintf_r+0xa0>
 80033a6:	9b03      	ldr	r3, [sp, #12]
 80033a8:	1d19      	adds	r1, r3, #4
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	9103      	str	r1, [sp, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bfbb      	ittet	lt
 80033b2:	425b      	neglt	r3, r3
 80033b4:	f042 0202 	orrlt.w	r2, r2, #2
 80033b8:	9307      	strge	r3, [sp, #28]
 80033ba:	9307      	strlt	r3, [sp, #28]
 80033bc:	bfb8      	it	lt
 80033be:	9204      	strlt	r2, [sp, #16]
 80033c0:	7823      	ldrb	r3, [r4, #0]
 80033c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80033c4:	d10a      	bne.n	80033dc <_svfiprintf_r+0x130>
 80033c6:	7863      	ldrb	r3, [r4, #1]
 80033c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80033ca:	d132      	bne.n	8003432 <_svfiprintf_r+0x186>
 80033cc:	9b03      	ldr	r3, [sp, #12]
 80033ce:	3402      	adds	r4, #2
 80033d0:	1d1a      	adds	r2, r3, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	9203      	str	r2, [sp, #12]
 80033d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033da:	9305      	str	r3, [sp, #20]
 80033dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003494 <_svfiprintf_r+0x1e8>
 80033e0:	2203      	movs	r2, #3
 80033e2:	4650      	mov	r0, sl
 80033e4:	7821      	ldrb	r1, [r4, #0]
 80033e6:	f000 fa17 	bl	8003818 <memchr>
 80033ea:	b138      	cbz	r0, 80033fc <_svfiprintf_r+0x150>
 80033ec:	2240      	movs	r2, #64	@ 0x40
 80033ee:	9b04      	ldr	r3, [sp, #16]
 80033f0:	eba0 000a 	sub.w	r0, r0, sl
 80033f4:	4082      	lsls	r2, r0
 80033f6:	4313      	orrs	r3, r2
 80033f8:	3401      	adds	r4, #1
 80033fa:	9304      	str	r3, [sp, #16]
 80033fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003400:	2206      	movs	r2, #6
 8003402:	4825      	ldr	r0, [pc, #148]	@ (8003498 <_svfiprintf_r+0x1ec>)
 8003404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003408:	f000 fa06 	bl	8003818 <memchr>
 800340c:	2800      	cmp	r0, #0
 800340e:	d036      	beq.n	800347e <_svfiprintf_r+0x1d2>
 8003410:	4b22      	ldr	r3, [pc, #136]	@ (800349c <_svfiprintf_r+0x1f0>)
 8003412:	bb1b      	cbnz	r3, 800345c <_svfiprintf_r+0x1b0>
 8003414:	9b03      	ldr	r3, [sp, #12]
 8003416:	3307      	adds	r3, #7
 8003418:	f023 0307 	bic.w	r3, r3, #7
 800341c:	3308      	adds	r3, #8
 800341e:	9303      	str	r3, [sp, #12]
 8003420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003422:	4433      	add	r3, r6
 8003424:	9309      	str	r3, [sp, #36]	@ 0x24
 8003426:	e76a      	b.n	80032fe <_svfiprintf_r+0x52>
 8003428:	460c      	mov	r4, r1
 800342a:	2001      	movs	r0, #1
 800342c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003430:	e7a8      	b.n	8003384 <_svfiprintf_r+0xd8>
 8003432:	2300      	movs	r3, #0
 8003434:	f04f 0c0a 	mov.w	ip, #10
 8003438:	4619      	mov	r1, r3
 800343a:	3401      	adds	r4, #1
 800343c:	9305      	str	r3, [sp, #20]
 800343e:	4620      	mov	r0, r4
 8003440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003444:	3a30      	subs	r2, #48	@ 0x30
 8003446:	2a09      	cmp	r2, #9
 8003448:	d903      	bls.n	8003452 <_svfiprintf_r+0x1a6>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0c6      	beq.n	80033dc <_svfiprintf_r+0x130>
 800344e:	9105      	str	r1, [sp, #20]
 8003450:	e7c4      	b.n	80033dc <_svfiprintf_r+0x130>
 8003452:	4604      	mov	r4, r0
 8003454:	2301      	movs	r3, #1
 8003456:	fb0c 2101 	mla	r1, ip, r1, r2
 800345a:	e7f0      	b.n	800343e <_svfiprintf_r+0x192>
 800345c:	ab03      	add	r3, sp, #12
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	462a      	mov	r2, r5
 8003462:	4638      	mov	r0, r7
 8003464:	4b0e      	ldr	r3, [pc, #56]	@ (80034a0 <_svfiprintf_r+0x1f4>)
 8003466:	a904      	add	r1, sp, #16
 8003468:	f3af 8000 	nop.w
 800346c:	1c42      	adds	r2, r0, #1
 800346e:	4606      	mov	r6, r0
 8003470:	d1d6      	bne.n	8003420 <_svfiprintf_r+0x174>
 8003472:	89ab      	ldrh	r3, [r5, #12]
 8003474:	065b      	lsls	r3, r3, #25
 8003476:	f53f af2d 	bmi.w	80032d4 <_svfiprintf_r+0x28>
 800347a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800347c:	e72c      	b.n	80032d8 <_svfiprintf_r+0x2c>
 800347e:	ab03      	add	r3, sp, #12
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	462a      	mov	r2, r5
 8003484:	4638      	mov	r0, r7
 8003486:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <_svfiprintf_r+0x1f4>)
 8003488:	a904      	add	r1, sp, #16
 800348a:	f000 f87d 	bl	8003588 <_printf_i>
 800348e:	e7ed      	b.n	800346c <_svfiprintf_r+0x1c0>
 8003490:	0800391a 	.word	0x0800391a
 8003494:	08003920 	.word	0x08003920
 8003498:	08003924 	.word	0x08003924
 800349c:	00000000 	.word	0x00000000
 80034a0:	080031f5 	.word	0x080031f5

080034a4 <_printf_common>:
 80034a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a8:	4616      	mov	r6, r2
 80034aa:	4698      	mov	r8, r3
 80034ac:	688a      	ldr	r2, [r1, #8]
 80034ae:	690b      	ldr	r3, [r1, #16]
 80034b0:	4607      	mov	r7, r0
 80034b2:	4293      	cmp	r3, r2
 80034b4:	bfb8      	it	lt
 80034b6:	4613      	movlt	r3, r2
 80034b8:	6033      	str	r3, [r6, #0]
 80034ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034be:	460c      	mov	r4, r1
 80034c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034c4:	b10a      	cbz	r2, 80034ca <_printf_common+0x26>
 80034c6:	3301      	adds	r3, #1
 80034c8:	6033      	str	r3, [r6, #0]
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	0699      	lsls	r1, r3, #26
 80034ce:	bf42      	ittt	mi
 80034d0:	6833      	ldrmi	r3, [r6, #0]
 80034d2:	3302      	addmi	r3, #2
 80034d4:	6033      	strmi	r3, [r6, #0]
 80034d6:	6825      	ldr	r5, [r4, #0]
 80034d8:	f015 0506 	ands.w	r5, r5, #6
 80034dc:	d106      	bne.n	80034ec <_printf_common+0x48>
 80034de:	f104 0a19 	add.w	sl, r4, #25
 80034e2:	68e3      	ldr	r3, [r4, #12]
 80034e4:	6832      	ldr	r2, [r6, #0]
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	42ab      	cmp	r3, r5
 80034ea:	dc2b      	bgt.n	8003544 <_printf_common+0xa0>
 80034ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	3b00      	subs	r3, #0
 80034f4:	bf18      	it	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	0692      	lsls	r2, r2, #26
 80034fa:	d430      	bmi.n	800355e <_printf_common+0xba>
 80034fc:	4641      	mov	r1, r8
 80034fe:	4638      	mov	r0, r7
 8003500:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003504:	47c8      	blx	r9
 8003506:	3001      	adds	r0, #1
 8003508:	d023      	beq.n	8003552 <_printf_common+0xae>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	6922      	ldr	r2, [r4, #16]
 800350e:	f003 0306 	and.w	r3, r3, #6
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf14      	ite	ne
 8003516:	2500      	movne	r5, #0
 8003518:	6833      	ldreq	r3, [r6, #0]
 800351a:	f04f 0600 	mov.w	r6, #0
 800351e:	bf08      	it	eq
 8003520:	68e5      	ldreq	r5, [r4, #12]
 8003522:	f104 041a 	add.w	r4, r4, #26
 8003526:	bf08      	it	eq
 8003528:	1aed      	subeq	r5, r5, r3
 800352a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800352e:	bf08      	it	eq
 8003530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003534:	4293      	cmp	r3, r2
 8003536:	bfc4      	itt	gt
 8003538:	1a9b      	subgt	r3, r3, r2
 800353a:	18ed      	addgt	r5, r5, r3
 800353c:	42b5      	cmp	r5, r6
 800353e:	d11a      	bne.n	8003576 <_printf_common+0xd2>
 8003540:	2000      	movs	r0, #0
 8003542:	e008      	b.n	8003556 <_printf_common+0xb2>
 8003544:	2301      	movs	r3, #1
 8003546:	4652      	mov	r2, sl
 8003548:	4641      	mov	r1, r8
 800354a:	4638      	mov	r0, r7
 800354c:	47c8      	blx	r9
 800354e:	3001      	adds	r0, #1
 8003550:	d103      	bne.n	800355a <_printf_common+0xb6>
 8003552:	f04f 30ff 	mov.w	r0, #4294967295
 8003556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355a:	3501      	adds	r5, #1
 800355c:	e7c1      	b.n	80034e2 <_printf_common+0x3e>
 800355e:	2030      	movs	r0, #48	@ 0x30
 8003560:	18e1      	adds	r1, r4, r3
 8003562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800356c:	4422      	add	r2, r4
 800356e:	3302      	adds	r3, #2
 8003570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003574:	e7c2      	b.n	80034fc <_printf_common+0x58>
 8003576:	2301      	movs	r3, #1
 8003578:	4622      	mov	r2, r4
 800357a:	4641      	mov	r1, r8
 800357c:	4638      	mov	r0, r7
 800357e:	47c8      	blx	r9
 8003580:	3001      	adds	r0, #1
 8003582:	d0e6      	beq.n	8003552 <_printf_common+0xae>
 8003584:	3601      	adds	r6, #1
 8003586:	e7d9      	b.n	800353c <_printf_common+0x98>

08003588 <_printf_i>:
 8003588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800358c:	7e0f      	ldrb	r7, [r1, #24]
 800358e:	4691      	mov	r9, r2
 8003590:	2f78      	cmp	r7, #120	@ 0x78
 8003592:	4680      	mov	r8, r0
 8003594:	460c      	mov	r4, r1
 8003596:	469a      	mov	sl, r3
 8003598:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800359a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800359e:	d807      	bhi.n	80035b0 <_printf_i+0x28>
 80035a0:	2f62      	cmp	r7, #98	@ 0x62
 80035a2:	d80a      	bhi.n	80035ba <_printf_i+0x32>
 80035a4:	2f00      	cmp	r7, #0
 80035a6:	f000 80d1 	beq.w	800374c <_printf_i+0x1c4>
 80035aa:	2f58      	cmp	r7, #88	@ 0x58
 80035ac:	f000 80b8 	beq.w	8003720 <_printf_i+0x198>
 80035b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035b8:	e03a      	b.n	8003630 <_printf_i+0xa8>
 80035ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035be:	2b15      	cmp	r3, #21
 80035c0:	d8f6      	bhi.n	80035b0 <_printf_i+0x28>
 80035c2:	a101      	add	r1, pc, #4	@ (adr r1, 80035c8 <_printf_i+0x40>)
 80035c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035c8:	08003621 	.word	0x08003621
 80035cc:	08003635 	.word	0x08003635
 80035d0:	080035b1 	.word	0x080035b1
 80035d4:	080035b1 	.word	0x080035b1
 80035d8:	080035b1 	.word	0x080035b1
 80035dc:	080035b1 	.word	0x080035b1
 80035e0:	08003635 	.word	0x08003635
 80035e4:	080035b1 	.word	0x080035b1
 80035e8:	080035b1 	.word	0x080035b1
 80035ec:	080035b1 	.word	0x080035b1
 80035f0:	080035b1 	.word	0x080035b1
 80035f4:	08003733 	.word	0x08003733
 80035f8:	0800365f 	.word	0x0800365f
 80035fc:	080036ed 	.word	0x080036ed
 8003600:	080035b1 	.word	0x080035b1
 8003604:	080035b1 	.word	0x080035b1
 8003608:	08003755 	.word	0x08003755
 800360c:	080035b1 	.word	0x080035b1
 8003610:	0800365f 	.word	0x0800365f
 8003614:	080035b1 	.word	0x080035b1
 8003618:	080035b1 	.word	0x080035b1
 800361c:	080036f5 	.word	0x080036f5
 8003620:	6833      	ldr	r3, [r6, #0]
 8003622:	1d1a      	adds	r2, r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6032      	str	r2, [r6, #0]
 8003628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800362c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003630:	2301      	movs	r3, #1
 8003632:	e09c      	b.n	800376e <_printf_i+0x1e6>
 8003634:	6833      	ldr	r3, [r6, #0]
 8003636:	6820      	ldr	r0, [r4, #0]
 8003638:	1d19      	adds	r1, r3, #4
 800363a:	6031      	str	r1, [r6, #0]
 800363c:	0606      	lsls	r6, r0, #24
 800363e:	d501      	bpl.n	8003644 <_printf_i+0xbc>
 8003640:	681d      	ldr	r5, [r3, #0]
 8003642:	e003      	b.n	800364c <_printf_i+0xc4>
 8003644:	0645      	lsls	r5, r0, #25
 8003646:	d5fb      	bpl.n	8003640 <_printf_i+0xb8>
 8003648:	f9b3 5000 	ldrsh.w	r5, [r3]
 800364c:	2d00      	cmp	r5, #0
 800364e:	da03      	bge.n	8003658 <_printf_i+0xd0>
 8003650:	232d      	movs	r3, #45	@ 0x2d
 8003652:	426d      	negs	r5, r5
 8003654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003658:	230a      	movs	r3, #10
 800365a:	4858      	ldr	r0, [pc, #352]	@ (80037bc <_printf_i+0x234>)
 800365c:	e011      	b.n	8003682 <_printf_i+0xfa>
 800365e:	6821      	ldr	r1, [r4, #0]
 8003660:	6833      	ldr	r3, [r6, #0]
 8003662:	0608      	lsls	r0, r1, #24
 8003664:	f853 5b04 	ldr.w	r5, [r3], #4
 8003668:	d402      	bmi.n	8003670 <_printf_i+0xe8>
 800366a:	0649      	lsls	r1, r1, #25
 800366c:	bf48      	it	mi
 800366e:	b2ad      	uxthmi	r5, r5
 8003670:	2f6f      	cmp	r7, #111	@ 0x6f
 8003672:	6033      	str	r3, [r6, #0]
 8003674:	bf14      	ite	ne
 8003676:	230a      	movne	r3, #10
 8003678:	2308      	moveq	r3, #8
 800367a:	4850      	ldr	r0, [pc, #320]	@ (80037bc <_printf_i+0x234>)
 800367c:	2100      	movs	r1, #0
 800367e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003682:	6866      	ldr	r6, [r4, #4]
 8003684:	2e00      	cmp	r6, #0
 8003686:	60a6      	str	r6, [r4, #8]
 8003688:	db05      	blt.n	8003696 <_printf_i+0x10e>
 800368a:	6821      	ldr	r1, [r4, #0]
 800368c:	432e      	orrs	r6, r5
 800368e:	f021 0104 	bic.w	r1, r1, #4
 8003692:	6021      	str	r1, [r4, #0]
 8003694:	d04b      	beq.n	800372e <_printf_i+0x1a6>
 8003696:	4616      	mov	r6, r2
 8003698:	fbb5 f1f3 	udiv	r1, r5, r3
 800369c:	fb03 5711 	mls	r7, r3, r1, r5
 80036a0:	5dc7      	ldrb	r7, [r0, r7]
 80036a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036a6:	462f      	mov	r7, r5
 80036a8:	42bb      	cmp	r3, r7
 80036aa:	460d      	mov	r5, r1
 80036ac:	d9f4      	bls.n	8003698 <_printf_i+0x110>
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d10b      	bne.n	80036ca <_printf_i+0x142>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	07df      	lsls	r7, r3, #31
 80036b6:	d508      	bpl.n	80036ca <_printf_i+0x142>
 80036b8:	6923      	ldr	r3, [r4, #16]
 80036ba:	6861      	ldr	r1, [r4, #4]
 80036bc:	4299      	cmp	r1, r3
 80036be:	bfde      	ittt	le
 80036c0:	2330      	movle	r3, #48	@ 0x30
 80036c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036ca:	1b92      	subs	r2, r2, r6
 80036cc:	6122      	str	r2, [r4, #16]
 80036ce:	464b      	mov	r3, r9
 80036d0:	4621      	mov	r1, r4
 80036d2:	4640      	mov	r0, r8
 80036d4:	f8cd a000 	str.w	sl, [sp]
 80036d8:	aa03      	add	r2, sp, #12
 80036da:	f7ff fee3 	bl	80034a4 <_printf_common>
 80036de:	3001      	adds	r0, #1
 80036e0:	d14a      	bne.n	8003778 <_printf_i+0x1f0>
 80036e2:	f04f 30ff 	mov.w	r0, #4294967295
 80036e6:	b004      	add	sp, #16
 80036e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	f043 0320 	orr.w	r3, r3, #32
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	2778      	movs	r7, #120	@ 0x78
 80036f6:	4832      	ldr	r0, [pc, #200]	@ (80037c0 <_printf_i+0x238>)
 80036f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	6831      	ldr	r1, [r6, #0]
 8003700:	061f      	lsls	r7, r3, #24
 8003702:	f851 5b04 	ldr.w	r5, [r1], #4
 8003706:	d402      	bmi.n	800370e <_printf_i+0x186>
 8003708:	065f      	lsls	r7, r3, #25
 800370a:	bf48      	it	mi
 800370c:	b2ad      	uxthmi	r5, r5
 800370e:	6031      	str	r1, [r6, #0]
 8003710:	07d9      	lsls	r1, r3, #31
 8003712:	bf44      	itt	mi
 8003714:	f043 0320 	orrmi.w	r3, r3, #32
 8003718:	6023      	strmi	r3, [r4, #0]
 800371a:	b11d      	cbz	r5, 8003724 <_printf_i+0x19c>
 800371c:	2310      	movs	r3, #16
 800371e:	e7ad      	b.n	800367c <_printf_i+0xf4>
 8003720:	4826      	ldr	r0, [pc, #152]	@ (80037bc <_printf_i+0x234>)
 8003722:	e7e9      	b.n	80036f8 <_printf_i+0x170>
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	f023 0320 	bic.w	r3, r3, #32
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	e7f6      	b.n	800371c <_printf_i+0x194>
 800372e:	4616      	mov	r6, r2
 8003730:	e7bd      	b.n	80036ae <_printf_i+0x126>
 8003732:	6833      	ldr	r3, [r6, #0]
 8003734:	6825      	ldr	r5, [r4, #0]
 8003736:	1d18      	adds	r0, r3, #4
 8003738:	6961      	ldr	r1, [r4, #20]
 800373a:	6030      	str	r0, [r6, #0]
 800373c:	062e      	lsls	r6, r5, #24
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	d501      	bpl.n	8003746 <_printf_i+0x1be>
 8003742:	6019      	str	r1, [r3, #0]
 8003744:	e002      	b.n	800374c <_printf_i+0x1c4>
 8003746:	0668      	lsls	r0, r5, #25
 8003748:	d5fb      	bpl.n	8003742 <_printf_i+0x1ba>
 800374a:	8019      	strh	r1, [r3, #0]
 800374c:	2300      	movs	r3, #0
 800374e:	4616      	mov	r6, r2
 8003750:	6123      	str	r3, [r4, #16]
 8003752:	e7bc      	b.n	80036ce <_printf_i+0x146>
 8003754:	6833      	ldr	r3, [r6, #0]
 8003756:	2100      	movs	r1, #0
 8003758:	1d1a      	adds	r2, r3, #4
 800375a:	6032      	str	r2, [r6, #0]
 800375c:	681e      	ldr	r6, [r3, #0]
 800375e:	6862      	ldr	r2, [r4, #4]
 8003760:	4630      	mov	r0, r6
 8003762:	f000 f859 	bl	8003818 <memchr>
 8003766:	b108      	cbz	r0, 800376c <_printf_i+0x1e4>
 8003768:	1b80      	subs	r0, r0, r6
 800376a:	6060      	str	r0, [r4, #4]
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	6123      	str	r3, [r4, #16]
 8003770:	2300      	movs	r3, #0
 8003772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003776:	e7aa      	b.n	80036ce <_printf_i+0x146>
 8003778:	4632      	mov	r2, r6
 800377a:	4649      	mov	r1, r9
 800377c:	4640      	mov	r0, r8
 800377e:	6923      	ldr	r3, [r4, #16]
 8003780:	47d0      	blx	sl
 8003782:	3001      	adds	r0, #1
 8003784:	d0ad      	beq.n	80036e2 <_printf_i+0x15a>
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	079b      	lsls	r3, r3, #30
 800378a:	d413      	bmi.n	80037b4 <_printf_i+0x22c>
 800378c:	68e0      	ldr	r0, [r4, #12]
 800378e:	9b03      	ldr	r3, [sp, #12]
 8003790:	4298      	cmp	r0, r3
 8003792:	bfb8      	it	lt
 8003794:	4618      	movlt	r0, r3
 8003796:	e7a6      	b.n	80036e6 <_printf_i+0x15e>
 8003798:	2301      	movs	r3, #1
 800379a:	4632      	mov	r2, r6
 800379c:	4649      	mov	r1, r9
 800379e:	4640      	mov	r0, r8
 80037a0:	47d0      	blx	sl
 80037a2:	3001      	adds	r0, #1
 80037a4:	d09d      	beq.n	80036e2 <_printf_i+0x15a>
 80037a6:	3501      	adds	r5, #1
 80037a8:	68e3      	ldr	r3, [r4, #12]
 80037aa:	9903      	ldr	r1, [sp, #12]
 80037ac:	1a5b      	subs	r3, r3, r1
 80037ae:	42ab      	cmp	r3, r5
 80037b0:	dcf2      	bgt.n	8003798 <_printf_i+0x210>
 80037b2:	e7eb      	b.n	800378c <_printf_i+0x204>
 80037b4:	2500      	movs	r5, #0
 80037b6:	f104 0619 	add.w	r6, r4, #25
 80037ba:	e7f5      	b.n	80037a8 <_printf_i+0x220>
 80037bc:	0800392b 	.word	0x0800392b
 80037c0:	0800393c 	.word	0x0800393c

080037c4 <memmove>:
 80037c4:	4288      	cmp	r0, r1
 80037c6:	b510      	push	{r4, lr}
 80037c8:	eb01 0402 	add.w	r4, r1, r2
 80037cc:	d902      	bls.n	80037d4 <memmove+0x10>
 80037ce:	4284      	cmp	r4, r0
 80037d0:	4623      	mov	r3, r4
 80037d2:	d807      	bhi.n	80037e4 <memmove+0x20>
 80037d4:	1e43      	subs	r3, r0, #1
 80037d6:	42a1      	cmp	r1, r4
 80037d8:	d008      	beq.n	80037ec <memmove+0x28>
 80037da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037e2:	e7f8      	b.n	80037d6 <memmove+0x12>
 80037e4:	4601      	mov	r1, r0
 80037e6:	4402      	add	r2, r0
 80037e8:	428a      	cmp	r2, r1
 80037ea:	d100      	bne.n	80037ee <memmove+0x2a>
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037f6:	e7f7      	b.n	80037e8 <memmove+0x24>

080037f8 <_sbrk_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	2300      	movs	r3, #0
 80037fc:	4d05      	ldr	r5, [pc, #20]	@ (8003814 <_sbrk_r+0x1c>)
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	f7fc ff50 	bl	80006a8 <_sbrk>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d102      	bne.n	8003812 <_sbrk_r+0x1a>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	b103      	cbz	r3, 8003812 <_sbrk_r+0x1a>
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	bd38      	pop	{r3, r4, r5, pc}
 8003814:	200002a0 	.word	0x200002a0

08003818 <memchr>:
 8003818:	4603      	mov	r3, r0
 800381a:	b510      	push	{r4, lr}
 800381c:	b2c9      	uxtb	r1, r1
 800381e:	4402      	add	r2, r0
 8003820:	4293      	cmp	r3, r2
 8003822:	4618      	mov	r0, r3
 8003824:	d101      	bne.n	800382a <memchr+0x12>
 8003826:	2000      	movs	r0, #0
 8003828:	e003      	b.n	8003832 <memchr+0x1a>
 800382a:	7804      	ldrb	r4, [r0, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	428c      	cmp	r4, r1
 8003830:	d1f6      	bne.n	8003820 <memchr+0x8>
 8003832:	bd10      	pop	{r4, pc}

08003834 <memcpy>:
 8003834:	440a      	add	r2, r1
 8003836:	4291      	cmp	r1, r2
 8003838:	f100 33ff 	add.w	r3, r0, #4294967295
 800383c:	d100      	bne.n	8003840 <memcpy+0xc>
 800383e:	4770      	bx	lr
 8003840:	b510      	push	{r4, lr}
 8003842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003846:	4291      	cmp	r1, r2
 8003848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800384c:	d1f9      	bne.n	8003842 <memcpy+0xe>
 800384e:	bd10      	pop	{r4, pc}

08003850 <_realloc_r>:
 8003850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003854:	4607      	mov	r7, r0
 8003856:	4614      	mov	r4, r2
 8003858:	460d      	mov	r5, r1
 800385a:	b921      	cbnz	r1, 8003866 <_realloc_r+0x16>
 800385c:	4611      	mov	r1, r2
 800385e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003862:	f7ff bc3b 	b.w	80030dc <_malloc_r>
 8003866:	b92a      	cbnz	r2, 8003874 <_realloc_r+0x24>
 8003868:	f7ff fbce 	bl	8003008 <_free_r>
 800386c:	4625      	mov	r5, r4
 800386e:	4628      	mov	r0, r5
 8003870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003874:	f000 f81a 	bl	80038ac <_malloc_usable_size_r>
 8003878:	4284      	cmp	r4, r0
 800387a:	4606      	mov	r6, r0
 800387c:	d802      	bhi.n	8003884 <_realloc_r+0x34>
 800387e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003882:	d8f4      	bhi.n	800386e <_realloc_r+0x1e>
 8003884:	4621      	mov	r1, r4
 8003886:	4638      	mov	r0, r7
 8003888:	f7ff fc28 	bl	80030dc <_malloc_r>
 800388c:	4680      	mov	r8, r0
 800388e:	b908      	cbnz	r0, 8003894 <_realloc_r+0x44>
 8003890:	4645      	mov	r5, r8
 8003892:	e7ec      	b.n	800386e <_realloc_r+0x1e>
 8003894:	42b4      	cmp	r4, r6
 8003896:	4622      	mov	r2, r4
 8003898:	4629      	mov	r1, r5
 800389a:	bf28      	it	cs
 800389c:	4632      	movcs	r2, r6
 800389e:	f7ff ffc9 	bl	8003834 <memcpy>
 80038a2:	4629      	mov	r1, r5
 80038a4:	4638      	mov	r0, r7
 80038a6:	f7ff fbaf 	bl	8003008 <_free_r>
 80038aa:	e7f1      	b.n	8003890 <_realloc_r+0x40>

080038ac <_malloc_usable_size_r>:
 80038ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b0:	1f18      	subs	r0, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bfbc      	itt	lt
 80038b6:	580b      	ldrlt	r3, [r1, r0]
 80038b8:	18c0      	addlt	r0, r0, r3
 80038ba:	4770      	bx	lr

080038bc <_init>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr

080038c8 <_fini>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr
